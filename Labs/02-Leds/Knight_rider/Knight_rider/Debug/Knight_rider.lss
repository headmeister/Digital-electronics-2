
Knight_rider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000723  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066d  00000000  00000000  0000093b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000284  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000122c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ad  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ca  00000000  00000000  000015fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
	// Set pin as output in Data Direction Register...
	

	/* second LED */
	// WRITE YOUR CODE HERE
	DDRC = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	87 b9       	out	0x07, r24	; 7
	// ...and turn LED off in Data Register
	PORTC=0xFF;
  84:	88 b9       	out	0x08, r24	; 8
	
	
	

	// Button
	DDRB = DDRB | (0<<Button);
  86:	84 b1       	in	r24, 0x04	; 4
  88:	84 b9       	out	0x04, r24	; 4
	PORTD=PORTD| (1<<Button);
  8a:	58 9a       	sbi	0x0b, 0	; 11

	//
	PORTC=PORTC & ~(1<<0);
  8c:	40 98       	cbi	0x08, 0	; 8
	// Infinite loop
	int i=0;
	int up=1;
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	30 e0       	ldi	r19, 0x00	; 0
	PORTD=PORTD| (1<<Button);

	//
	PORTC=PORTC & ~(1<<0);
	// Infinite loop
	int i=0;
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	90 e0       	ldi	r25, 0x00	; 0
		}

		if (bit_is_clear(PIND,0) && up==0)
		{
			
			PORTC = PORTC ^ (1<<i);
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	70 e0       	ldi	r23, 0x00	; 0
	{
		// Pause several milliseconds
		

		// WRITE YOUR CODE HERE
		if (bit_is_clear(PIND,0) && up!=0) // if button pressed and direction is up
  9a:	48 99       	sbic	0x09, 0	; 9
  9c:	1b c0       	rjmp	.+54     	; 0xd4 <main+0x54>
  9e:	21 15       	cp	r18, r1
  a0:	31 05       	cpc	r19, r1
  a2:	09 f4       	brne	.+2      	; 0xa6 <main+0x26>
  a4:	41 c0       	rjmp	.+130    	; 0x128 <main+0xa8>
		{
			
			PORTC = PORTC ^ (1<<i);
  a6:	e8 b1       	in	r30, 0x08	; 8
  a8:	ab 01       	movw	r20, r22
  aa:	08 2e       	mov	r0, r24
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <main+0x32>
  ae:	44 0f       	add	r20, r20
  b0:	55 1f       	adc	r21, r21
  b2:	0a 94       	dec	r0
  b4:	e2 f7       	brpl	.-8      	; 0xae <main+0x2e>
  b6:	4e 27       	eor	r20, r30
  b8:	48 b9       	out	0x08, r20	; 8
			PORTC = PORTC ^ (1<<(i+1));
  ba:	e8 b1       	in	r30, 0x08	; 8
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	ab 01       	movw	r20, r22
  c0:	08 2e       	mov	r0, r24
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <main+0x48>
  c4:	44 0f       	add	r20, r20
  c6:	55 1f       	adc	r21, r21
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <main+0x44>
  cc:	4e 27       	eor	r20, r30
  ce:	48 b9       	out	0x08, r20	; 8
			i=i+1;
		}

		if (bit_is_clear(PIND,0) && up==0)
  d0:	49 b1       	in	r20, 0x09	; 9
  d2:	1a c0       	rjmp	.+52     	; 0x108 <main+0x88>
  d4:	48 99       	sbic	0x09, 0	; 9
  d6:	18 c0       	rjmp	.+48     	; 0x108 <main+0x88>
  d8:	21 15       	cp	r18, r1
  da:	31 05       	cpc	r19, r1
  dc:	a9 f4       	brne	.+42     	; 0x108 <main+0x88>
		{
			
			PORTC = PORTC ^ (1<<i);
  de:	e8 b1       	in	r30, 0x08	; 8
  e0:	ab 01       	movw	r20, r22
  e2:	08 2e       	mov	r0, r24
  e4:	02 c0       	rjmp	.+4      	; 0xea <main+0x6a>
  e6:	44 0f       	add	r20, r20
  e8:	55 1f       	adc	r21, r21
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <main+0x66>
  ee:	4e 27       	eor	r20, r30
  f0:	48 b9       	out	0x08, r20	; 8
			PORTC = PORTC ^ (1<<(i-1));
  f2:	e8 b1       	in	r30, 0x08	; 8
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	ab 01       	movw	r20, r22
  f8:	08 2e       	mov	r0, r24
  fa:	02 c0       	rjmp	.+4      	; 0x100 <main+0x80>
  fc:	44 0f       	add	r20, r20
  fe:	55 1f       	adc	r21, r21
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <main+0x7c>
 104:	4e 27       	eor	r20, r30
 106:	48 b9       	out	0x08, r20	; 8
			i=i-1;
		}

		if(i==4 || i==0) //switch up/down directin
 108:	ac 01       	movw	r20, r24
 10a:	4b 7f       	andi	r20, 0xFB	; 251
 10c:	45 2b       	or	r20, r21
 10e:	11 f4       	brne	.+4      	; 0x114 <main+0x94>
		up^=1;
 110:	41 e0       	ldi	r20, 0x01	; 1
 112:	24 27       	eor	r18, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	5f ef       	ldi	r21, 0xFF	; 255
 116:	e1 ee       	ldi	r30, 0xE1	; 225
 118:	44 e0       	ldi	r20, 0x04	; 4
 11a:	51 50       	subi	r21, 0x01	; 1
 11c:	e0 40       	sbci	r30, 0x00	; 0
 11e:	40 40       	sbci	r20, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x9a>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0xa4>
 124:	00 00       	nop
 126:	b9 cf       	rjmp	.-142    	; 0x9a <main+0x1a>
			PORTC = PORTC ^ (1<<i);
			PORTC = PORTC ^ (1<<(i+1));
			i=i+1;
		}

		if (bit_is_clear(PIND,0) && up==0)
 128:	48 9b       	sbis	0x09, 0	; 9
 12a:	d9 cf       	rjmp	.-78     	; 0xde <main+0x5e>
 12c:	ed cf       	rjmp	.-38     	; 0x108 <main+0x88>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
