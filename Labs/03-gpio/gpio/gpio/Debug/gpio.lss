
gpio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a4f  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000733  00000000  00000000  00000cff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000366  00000000  00000000  00001432  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001798  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000434  00000000  00000000  00001840  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001d4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  78:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIO_config_output>:
/* GPIO_config_input_nopull */
void GPIO_config_input_nopull(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
	*reg_name++;                    // Change pointer to Data Register
	*reg_name = *reg_name & ~(1<<pin_num);  // Data Register
  80:	fc 01       	movw	r30, r24
  82:	40 81       	ld	r20, Z
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <GPIO_config_output+0xe>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <GPIO_config_output+0xa>
  92:	24 2b       	or	r18, r20
  94:	20 83       	st	Z, r18
  96:	08 95       	ret

00000098 <GPIO_config_input_pullup>:
}
/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
  98:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
  9a:	80 81       	ld	r24, Z
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <GPIO_config_input_pullup+0xe>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <GPIO_config_input_pullup+0xa>
  aa:	92 2f       	mov	r25, r18
  ac:	90 95       	com	r25
  ae:	89 23       	and	r24, r25
  b0:	80 83       	st	Z, r24
    *reg_name++;                    // Change pointer to Data Register
  b2:	80 81       	ld	r24, Z
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  b4:	81 81       	ldd	r24, Z+1	; 0x01
  b6:	28 2b       	or	r18, r24
  b8:	21 83       	std	Z+1, r18	; 0x01
  ba:	08 95       	ret

000000bc <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  bc:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  be:	90 81       	ld	r25, Z
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <GPIO_write_low+0xe>
  c6:	22 0f       	add	r18, r18
  c8:	33 1f       	adc	r19, r19
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <GPIO_write_low+0xa>
  ce:	20 95       	com	r18
  d0:	29 23       	and	r18, r25
  d2:	20 83       	st	Z, r18
  d4:	08 95       	ret

000000d6 <GPIO_write_high>:

/*--------------------------------------------------------------------*/
/* GPIO_write_high */
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name |(1<<pin_num);
  d6:	fc 01       	movw	r30, r24
  d8:	40 81       	ld	r20, Z
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <GPIO_write_high+0xe>
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <GPIO_write_high+0xa>
  e8:	24 2b       	or	r18, r20
  ea:	20 83       	st	Z, r18
  ec:	08 95       	ret

000000ee <GPIO_toggle>:
}
/*--------------------------------------------------------------------*/
/* GPIO_toggle */
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num);
  ee:	fc 01       	movw	r30, r24
  f0:	40 81       	ld	r20, Z
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <GPIO_toggle+0xe>
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <GPIO_toggle+0xa>
 100:	24 27       	eor	r18, r20
 102:	20 83       	st	Z, r18
 104:	08 95       	ret

00000106 <GPIO_read>:
/*--------------------------------------------------------------------*/
/* GPIO_read */

uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{	 
	if(bit_is_clear(PIND,0))
 106:	89 b1       	in	r24, 0x09	; 9
 108:	80 95       	com	r24
	return 1;
	}else
	{
	return 0;
	}
 10a:	81 70       	andi	r24, 0x01	; 1
 10c:	08 95       	ret

0000010e <main>:
 * library is used instead of low-level logic operations.
 */
int main(void)
{
    /* GREEN LED */
    GPIO_config_output(&DDRB, LED_GREEN);
 10e:	65 e0       	ldi	r22, 0x05	; 5
 110:	84 e2       	ldi	r24, 0x24	; 36
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_write_low(&PORTB, LED_GREEN);
 118:	65 e0       	ldi	r22, 0x05	; 5
 11a:	85 e2       	ldi	r24, 0x25	; 37
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 5e 00 	call	0xbc	; 0xbc <GPIO_write_low>

    /* second LED */
    // WRITE YOUR CODE HERE
	GPIO_config_output(&DDRC, LED_RED);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	87 e2       	ldi	r24, 0x27	; 39
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
	GPIO_write_high(&PORTC, LED_RED);
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	88 e2       	ldi	r24, 0x28	; 40
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_write_high>
    /* push button */
    // WRITE YOUR CODE HERE
	GPIO_config_input_pullup(&DDRD,BTN);
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	8a e2       	ldi	r24, 0x2A	; 42
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_config_input_pullup>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	2f ef       	ldi	r18, 0xFF	; 255
 142:	89 e6       	ldi	r24, 0x69	; 105
 144:	98 e1       	ldi	r25, 0x18	; 24
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0x38>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x42>
 150:	00 00       	nop
    {
        // Pause several milliseconds
        _delay_ms(BLINK_DELAY);

        
		if(GPIO_read(&PIND,BTN)==0)
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	89 e2       	ldi	r24, 0x29	; 41
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 83 00 	call	0x106	; 0x106 <GPIO_read>
 15c:	81 11       	cpse	r24, r1
 15e:	f0 cf       	rjmp	.-32     	; 0x140 <main+0x32>
		{
			GPIO_toggle(&DDRB,LED_GREEN);  //toggle green led
 160:	65 e0       	ldi	r22, 0x05	; 5
 162:	84 e2       	ldi	r24, 0x24	; 36
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 77 00 	call	0xee	; 0xee <GPIO_toggle>
			GPIO_toggle(&DDRC,LED_RED); // toggle red led
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	87 e2       	ldi	r24, 0x27	; 39
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 77 00 	call	0xee	; 0xee <GPIO_toggle>
 174:	e5 cf       	rjmp	.-54     	; 0x140 <main+0x32>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
