
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  0000062a  000006be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000062a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800132  00800132  000006f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000720  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000144d  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b6  00000000  00000000  00001c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000982  00000000  00000000  00002613  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  00002f98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050f  00000000  00000000  000031a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000af8  00000000  00000000  000036b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000041ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 b9 01 	jmp	0x372	; 0x372 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e2       	ldi	r30, 0x2A	; 42
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e3       	ldi	r26, 0x32	; 50
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 33       	cpi	r26, 0x39	; 57
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  9e:	0c 94 13 03 	jmp	0x626	; 0x626 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	29 98       	cbi	0x05, 1	; 5
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	28 9a       	sbi	0x05, 0	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_data>:
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 12a:	08 95       	ret

0000012c <lcd_gotoxy>:
 12c:	61 11       	cpse	r22, r1
 12e:	04 c0       	rjmp	.+8      	; 0x138 <lcd_gotoxy+0xc>
 130:	80 58       	subi	r24, 0x80	; 128
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret
 138:	80 54       	subi	r24, 0x40	; 64
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_clrscr>:
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 146:	08 95       	ret

00000148 <lcd_putc>:
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 14e:	08 95       	ret

00000150 <lcd_puts>:
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ec 01       	movw	r28, r24
 156:	21 96       	adiw	r28, 0x01	; 1
 158:	fc 01       	movw	r30, r24
 15a:	80 81       	ld	r24, Z
 15c:	88 23       	and	r24, r24
 15e:	29 f0       	breq	.+10     	; 0x16a <lcd_puts+0x1a>
 160:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 164:	89 91       	ld	r24, Y+
 166:	81 11       	cpse	r24, r1
 168:	fb cf       	rjmp	.-10     	; 0x160 <lcd_puts+0x10>
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 174:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 176:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 178:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 17a:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 17c:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 17e:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 180:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	99 ef       	ldi	r25, 0xF9	; 249
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x16>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x1c>
 18c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 18e:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 190:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 192:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	9e e4       	ldi	r25, 0x4E	; 78
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_init+0x2a>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_init+0x30>
 1a0:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_init+0x3a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_init+0x40>
 1b0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init+0x4a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_init+0x50>
 1c0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1c2:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1c4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_init+0x5c>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_init+0x62>
 1d2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1e0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1ea:	8c 2f       	mov	r24, r28
 1ec:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
}/* lcd_init */
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <main>:
/**
 * Main function where the program execution begins. Update stopwatch
 * value on LCD display when 8-bit Timer/Counter2 overflows.
 */
int main(void)
{
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
 1fc:	a8 97       	sbiw	r28, 0x28	; 40
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61


	uint8_t one_bar[8] = {
 208:	88 e0       	ldi	r24, 0x08	; 8
 20a:	e1 e0       	ldi	r30, 0x01	; 1
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	de 01       	movw	r26, r28
 210:	11 96       	adiw	r26, 0x01	; 1
 212:	01 90       	ld	r0, Z+
 214:	0d 92       	st	X+, r0
 216:	8a 95       	dec	r24
 218:	e1 f7       	brne	.-8      	; 0x212 <main+0x1e>
		0b10000,
		0b10000,
		0b10000
	};

	uint8_t two_bar[8] = {
 21a:	88 e0       	ldi	r24, 0x08	; 8
 21c:	e9 e0       	ldi	r30, 0x09	; 9
 21e:	f1 e0       	ldi	r31, 0x01	; 1
 220:	de 01       	movw	r26, r28
 222:	19 96       	adiw	r26, 0x09	; 9
 224:	01 90       	ld	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	8a 95       	dec	r24
 22a:	e1 f7       	brne	.-8      	; 0x224 <main+0x30>
		0b11000,
		0b11000,
		0b11000
	};

	uint8_t three_bar[8] = {
 22c:	88 e0       	ldi	r24, 0x08	; 8
 22e:	e1 e1       	ldi	r30, 0x11	; 17
 230:	f1 e0       	ldi	r31, 0x01	; 1
 232:	de 01       	movw	r26, r28
 234:	51 96       	adiw	r26, 0x11	; 17
 236:	01 90       	ld	r0, Z+
 238:	0d 92       	st	X+, r0
 23a:	8a 95       	dec	r24
 23c:	e1 f7       	brne	.-8      	; 0x236 <main+0x42>
		0b11100,
		0b11100,
		0b11100,
		0b11100
	};
	uint8_t four_bar[8] = {
 23e:	88 e0       	ldi	r24, 0x08	; 8
 240:	e9 e1       	ldi	r30, 0x19	; 25
 242:	f1 e0       	ldi	r31, 0x01	; 1
 244:	de 01       	movw	r26, r28
 246:	59 96       	adiw	r26, 0x19	; 25
 248:	01 90       	ld	r0, Z+
 24a:	0d 92       	st	X+, r0
 24c:	8a 95       	dec	r24
 24e:	e1 f7       	brne	.-8      	; 0x248 <main+0x54>
		0b11110,
		0b11110,
		0b11110
	};

	uint8_t five_bar[8] = {
 250:	88 e0       	ldi	r24, 0x08	; 8
 252:	e1 e2       	ldi	r30, 0x21	; 33
 254:	f1 e0       	ldi	r31, 0x01	; 1
 256:	de 01       	movw	r26, r28
 258:	91 96       	adiw	r26, 0x21	; 33
 25a:	01 90       	ld	r0, Z+
 25c:	0d 92       	st	X+, r0
 25e:	8a 95       	dec	r24
 260:	e1 f7       	brne	.-8      	; 0x25a <main+0x66>




	// Initialize LCD display
	lcd_init(LCD_DISP_ON);
 262:	8c e0       	ldi	r24, 0x0C	; 12
 264:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_init>

	lcd_command(1 << LCD_CGRAM);
 268:	80 e4       	ldi	r24, 0x40	; 64
 26a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 26e:	8e 01       	movw	r16, r28
 270:	0f 5f       	subi	r16, 0xFF	; 255
 272:	1f 4f       	sbci	r17, 0xFF	; 255
 274:	7e 01       	movw	r14, r28
 276:	89 e0       	ldi	r24, 0x09	; 9
 278:	e8 0e       	add	r14, r24
 27a:	f1 1c       	adc	r15, r1
	for (uint8_t i = 0; i < 8; i++)
	{
		// Store all new chars to memory line by line
		lcd_data(one_bar[i]);
 27c:	f8 01       	movw	r30, r16
 27e:	81 91       	ld	r24, Z+
 280:	8f 01       	movw	r16, r30
 282:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>

	// Initialize LCD display
	lcd_init(LCD_DISP_ON);

	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 8; i++)
 286:	e0 16       	cp	r14, r16
 288:	f1 06       	cpc	r15, r17
 28a:	c1 f7       	brne	.-16     	; 0x27c <main+0x88>
 28c:	8e 01       	movw	r16, r28
 28e:	07 5f       	subi	r16, 0xF7	; 247
 290:	1f 4f       	sbci	r17, 0xFF	; 255
 292:	7e 01       	movw	r14, r28
 294:	f1 e1       	ldi	r31, 0x11	; 17
 296:	ef 0e       	add	r14, r31
 298:	f1 1c       	adc	r15, r1
		lcd_data(one_bar[i]);
	}
	for (uint8_t i = 0; i < 8; i++)
	{
		// Store all new chars to memory line by line
		lcd_data(two_bar[i]);
 29a:	f8 01       	movw	r30, r16
 29c:	81 91       	ld	r24, Z+
 29e:	8f 01       	movw	r16, r30
 2a0:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
	for (uint8_t i = 0; i < 8; i++)
	{
		// Store all new chars to memory line by line
		lcd_data(one_bar[i]);
	}
	for (uint8_t i = 0; i < 8; i++)
 2a4:	e0 16       	cp	r14, r16
 2a6:	f1 06       	cpc	r15, r17
 2a8:	c1 f7       	brne	.-16     	; 0x29a <main+0xa6>
 2aa:	8e 01       	movw	r16, r28
 2ac:	0f 5e       	subi	r16, 0xEF	; 239
 2ae:	1f 4f       	sbci	r17, 0xFF	; 255
 2b0:	7e 01       	movw	r14, r28
 2b2:	f9 e1       	ldi	r31, 0x19	; 25
 2b4:	ef 0e       	add	r14, r31
 2b6:	f1 1c       	adc	r15, r1
		lcd_data(two_bar[i]);
	}
	for (uint8_t i = 0; i < 8; i++)
	{
		// Store all new chars to memory line by line
		lcd_data(three_bar[i]);
 2b8:	f8 01       	movw	r30, r16
 2ba:	81 91       	ld	r24, Z+
 2bc:	8f 01       	movw	r16, r30
 2be:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
	for (uint8_t i = 0; i < 8; i++)
	{
		// Store all new chars to memory line by line
		lcd_data(two_bar[i]);
	}
	for (uint8_t i = 0; i < 8; i++)
 2c2:	e0 16       	cp	r14, r16
 2c4:	f1 06       	cpc	r15, r17
 2c6:	c1 f7       	brne	.-16     	; 0x2b8 <main+0xc4>
 2c8:	8e 01       	movw	r16, r28
 2ca:	07 5e       	subi	r16, 0xE7	; 231
 2cc:	1f 4f       	sbci	r17, 0xFF	; 255
 2ce:	7e 01       	movw	r14, r28
 2d0:	f1 e2       	ldi	r31, 0x21	; 33
 2d2:	ef 0e       	add	r14, r31
 2d4:	f1 1c       	adc	r15, r1
		lcd_data(three_bar[i]);
	}
	for (uint8_t i = 0; i < 8; i++)
	{
		// Store all new chars to memory line by line
		lcd_data(four_bar[i]);
 2d6:	f8 01       	movw	r30, r16
 2d8:	81 91       	ld	r24, Z+
 2da:	8f 01       	movw	r16, r30
 2dc:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
	for (uint8_t i = 0; i < 8; i++)
	{
		// Store all new chars to memory line by line
		lcd_data(three_bar[i]);
	}
	for (uint8_t i = 0; i < 8; i++)
 2e0:	e0 16       	cp	r14, r16
 2e2:	f1 06       	cpc	r15, r17
 2e4:	c1 f7       	brne	.-16     	; 0x2d6 <main+0xe2>
 2e6:	8e 01       	movw	r16, r28
 2e8:	0f 5d       	subi	r16, 0xDF	; 223
 2ea:	1f 4f       	sbci	r17, 0xFF	; 255
 2ec:	7e 01       	movw	r14, r28
 2ee:	f9 e2       	ldi	r31, 0x29	; 41
 2f0:	ef 0e       	add	r14, r31
 2f2:	f1 1c       	adc	r15, r1
		lcd_data(four_bar[i]);
	}
	for (uint8_t i = 0; i < 8; i++)
	{
		// Store all new chars to memory line by line
		lcd_data(five_bar[i]);
 2f4:	f8 01       	movw	r30, r16
 2f6:	81 91       	ld	r24, Z+
 2f8:	8f 01       	movw	r16, r30
 2fa:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
	for (uint8_t i = 0; i < 8; i++)
	{
		// Store all new chars to memory line by line
		lcd_data(four_bar[i]);
	}
	for (uint8_t i = 0; i < 8; i++)
 2fe:	0e 15       	cp	r16, r14
 300:	1f 05       	cpc	r17, r15
 302:	c1 f7       	brne	.-16     	; 0x2f4 <main+0x100>
	}



	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 304:	80 e8       	ldi	r24, 0x80	; 128
 306:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
	// Display first custom character
   // lcd_putc(0);


   // Put string(s) at LCD display
	lcd_gotoxy(1, 0);
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_puts("00:00.0");
 312:	89 e2       	ldi	r24, 0x29	; 41
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
	lcd_gotoxy(11, 0);
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	8b e0       	ldi	r24, 0x0B	; 11
 31e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc('a');
 322:	81 e6       	ldi	r24, 0x61	; 97
 324:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>

	lcd_gotoxy(1, 1);
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc('b');
 330:	82 e6       	ldi	r24, 0x62	; 98
 332:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>

	lcd_gotoxy(11, 1);
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	8b e0       	ldi	r24, 0x0B	; 11
 33a:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc('c');
 33e:	83 e6       	ldi	r24, 0x63	; 99
 340:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>

	// Configure 8-bit Timer/Counter2 for Stopwatch
	// Set prescaler and enable overflow interrupt every 16 ms
	TIM2_overflow_interrupt_enable();
 344:	e0 e7       	ldi	r30, 0x70	; 112
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	81 60       	ori	r24, 0x01	; 1
 34c:	80 83       	st	Z, r24
	TIM2_overflow_16m();
 34e:	e1 eb       	ldi	r30, 0xB1	; 177
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	87 60       	ori	r24, 0x07	; 7
 356:	80 83       	st	Z, r24


	// Config timer0 16m ovf and enable
	TIM0_overflow_interrupt_enable();
 358:	ee e6       	ldi	r30, 0x6E	; 110
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	81 60       	ori	r24, 0x01	; 1
 360:	80 83       	st	Z, r24
	TIM0_overflow_16m();
 362:	85 b5       	in	r24, 0x25	; 37
 364:	8d 7f       	andi	r24, 0xFD	; 253
 366:	85 bd       	out	0x25, r24	; 37
 368:	85 b5       	in	r24, 0x25	; 37
 36a:	85 60       	ori	r24, 0x05	; 5
 36c:	85 bd       	out	0x25, r24	; 37

	// Enables interrupts by setting the global interrupt mask
	sei();
 36e:	78 94       	sei
 370:	ff cf       	rjmp	.-2      	; 0x370 <main+0x17c>

00000372 <__vector_9>:
 * ISR starts when Timer/Counter2 overflows. Update the stopwatch on
 * LCD display every sixth overflow, ie approximately every 100 ms
 * (6 x 16 ms = 100 ms).
 */
ISR(TIMER2_OVF_vect)
{
 372:	1f 92       	push	r1
 374:	0f 92       	push	r0
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	0f 92       	push	r0
 37a:	11 24       	eor	r1, r1
 37c:	0f 93       	push	r16
 37e:	1f 93       	push	r17
 380:	2f 93       	push	r18
 382:	3f 93       	push	r19
 384:	4f 93       	push	r20
 386:	5f 93       	push	r21
 388:	6f 93       	push	r22
 38a:	7f 93       	push	r23
 38c:	8f 93       	push	r24
 38e:	9f 93       	push	r25
 390:	af 93       	push	r26
 392:	bf 93       	push	r27
 394:	ef 93       	push	r30
 396:	ff 93       	push	r31
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	00 d0       	rcall	.+0      	; 0x39e <__vector_9+0x2c>
 39e:	cd b7       	in	r28, 0x3d	; 61
 3a0:	de b7       	in	r29, 0x3e	; 62
	static uint8_t number_of_overflows = 0;
	static uint8_t tens = 0;        // Tenths of a second
	static uint8_t secs = 0;        // Seconds
	static uint8_t minutes = 0;		// Minutes
	char lcd_string[2] = "  ";      // String for converting numbers by itoa()
 3a2:	80 e2       	ldi	r24, 0x20	; 32
 3a4:	90 e2       	ldi	r25, 0x20	; 32
 3a6:	9a 83       	std	Y+2, r25	; 0x02
 3a8:	89 83       	std	Y+1, r24	; 0x01
	int sq = 0;

	number_of_overflows++;
 3aa:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <number_of_overflows.1971>
 3ae:	8f 5f       	subi	r24, 0xFF	; 255
	if (number_of_overflows >= 6)
 3b0:	86 30       	cpi	r24, 0x06	; 6
 3b2:	18 f4       	brcc	.+6      	; 0x3ba <__vector_9+0x48>
	static uint8_t secs = 0;        // Seconds
	static uint8_t minutes = 0;		// Minutes
	char lcd_string[2] = "  ";      // String for converting numbers by itoa()
	int sq = 0;

	number_of_overflows++;
 3b4:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <number_of_overflows.1971>
 3b8:	7f c0       	rjmp	.+254    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
	if (number_of_overflows >= 6)
	{
		// Do this every 6 x 16 ms = 100 ms
		number_of_overflows = 0;
 3ba:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <number_of_overflows.1971>

		if (tens < 9)
 3be:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <tens.1972>
 3c2:	89 30       	cpi	r24, 0x09	; 9
 3c4:	20 f4       	brcc	.+8      	; 0x3ce <__vector_9+0x5c>
			tens++;
 3c6:	8f 5f       	subi	r24, 0xFF	; 255
 3c8:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <tens.1972>
 3cc:	07 c0       	rjmp	.+14     	; 0x3dc <__vector_9+0x6a>
		else
		{
			secs++;
 3ce:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <secs.1973>
 3d2:	8f 5f       	subi	r24, 0xFF	; 255
 3d4:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <secs.1973>

			tens = 0;
 3d8:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <tens.1972>
		}

		if (secs > 59)
 3dc:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <secs.1973>
 3e0:	8c 33       	cpi	r24, 0x3C	; 60
 3e2:	38 f0       	brcs	.+14     	; 0x3f2 <__vector_9+0x80>
		{
			secs = 0;
 3e4:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <secs.1973>
			minutes++;
 3e8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <minutes.1974>
 3ec:	8f 5f       	subi	r24, 0xFF	; 255
 3ee:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <minutes.1974>
		}

		if (minutes > 59)
 3f2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <minutes.1974>
 3f6:	8c 33       	cpi	r24, 0x3C	; 60
 3f8:	10 f0       	brcs	.+4      	; 0x3fe <__vector_9+0x8c>
		{
			minutes = 0;
 3fa:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <minutes.1974>
		}
		lcd_gotoxy(1, 0);
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		if (minutes < 10) // if less than 10 seconds write to second position in seconds
 406:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <minutes.1974>
 40a:	8a 30       	cpi	r24, 0x0A	; 10
 40c:	38 f4       	brcc	.+14     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		{

			lcd_putc('0');
 40e:	80 e3       	ldi	r24, 0x30	; 48
 410:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
			lcd_gotoxy(2, 0);
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 41c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <minutes.1974>
 420:	4a e0       	ldi	r20, 0x0A	; 10
 422:	be 01       	movw	r22, r28
 424:	6f 5f       	subi	r22, 0xFF	; 255
 426:	7f 4f       	sbci	r23, 0xFF	; 255
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 de 02 	call	0x5bc	; 0x5bc <__itoa_ncheck>

		}

		itoa(minutes, lcd_string, 10);
		lcd_puts(lcd_string);
 42e:	ce 01       	movw	r24, r28
 430:	01 96       	adiw	r24, 0x01	; 1
 432:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>




		lcd_gotoxy(4, 0);
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	84 e0       	ldi	r24, 0x04	; 4
 43a:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>

		if (secs < 10) // if less than 10 seconds write to second position in seconds
 43e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <secs.1973>
 442:	8a 30       	cpi	r24, 0x0A	; 10
 444:	38 f4       	brcc	.+14     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		{

			lcd_putc('0');
 446:	80 e3       	ldi	r24, 0x30	; 48
 448:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
			lcd_gotoxy(5, 0);
 44c:	60 e0       	ldi	r22, 0x00	; 0
 44e:	85 e0       	ldi	r24, 0x05	; 5
 450:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 454:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <secs.1973>
 458:	4a e0       	ldi	r20, 0x0A	; 10
 45a:	be 01       	movw	r22, r28
 45c:	6f 5f       	subi	r22, 0xFF	; 255
 45e:	7f 4f       	sbci	r23, 0xFF	; 255
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 de 02 	call	0x5bc	; 0x5bc <__itoa_ncheck>

		}


		itoa(secs, lcd_string, 10);
		lcd_puts(lcd_string);
 466:	ce 01       	movw	r24, r28
 468:	01 96       	adiw	r24, 0x01	; 1
 46a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>


		lcd_gotoxy(7, 0);
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	87 e0       	ldi	r24, 0x07	; 7
 472:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 476:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <tens.1972>
 47a:	4a e0       	ldi	r20, 0x0A	; 10
 47c:	be 01       	movw	r22, r28
 47e:	6f 5f       	subi	r22, 0xFF	; 255
 480:	7f 4f       	sbci	r23, 0xFF	; 255
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 de 02 	call	0x5bc	; 0x5bc <__itoa_ncheck>
		itoa(tens, lcd_string, 10);
		lcd_puts(lcd_string);
 488:	ce 01       	movw	r24, r28
 48a:	01 96       	adiw	r24, 0x01	; 1
 48c:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>

		sq = (int)secs * (int)secs; // create square of secs
 490:	00 91 36 01 	lds	r16, 0x0136	; 0x800136 <secs.1973>
 494:	00 9f       	mul	r16, r16
 496:	80 01       	movw	r16, r0
 498:	11 24       	eor	r1, r1
		lcd_gotoxy(11, 0); 
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	8b e0       	ldi	r24, 0x0B	; 11
 49e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 4a2:	4a e0       	ldi	r20, 0x0A	; 10
 4a4:	be 01       	movw	r22, r28
 4a6:	6f 5f       	subi	r22, 0xFF	; 255
 4a8:	7f 4f       	sbci	r23, 0xFF	; 255
 4aa:	c8 01       	movw	r24, r16
 4ac:	0e 94 de 02 	call	0x5bc	; 0x5bc <__itoa_ncheck>
			itoa(sq, lcd_string, 10);
		lcd_puts(lcd_string);
 4b0:	ce 01       	movw	r24, r28
 4b2:	01 96       	adiw	r24, 0x01	; 1
 4b4:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
	}
}
 4b8:	0f 90       	pop	r0
 4ba:	0f 90       	pop	r0
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	ff 91       	pop	r31
 4c2:	ef 91       	pop	r30
 4c4:	bf 91       	pop	r27
 4c6:	af 91       	pop	r26
 4c8:	9f 91       	pop	r25
 4ca:	8f 91       	pop	r24
 4cc:	7f 91       	pop	r23
 4ce:	6f 91       	pop	r22
 4d0:	5f 91       	pop	r21
 4d2:	4f 91       	pop	r20
 4d4:	3f 91       	pop	r19
 4d6:	2f 91       	pop	r18
 4d8:	1f 91       	pop	r17
 4da:	0f 91       	pop	r16
 4dc:	0f 90       	pop	r0
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	0f 90       	pop	r0
 4e2:	1f 90       	pop	r1
 4e4:	18 95       	reti

000004e6 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 4e6:	1f 92       	push	r1
 4e8:	0f 92       	push	r0
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	0f 92       	push	r0
 4ee:	11 24       	eor	r1, r1
 4f0:	2f 93       	push	r18
 4f2:	3f 93       	push	r19
 4f4:	4f 93       	push	r20
 4f6:	5f 93       	push	r21
 4f8:	6f 93       	push	r22
 4fa:	7f 93       	push	r23
 4fc:	8f 93       	push	r24
 4fe:	9f 93       	push	r25
 500:	af 93       	push	r26
 502:	bf 93       	push	r27
 504:	cf 93       	push	r28
 506:	ef 93       	push	r30
 508:	ff 93       	push	r31
	static uint8_t symbol = 0;
	static uint8_t position = 0;

	static uint8_t ovf2 = 1;

	ovf++;
 50a:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <ovf.1982>
 50e:	9f 5f       	subi	r25, 0xFF	; 255
 510:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <ovf.1982>

	if ((20 * (int)ovf2 - 16 * (int)ovf) < 0) // basically a rounding algorithm to change symbol / position every approx 20 ms
 514:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 518:	44 e1       	ldi	r20, 0x14	; 20
 51a:	84 9f       	mul	r24, r20
 51c:	90 01       	movw	r18, r0
 51e:	11 24       	eor	r1, r1
 520:	40 e1       	ldi	r20, 0x10	; 16
 522:	94 9f       	mul	r25, r20
 524:	20 19       	sub	r18, r0
 526:	31 09       	sbc	r19, r1
 528:	11 24       	eor	r1, r1
 52a:	33 23       	and	r19, r19
 52c:	94 f4       	brge	.+36     	; 0x552 <__vector_16+0x6c>
	{
		ovf2++;
 52e:	8f 5f       	subi	r24, 0xFF	; 255
 530:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>

		if (symbol < 4)
 534:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <symbol.1983>
 538:	84 30       	cpi	r24, 0x04	; 4
 53a:	20 f4       	brcc	.+8      	; 0x544 <__vector_16+0x5e>
			symbol++;
 53c:	8f 5f       	subi	r24, 0xFF	; 255
 53e:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <symbol.1983>
 542:	07 c0       	rjmp	.+14     	; 0x552 <__vector_16+0x6c>
		else
		{
			symbol = 0;
 544:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <symbol.1983>
			position++;
 548:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 54c:	8f 5f       	subi	r24, 0xFF	; 255
 54e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end>
	}




	if (position > 9 || ovf >= 60) // if last position or overflow (to compensate for rounding) 
 552:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 556:	8a 30       	cpi	r24, 0x0A	; 10
 558:	10 f4       	brcc	.+4      	; 0x55e <__vector_16+0x78>
 55a:	9c 33       	cpi	r25, 0x3C	; 60
 55c:	a8 f0       	brcs	.+42     	; 0x588 <__vector_16+0xa2>
	{
		position = 0;
 55e:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <__data_end>
		symbol = 0;
 562:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <symbol.1983>
		for (uint8_t i = 0; i <= 9; i++) // clear bar
 566:	c0 e0       	ldi	r28, 0x00	; 0
		{
			lcd_gotoxy(1 + i, 1);
 568:	cf 5f       	subi	r28, 0xFF	; 255
 56a:	61 e0       	ldi	r22, 0x01	; 1
 56c:	8c 2f       	mov	r24, r28
 56e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_putc(10);
 572:	8a e0       	ldi	r24, 0x0A	; 10
 574:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>

	if (position > 9 || ovf >= 60) // if last position or overflow (to compensate for rounding) 
	{
		position = 0;
		symbol = 0;
		for (uint8_t i = 0; i <= 9; i++) // clear bar
 578:	ca 30       	cpi	r28, 0x0A	; 10
 57a:	b1 f7       	brne	.-20     	; 0x568 <__vector_16+0x82>
		{
			lcd_gotoxy(1 + i, 1);
			lcd_putc(10);
		}
		ovf = 0;
 57c:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ovf.1982>
		ovf2 = 1;
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 586:	08 c0       	rjmp	.+16     	; 0x598 <__vector_16+0xb2>
	}
	else
	{
		lcd_gotoxy(1 + position, 1);
 588:	61 e0       	ldi	r22, 0x01	; 1
 58a:	8f 5f       	subi	r24, 0xFF	; 255
 58c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_putc(symbol);
 590:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <symbol.1983>
 594:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>

	}

 598:	ff 91       	pop	r31
 59a:	ef 91       	pop	r30
 59c:	cf 91       	pop	r28
 59e:	bf 91       	pop	r27
 5a0:	af 91       	pop	r26
 5a2:	9f 91       	pop	r25
 5a4:	8f 91       	pop	r24
 5a6:	7f 91       	pop	r23
 5a8:	6f 91       	pop	r22
 5aa:	5f 91       	pop	r21
 5ac:	4f 91       	pop	r20
 5ae:	3f 91       	pop	r19
 5b0:	2f 91       	pop	r18
 5b2:	0f 90       	pop	r0
 5b4:	0f be       	out	0x3f, r0	; 63
 5b6:	0f 90       	pop	r0
 5b8:	1f 90       	pop	r1
 5ba:	18 95       	reti

000005bc <__itoa_ncheck>:
 5bc:	bb 27       	eor	r27, r27
 5be:	4a 30       	cpi	r20, 0x0A	; 10
 5c0:	31 f4       	brne	.+12     	; 0x5ce <__itoa_ncheck+0x12>
 5c2:	99 23       	and	r25, r25
 5c4:	22 f4       	brpl	.+8      	; 0x5ce <__itoa_ncheck+0x12>
 5c6:	bd e2       	ldi	r27, 0x2D	; 45
 5c8:	90 95       	com	r25
 5ca:	81 95       	neg	r24
 5cc:	9f 4f       	sbci	r25, 0xFF	; 255
 5ce:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__utoa_common>

000005d2 <__utoa_ncheck>:
 5d2:	bb 27       	eor	r27, r27

000005d4 <__utoa_common>:
 5d4:	fb 01       	movw	r30, r22
 5d6:	55 27       	eor	r21, r21
 5d8:	aa 27       	eor	r26, r26
 5da:	88 0f       	add	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	aa 1f       	adc	r26, r26
 5e0:	a4 17       	cp	r26, r20
 5e2:	10 f0       	brcs	.+4      	; 0x5e8 <__utoa_common+0x14>
 5e4:	a4 1b       	sub	r26, r20
 5e6:	83 95       	inc	r24
 5e8:	50 51       	subi	r21, 0x10	; 16
 5ea:	b9 f7       	brne	.-18     	; 0x5da <__utoa_common+0x6>
 5ec:	a0 5d       	subi	r26, 0xD0	; 208
 5ee:	aa 33       	cpi	r26, 0x3A	; 58
 5f0:	08 f0       	brcs	.+2      	; 0x5f4 <__utoa_common+0x20>
 5f2:	a9 5d       	subi	r26, 0xD9	; 217
 5f4:	a1 93       	st	Z+, r26
 5f6:	00 97       	sbiw	r24, 0x00	; 0
 5f8:	79 f7       	brne	.-34     	; 0x5d8 <__utoa_common+0x4>
 5fa:	b1 11       	cpse	r27, r1
 5fc:	b1 93       	st	Z+, r27
 5fe:	11 92       	st	Z+, r1
 600:	cb 01       	movw	r24, r22
 602:	0c 94 03 03 	jmp	0x606	; 0x606 <strrev>

00000606 <strrev>:
 606:	dc 01       	movw	r26, r24
 608:	fc 01       	movw	r30, r24
 60a:	67 2f       	mov	r22, r23
 60c:	71 91       	ld	r23, Z+
 60e:	77 23       	and	r23, r23
 610:	e1 f7       	brne	.-8      	; 0x60a <strrev+0x4>
 612:	32 97       	sbiw	r30, 0x02	; 2
 614:	04 c0       	rjmp	.+8      	; 0x61e <strrev+0x18>
 616:	7c 91       	ld	r23, X
 618:	6d 93       	st	X+, r22
 61a:	70 83       	st	Z, r23
 61c:	62 91       	ld	r22, -Z
 61e:	ae 17       	cp	r26, r30
 620:	bf 07       	cpc	r27, r31
 622:	c8 f3       	brcs	.-14     	; 0x616 <strrev+0x10>
 624:	08 95       	ret

00000626 <_exit>:
 626:	f8 94       	cli

00000628 <__stop_program>:
 628:	ff cf       	rjmp	.-2      	; 0x628 <__stop_program>
