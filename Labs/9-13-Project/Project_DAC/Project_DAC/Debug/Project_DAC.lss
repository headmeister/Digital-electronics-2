
Project_DAC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000d72  00000e06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003f3  0080011e  0080011e  00000e24  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a50  00000000  00000000  00000ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000778  00000000  00000000  00001944  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000596  00000000  00000000  000020bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  00002654  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000438  00000000  00000000  000027e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000682  00000000  00000000  00002c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000329a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_9>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_16>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	05 a8       	ldd	r0, Z+53	; 0x35
  6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
  6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__divsf3_pse+0x7e>
  6e:	4e b9       	out	0x0e, r20	; 14
  70:	38 36       	cpi	r19, 0x68	; 104
  72:	a9 02       	muls	r26, r25
  74:	0c 50       	subi	r16, 0x0C	; 12
  76:	b9 91       	ld	r27, Y+
  78:	86 88       	ldd	r8, Z+22	; 0x16
  7a:	08 3c       	cpi	r16, 0xC8	; 200
  7c:	a6 aa       	std	Z+54, r10	; 0x36
  7e:	aa 2a       	or	r10, r26
  80:	be 00       	.word	0x00be	; ????
  82:	00 00       	nop
  84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	e2 e7       	ldi	r30, 0x72	; 114
  9a:	fd e0       	ldi	r31, 0x0D	; 13
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
  9e:	05 90       	lpm	r0, Z+
  a0:	0d 92       	st	X+, r0
  a2:	ae 31       	cpi	r26, 0x1E	; 30
  a4:	b1 07       	cpc	r27, r17
  a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
  a8:	25 e0       	ldi	r18, 0x05	; 5
  aa:	ae e1       	ldi	r26, 0x1E	; 30
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	a1 31       	cpi	r26, 0x11	; 17
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	0e 94 83 01 	call	0x306	; 0x306 <main>
  bc:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <__vector_16>:
	}
}


ISR(TIMER0_OVF_vect)
{
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	2f 93       	push	r18
  d0:	3f 93       	push	r19
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	ef 93       	push	r30
  d8:	ff 93       	push	r31
	static index = 0;

	


	if (index < arr_size -1)
  da:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <index.1721>
  de:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <index.1721+0x1>
  e2:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <arr_size>
  e6:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <arr_size+0x1>
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	28 17       	cp	r18, r24
  ee:	39 07       	cpc	r19, r25
  f0:	38 f4       	brcc	.+14     	; 0x100 <__vector_16+0x3c>
	{
		
		index++;
  f2:	2f 5f       	subi	r18, 0xFF	; 255
  f4:	3f 4f       	sbci	r19, 0xFF	; 255
  f6:	30 93 24 01 	sts	0x0124, r19	; 0x800124 <index.1721+0x1>
  fa:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <index.1721>
  fe:	08 c0       	rjmp	.+16     	; 0x110 <__vector_16+0x4c>
	}
	else
	{
		
		index=0;
 100:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <index.1721+0x1>
 104:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <index.1721>
		
		asm("STS 0x0124,R1"); // balancing branches
 108:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <index.1721+0x1>
		asm("STS 0x0124,R1"); // balancing branches
 10c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <index.1721+0x1>
		
	}

	PORTB = frame_buffer[index];
 110:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <index.1721>
 114:	f0 91 24 01 	lds	r31, 0x0124	; 0x800124 <index.1721+0x1>
 118:	e7 5d       	subi	r30, 0xD7	; 215
 11a:	fe 4f       	sbci	r31, 0xFE	; 254
 11c:	80 81       	ld	r24, Z
 11e:	85 b9       	out	0x05, r24	; 5

}
 120:	ff 91       	pop	r31
 122:	ef 91       	pop	r30
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	3f 91       	pop	r19
 12a:	2f 91       	pop	r18
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <change_size>:




void change_size()
{
 136:	8f 92       	push	r8
 138:	9f 92       	push	r9
 13a:	af 92       	push	r10
 13c:	bf 92       	push	r11
 13e:	cf 92       	push	r12
 140:	df 92       	push	r13
 142:	ef 92       	push	r14
 144:	ff 92       	push	r15
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
	static uint8_t timer_index = 0;
	arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set)-1;
 14c:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <frequency>
 150:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <frequency+0x1>
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 34 05 	call	0xa68	; 0xa68 <__floatunsisf>
 15c:	9b 01       	movw	r18, r22
 15e:	ac 01       	movw	r20, r24
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	80 e8       	ldi	r24, 0x80	; 128
 166:	9f e3       	ldi	r25, 0x3F	; 63
 168:	0e 94 93 04 	call	0x926	; 0x926 <__divsf3>
 16c:	6b 01       	movw	r12, r22
 16e:	7c 01       	movw	r14, r24
 170:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <tim_set>
 174:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <tim_set+0x1>
 178:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <tim_set+0x2>
 17c:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <tim_set+0x3>
 180:	0e 94 93 04 	call	0x926	; 0x926 <__divsf3>
 184:	0e 94 05 05 	call	0xa0a	; 0xa0a <__fixunssfsi>
 188:	61 50       	subi	r22, 0x01	; 1
 18a:	71 09       	sbc	r23, r1
 18c:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <arr_size+0x1>
 190:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <arr_size>

	while (arr_size > 1000 && timer_index < 3)
 194:	69 3e       	cpi	r22, 0xE9	; 233
 196:	73 40       	sbci	r23, 0x03	; 3
 198:	78 f1       	brcs	.+94     	; 0x1f8 <change_size+0xc2>
 19a:	c0 91 1e 01 	lds	r28, 0x011E	; 0x80011e <__data_end>
 19e:	c3 30       	cpi	r28, 0x03	; 3
 1a0:	58 f5       	brcc	.+86     	; 0x1f8 <change_size+0xc2>
 1a2:	cf 5f       	subi	r28, 0xFF	; 255
 1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <change_size+0x72>
 1a6:	c8 2f       	mov	r28, r24
	{
		tim_set = timer_values[++timer_index];
 1a8:	ec 2f       	mov	r30, r28
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	ee 0f       	add	r30, r30
 1ae:	ff 1f       	adc	r31, r31
 1b0:	ee 0f       	add	r30, r30
 1b2:	ff 1f       	adc	r31, r31
 1b4:	ee 5e       	subi	r30, 0xEE	; 238
 1b6:	fe 4f       	sbci	r31, 0xFE	; 254
 1b8:	80 80       	ld	r8, Z
 1ba:	91 80       	ldd	r9, Z+1	; 0x01
 1bc:	a2 80       	ldd	r10, Z+2	; 0x02
 1be:	b3 80       	ldd	r11, Z+3	; 0x03
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set)-1;
 1c0:	a5 01       	movw	r20, r10
 1c2:	94 01       	movw	r18, r8
 1c4:	c7 01       	movw	r24, r14
 1c6:	b6 01       	movw	r22, r12
 1c8:	0e 94 93 04 	call	0x926	; 0x926 <__divsf3>
 1cc:	0e 94 05 05 	call	0xa0a	; 0xa0a <__fixunssfsi>
 1d0:	61 50       	subi	r22, 0x01	; 1
 1d2:	71 09       	sbc	r23, r1
void change_size()
{
	static uint8_t timer_index = 0;
	arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set)-1;

	while (arr_size > 1000 && timer_index < 3)
 1d4:	69 3e       	cpi	r22, 0xE9	; 233
 1d6:	83 e0       	ldi	r24, 0x03	; 3
 1d8:	78 07       	cpc	r23, r24
 1da:	18 f5       	brcc	.+70     	; 0x222 <change_size+0xec>
 1dc:	c0 93 1e 01 	sts	0x011E, r28	; 0x80011e <__data_end>
 1e0:	80 92 01 01 	sts	0x0101, r8	; 0x800101 <tim_set>
 1e4:	90 92 02 01 	sts	0x0102, r9	; 0x800102 <tim_set+0x1>
 1e8:	a0 92 03 01 	sts	0x0103, r10	; 0x800103 <tim_set+0x2>
 1ec:	b0 92 04 01 	sts	0x0104, r11	; 0x800104 <tim_set+0x3>
 1f0:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <arr_size+0x1>
 1f4:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <arr_size>
		tim_set = timer_values[++timer_index];
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set)-1;

	}

	while (arr_size < 255 & timer_index>0)
 1f8:	c0 91 1e 01 	lds	r28, 0x011E	; 0x80011e <__data_end>
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <arr_size>
 202:	30 91 26 01 	lds	r19, 0x0126	; 0x800126 <arr_size+0x1>
 206:	2f 3f       	cpi	r18, 0xFF	; 255
 208:	31 05       	cpc	r19, r1
 20a:	08 f0       	brcs	.+2      	; 0x20e <change_size+0xd8>
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	88 23       	and	r24, r24
 210:	09 f4       	brne	.+2      	; 0x214 <change_size+0xde>
 212:	53 c0       	rjmp	.+166    	; 0x2ba <change_size+0x184>
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	c1 11       	cpse	r28, r1
 218:	01 c0       	rjmp	.+2      	; 0x21c <change_size+0xe6>
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	81 11       	cpse	r24, r1
 21e:	15 c0       	rjmp	.+42     	; 0x24a <change_size+0x114>
 220:	4c c0       	rjmp	.+152    	; 0x2ba <change_size+0x184>
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	8c 0f       	add	r24, r28
void change_size()
{
	static uint8_t timer_index = 0;
	arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set)-1;

	while (arr_size > 1000 && timer_index < 3)
 226:	84 30       	cpi	r24, 0x04	; 4
 228:	09 f0       	breq	.+2      	; 0x22c <change_size+0xf6>
 22a:	bd cf       	rjmp	.-134    	; 0x1a6 <change_size+0x70>
 22c:	c0 93 1e 01 	sts	0x011E, r28	; 0x80011e <__data_end>
 230:	80 92 01 01 	sts	0x0101, r8	; 0x800101 <tim_set>
 234:	90 92 02 01 	sts	0x0102, r9	; 0x800102 <tim_set+0x1>
 238:	a0 92 03 01 	sts	0x0103, r10	; 0x800103 <tim_set+0x2>
 23c:	b0 92 04 01 	sts	0x0104, r11	; 0x800104 <tim_set+0x3>
 240:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <arr_size+0x1>
 244:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <arr_size>
 248:	d7 cf       	rjmp	.-82     	; 0x1f8 <change_size+0xc2>
 24a:	c1 50       	subi	r28, 0x01	; 1
		tim_set = timer_values[++timer_index];
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set)-1;

	}

	while (arr_size < 255 & timer_index>0)
 24c:	d1 e0       	ldi	r29, 0x01	; 1
 24e:	10 e0       	ldi	r17, 0x00	; 0
 250:	01 c0       	rjmp	.+2      	; 0x254 <change_size+0x11e>
 252:	c9 2f       	mov	r28, r25
	{
		tim_set = timer_values[--timer_index];
 254:	ec 2f       	mov	r30, r28
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	ee 0f       	add	r30, r30
 25a:	ff 1f       	adc	r31, r31
 25c:	ee 0f       	add	r30, r30
 25e:	ff 1f       	adc	r31, r31
 260:	ee 5e       	subi	r30, 0xEE	; 238
 262:	fe 4f       	sbci	r31, 0xFE	; 254
 264:	80 80       	ld	r8, Z
 266:	91 80       	ldd	r9, Z+1	; 0x01
 268:	a2 80       	ldd	r10, Z+2	; 0x02
 26a:	b3 80       	ldd	r11, Z+3	; 0x03
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set)-1;
 26c:	a5 01       	movw	r20, r10
 26e:	94 01       	movw	r18, r8
 270:	c7 01       	movw	r24, r14
 272:	b6 01       	movw	r22, r12
 274:	0e 94 93 04 	call	0x926	; 0x926 <__divsf3>
 278:	0e 94 05 05 	call	0xa0a	; 0xa0a <__fixunssfsi>
 27c:	61 50       	subi	r22, 0x01	; 1
 27e:	71 09       	sbc	r23, r1
 280:	9f ef       	ldi	r25, 0xFF	; 255
 282:	9c 0f       	add	r25, r28
		tim_set = timer_values[++timer_index];
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set)-1;

	}

	while (arr_size < 255 & timer_index>0)
 284:	8d 2f       	mov	r24, r29
 286:	6f 3f       	cpi	r22, 0xFF	; 255
 288:	71 05       	cpc	r23, r1
 28a:	08 f0       	brcs	.+2      	; 0x28e <change_size+0x158>
 28c:	81 2f       	mov	r24, r17
 28e:	88 23       	and	r24, r24
 290:	31 f0       	breq	.+12     	; 0x29e <change_size+0x168>
 292:	8d 2f       	mov	r24, r29
 294:	c1 11       	cpse	r28, r1
 296:	01 c0       	rjmp	.+2      	; 0x29a <change_size+0x164>
 298:	81 2f       	mov	r24, r17
 29a:	81 11       	cpse	r24, r1
 29c:	da cf       	rjmp	.-76     	; 0x252 <change_size+0x11c>
 29e:	c0 93 1e 01 	sts	0x011E, r28	; 0x80011e <__data_end>
 2a2:	80 92 01 01 	sts	0x0101, r8	; 0x800101 <tim_set>
 2a6:	90 92 02 01 	sts	0x0102, r9	; 0x800102 <tim_set+0x1>
 2aa:	a0 92 03 01 	sts	0x0103, r10	; 0x800103 <tim_set+0x2>
 2ae:	b0 92 04 01 	sts	0x0104, r11	; 0x800104 <tim_set+0x3>
 2b2:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <arr_size+0x1>
 2b6:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <arr_size>
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set)-1;


	}

	switch (timer_index)
 2ba:	c1 30       	cpi	r28, 0x01	; 1
 2bc:	59 f0       	breq	.+22     	; 0x2d4 <change_size+0x19e>
 2be:	18 f0       	brcs	.+6      	; 0x2c6 <change_size+0x190>
 2c0:	c2 30       	cpi	r28, 0x02	; 2
 2c2:	79 f0       	breq	.+30     	; 0x2e2 <change_size+0x1ac>
 2c4:	14 c0       	rjmp	.+40     	; 0x2ee <change_size+0x1b8>
	{
		case 0:
		TIM0_overflow_16u();
 2c6:	85 b5       	in	r24, 0x25	; 37
 2c8:	89 7f       	andi	r24, 0xF9	; 249
 2ca:	85 bd       	out	0x25, r24	; 37
 2cc:	85 b5       	in	r24, 0x25	; 37
 2ce:	81 60       	ori	r24, 0x01	; 1
 2d0:	85 bd       	out	0x25, r24	; 37
		break;
 2d2:	0d c0       	rjmp	.+26     	; 0x2ee <change_size+0x1b8>

		case 1:
		TIM0_overflow_128u();
 2d4:	85 b5       	in	r24, 0x25	; 37
 2d6:	8a 7f       	andi	r24, 0xFA	; 250
 2d8:	85 bd       	out	0x25, r24	; 37
 2da:	85 b5       	in	r24, 0x25	; 37
 2dc:	82 60       	ori	r24, 0x02	; 2
 2de:	85 bd       	out	0x25, r24	; 37
		break;
 2e0:	06 c0       	rjmp	.+12     	; 0x2ee <change_size+0x1b8>
		case 2:
		TIM0_overflow_1m();
 2e2:	85 b5       	in	r24, 0x25	; 37
 2e4:	8b 7f       	andi	r24, 0xFB	; 251
 2e6:	85 bd       	out	0x25, r24	; 37
 2e8:	85 b5       	in	r24, 0x25	; 37
 2ea:	83 60       	ori	r24, 0x03	; 3
 2ec:	85 bd       	out	0x25, r24	; 37
		break;
	}


 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	ff 90       	pop	r15
 2f6:	ef 90       	pop	r14
 2f8:	df 90       	pop	r13
 2fa:	cf 90       	pop	r12
 2fc:	bf 90       	pop	r11
 2fe:	af 90       	pop	r10
 300:	9f 90       	pop	r9
 302:	8f 90       	pop	r8
 304:	08 95       	ret

00000306 <main>:
const uint8_t type_map[]={9,6,3,10,8,5,2,10,7,4,1};

int main(void)
{

	change_size();
 306:	0e 94 9b 00 	call	0x136	; 0x136 <change_size>



	DDRB = 0xFF;
 30a:	8f ef       	ldi	r24, 0xFF	; 255
 30c:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x07;
 30e:	87 e0       	ldi	r24, 0x07	; 7
 310:	87 b9       	out	0x07, r24	; 7

	generate_signal(&frame_buffer, 1, frequency, tim_set); // init frame buffer with sine wave of frequency 1
 312:	00 91 01 01 	lds	r16, 0x0101	; 0x800101 <tim_set>
 316:	10 91 02 01 	lds	r17, 0x0102	; 0x800102 <tim_set+0x1>
 31a:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <tim_set+0x2>
 31e:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <tim_set+0x3>
 322:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <frequency>
 326:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <frequency+0x1>
 32a:	61 e0       	ldi	r22, 0x01	; 1
 32c:	89 e2       	ldi	r24, 0x29	; 41
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	0e 94 cf 02 	call	0x59e	; 0x59e <generate_signal>



	TIM0_overflow_16u();
 334:	85 b5       	in	r24, 0x25	; 37
 336:	89 7f       	andi	r24, 0xF9	; 249
 338:	85 bd       	out	0x25, r24	; 37
 33a:	85 b5       	in	r24, 0x25	; 37
 33c:	81 60       	ori	r24, 0x01	; 1
 33e:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 340:	ee e6       	ldi	r30, 0x6E	; 110
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	81 60       	ori	r24, 0x01	; 1
 348:	80 83       	st	Z, r24

	TIM2_overflow_1m();
 34a:	e1 eb       	ldi	r30, 0xB1	; 177
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	8c 7f       	andi	r24, 0xFC	; 252
 352:	80 83       	st	Z, r24
 354:	80 81       	ld	r24, Z
 356:	84 60       	ori	r24, 0x04	; 4
 358:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 35a:	e0 e7       	ldi	r30, 0x70	; 112
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	81 60       	ori	r24, 0x01	; 1
 362:	80 83       	st	Z, r24


	sei();								// Enable interrupt
 364:	78 94       	sei
 366:	ff cf       	rjmp	.-2      	; 0x366 <main+0x60>

00000368 <decode_button>:

}


void decode_button(void)
{
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
	uint8_t temp = 0;
	static uint8_t type = 11;
	if (butt > 0)
 36c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <butt>
 370:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <butt+0x1>
 374:	00 97       	sbiw	r24, 0x00	; 0
 376:	09 f4       	brne	.+2      	; 0x37a <decode_button+0x12>
 378:	64 c0       	rjmp	.+200    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	{

		while ((butt & 0x0001) == 0)
 37a:	80 fd       	sbrc	r24, 0
 37c:	59 c0       	rjmp	.+178    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 37e:	20 e0       	ldi	r18, 0x00	; 0
		{
			temp++;
 380:	2f 5f       	subi	r18, 0xFF	; 255
			butt = butt >> 1;
 382:	96 95       	lsr	r25
 384:	87 95       	ror	r24
	uint8_t temp = 0;
	static uint8_t type = 11;
	if (butt > 0)
	{

		while ((butt & 0x0001) == 0)
 386:	80 ff       	sbrs	r24, 0
 388:	fb cf       	rjmp	.-10     	; 0x380 <decode_button+0x18>
 38a:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <butt+0x1>
 38e:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <butt>
		{
			temp++;
			butt = butt >> 1;
		}

		if (temp == 0 | temp == 8)
 392:	41 e0       	ldi	r20, 0x01	; 1
 394:	21 11       	cpse	r18, r1
 396:	40 e0       	ldi	r20, 0x00	; 0
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	28 30       	cpi	r18, 0x08	; 8
 39c:	09 f0       	breq	.+2      	; 0x3a0 <decode_button+0x38>
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	92 2f       	mov	r25, r18
 3a2:	97 7f       	andi	r25, 0xF7	; 247
 3a4:	51 f5       	brne	.+84     	; 0x3fa <decode_button+0x92>
		{
			if (temp == 0 & frequency < 2000)
 3a6:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <frequency>
 3aa:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <frequency+0x1>
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	20 3d       	cpi	r18, 0xD0	; 208
 3b2:	57 e0       	ldi	r21, 0x07	; 7
 3b4:	35 07       	cpc	r19, r21
 3b6:	08 f0       	brcs	.+2      	; 0x3ba <decode_button+0x52>
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	99 23       	and	r25, r25
 3bc:	51 f0       	breq	.+20     	; 0x3d2 <decode_button+0x6a>
 3be:	41 11       	cpse	r20, r1
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <decode_button+0x5e>
 3c2:	07 c0       	rjmp	.+14     	; 0x3d2 <decode_button+0x6a>
		{
			temp++;
			butt = butt >> 1;
		}

		if (temp == 0 | temp == 8)
 3c4:	80 e0       	ldi	r24, 0x00	; 0
		{
			if (temp == 0 & frequency < 2000)
			{
				frequency++;
 3c6:	2f 5f       	subi	r18, 0xFF	; 255
 3c8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ca:	30 93 06 01 	sts	0x0106, r19	; 0x800106 <frequency+0x1>
 3ce:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <frequency>
			}

			if (temp == 8 & frequency > 100)
 3d2:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <frequency>
 3d6:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <frequency+0x1>
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	25 36       	cpi	r18, 0x65	; 101
 3de:	31 05       	cpc	r19, r1
 3e0:	08 f4       	brcc	.+2      	; 0x3e4 <decode_button+0x7c>
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	99 23       	and	r25, r25
 3e6:	59 f0       	breq	.+22     	; 0x3fe <decode_button+0x96>
 3e8:	88 23       	and	r24, r24
 3ea:	49 f0       	breq	.+18     	; 0x3fe <decode_button+0x96>
			{
				frequency--;
 3ec:	21 50       	subi	r18, 0x01	; 1
 3ee:	31 09       	sbc	r19, r1
 3f0:	30 93 06 01 	sts	0x0106, r19	; 0x800106 <frequency+0x1>
 3f4:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <frequency>
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <decode_button+0x96>
			}
		}
		else
		{
			type = temp;
 3fa:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
		}
		
		
		change_size();
 3fe:	0e 94 9b 00 	call	0x136	; 0x136 <change_size>
		generate_signal(&frame_buffer, type_map[type-1], frequency, tim_set); // set frame buffer
 402:	00 91 01 01 	lds	r16, 0x0101	; 0x800101 <tim_set>
 406:	10 91 02 01 	lds	r17, 0x0102	; 0x800102 <tim_set+0x1>
 40a:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <tim_set+0x2>
 40e:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <tim_set+0x3>
 412:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <frequency>
 416:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <frequency+0x1>
 41a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	ea 5f       	subi	r30, 0xFA	; 250
 422:	fe 4f       	sbci	r31, 0xFE	; 254
 424:	60 81       	ld	r22, Z
 426:	89 e2       	ldi	r24, 0x29	; 41
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	0e 94 cf 02 	call	0x59e	; 0x59e <generate_signal>
		

	}

}
 42e:	09 c0       	rjmp	.+18     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			butt = butt >> 1;
		}

		if (temp == 0 | temp == 8)
		{
			if (temp == 0 & frequency < 2000)
 430:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <frequency>
 434:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <frequency+0x1>
 438:	20 3d       	cpi	r18, 0xD0	; 208
 43a:	87 e0       	ldi	r24, 0x07	; 7
 43c:	38 07       	cpc	r19, r24
 43e:	10 f2       	brcs	.-124    	; 0x3c4 <decode_button+0x5c>
 440:	de cf       	rjmp	.-68     	; 0x3fe <decode_button+0x96>
		generate_signal(&frame_buffer, type_map[type-1], frequency, tim_set); // set frame buffer
		

	}

}
 442:	1f 91       	pop	r17
 444:	0f 91       	pop	r16
 446:	08 95       	ret

00000448 <__vector_9>:
	PORTB = frame_buffer[index];

}

ISR(TIMER2_OVF_vect)
{
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	11 24       	eor	r1, r1
 452:	2f 93       	push	r18
 454:	3f 93       	push	r19
 456:	4f 93       	push	r20
 458:	5f 93       	push	r21
 45a:	6f 93       	push	r22
 45c:	7f 93       	push	r23
 45e:	8f 93       	push	r24
 460:	9f 93       	push	r25
 462:	af 93       	push	r26
 464:	bf 93       	push	r27
 466:	ef 93       	push	r30
 468:	ff 93       	push	r31
	static uint8_t ind = 0;						// indexing variable in columns
	uint16_t temp = 0;							// temporary variable for extracting button pressed
	static uint16_t debounce_reg = 0;			// debouncing register (stores value and outputs after desired period)

	static uint8_t ovf = 0;
	uint16_t  debounce_temp = debounce_reg;		// temporary debouncer to check if values have changed
 46a:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <debounce_reg.1729>
 46e:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <debounce_reg.1729+0x1>

	ind++;
 472:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <ind.1727>
 476:	8f 5f       	subi	r24, 0xFF	; 255
 478:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <ind.1727>

	if (ind < 3)								// sweep through columns
 47c:	83 30       	cpi	r24, 0x03	; 3
 47e:	80 f4       	brcc	.+32     	; 0x4a0 <__vector_9+0x58>
	{

		PORTC &= 0xF8;
 480:	88 b1       	in	r24, 0x08	; 8
 482:	88 7f       	andi	r24, 0xF8	; 248
 484:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << ind);
 486:	48 b1       	in	r20, 0x08	; 8
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	00 90 20 01 	lds	r0, 0x0120	; 0x800120 <ind.1727>
 490:	02 c0       	rjmp	.+4      	; 0x496 <__vector_9+0x4e>
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	0a 94       	dec	r0
 498:	e2 f7       	brpl	.-8      	; 0x492 <__vector_9+0x4a>
 49a:	84 2b       	or	r24, r20
 49c:	88 b9       	out	0x08, r24	; 8
 49e:	11 c0       	rjmp	.+34     	; 0x4c2 <__vector_9+0x7a>

	}
	else
	{

		ind = 0;
 4a0:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <ind.1727>
		PORTC &= 0xF8;
 4a4:	88 b1       	in	r24, 0x08	; 8
 4a6:	88 7f       	andi	r24, 0xF8	; 248
 4a8:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << ind);
 4aa:	48 b1       	in	r20, 0x08	; 8
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	00 90 20 01 	lds	r0, 0x0120	; 0x800120 <ind.1727>
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <__vector_9+0x72>
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	0a 94       	dec	r0
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <__vector_9+0x6e>
 4be:	84 2b       	or	r24, r20
 4c0:	88 b9       	out	0x08, r24	; 8
	}

	switch (ind)								// extract button pressed and update debounce register
 4c2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <ind.1727>
 4c6:	81 30       	cpi	r24, 0x01	; 1
 4c8:	c9 f0       	breq	.+50     	; 0x4fc <__vector_9+0xb4>
 4ca:	18 f0       	brcs	.+6      	; 0x4d2 <__vector_9+0x8a>
 4cc:	82 30       	cpi	r24, 0x02	; 2
 4ce:	39 f1       	breq	.+78     	; 0x51e <__vector_9+0xd6>
 4d0:	37 c0       	rjmp	.+110    	; 0x540 <__vector_9+0xf8>
	{
		case 0:
		temp = PINC & 0b01111000;
 4d2:	86 b1       	in	r24, 0x06	; 6
 4d4:	88 77       	andi	r24, 0x78	; 120
 4d6:	90 e0       	ldi	r25, 0x00	; 0
		temp = temp >> 3;
		debounce_reg &= 0xFFF0;
		debounce_reg |= temp;
 4d8:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <debounce_reg.1729>
 4dc:	50 91 22 01 	lds	r21, 0x0122	; 0x800122 <debounce_reg.1729+0x1>
 4e0:	40 7f       	andi	r20, 0xF0	; 240
 4e2:	96 95       	lsr	r25
 4e4:	87 95       	ror	r24
 4e6:	96 95       	lsr	r25
 4e8:	87 95       	ror	r24
 4ea:	96 95       	lsr	r25
 4ec:	87 95       	ror	r24
 4ee:	84 2b       	or	r24, r20
 4f0:	95 2b       	or	r25, r21
 4f2:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <debounce_reg.1729+0x1>
 4f6:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <debounce_reg.1729>
		break;
 4fa:	22 c0       	rjmp	.+68     	; 0x540 <__vector_9+0xf8>

		case 1:
		temp = PINC & 0b01111000;
 4fc:	86 b1       	in	r24, 0x06	; 6
 4fe:	88 77       	andi	r24, 0x78	; 120
 500:	90 e0       	ldi	r25, 0x00	; 0
		temp = temp << 1;
		debounce_reg &= 0xFF0F;
		debounce_reg |= temp;
 502:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <debounce_reg.1729>
 506:	50 91 22 01 	lds	r21, 0x0122	; 0x800122 <debounce_reg.1729+0x1>
 50a:	4f 70       	andi	r20, 0x0F	; 15
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	84 2b       	or	r24, r20
 512:	95 2b       	or	r25, r21
 514:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <debounce_reg.1729+0x1>
 518:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <debounce_reg.1729>
		break;
 51c:	11 c0       	rjmp	.+34     	; 0x540 <__vector_9+0xf8>

		case 2:
		temp = PINC & 0b01111000;
 51e:	46 b1       	in	r20, 0x06	; 6
 520:	48 77       	andi	r20, 0x78	; 120
		temp = temp << 5;
		debounce_reg &= 0xF0FF;
		debounce_reg |= temp;
 522:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <debounce_reg.1729>
 526:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <debounce_reg.1729+0x1>
 52a:	90 7f       	andi	r25, 0xF0	; 240
 52c:	60 e2       	ldi	r22, 0x20	; 32
 52e:	46 9f       	mul	r20, r22
 530:	a0 01       	movw	r20, r0
 532:	11 24       	eor	r1, r1
 534:	84 2b       	or	r24, r20
 536:	95 2b       	or	r25, r21
 538:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <debounce_reg.1729+0x1>
 53c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <debounce_reg.1729>
		break;


	}

	ovf++;
 540:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <ovf.1730>
 544:	8f 5f       	subi	r24, 0xFF	; 255
 546:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <ovf.1730>

	if (ovf > 10 & debounce_reg == debounce_temp) // output debounced values if time has come and button values are stable
 54a:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <debounce_reg.1729>
 54e:	50 91 22 01 	lds	r21, 0x0122	; 0x800122 <debounce_reg.1729+0x1>
 552:	91 e0       	ldi	r25, 0x01	; 1
 554:	8b 30       	cpi	r24, 0x0B	; 11
 556:	08 f4       	brcc	.+2      	; 0x55a <__vector_9+0x112>
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	99 23       	and	r25, r25
 55c:	79 f0       	breq	.+30     	; 0x57c <__vector_9+0x134>
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	24 17       	cp	r18, r20
 562:	35 07       	cpc	r19, r21
 564:	09 f0       	breq	.+2      	; 0x568 <__vector_9+0x120>
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	88 23       	and	r24, r24
 56a:	41 f0       	breq	.+16     	; 0x57c <__vector_9+0x134>
	{
		butt = debounce_reg;
 56c:	50 93 28 01 	sts	0x0128, r21	; 0x800128 <butt+0x1>
 570:	40 93 27 01 	sts	0x0127, r20	; 0x800127 <butt>
		ovf = 0;
 574:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <ovf.1730>
		decode_button();
 578:	0e 94 b4 01 	call	0x368	; 0x368 <decode_button>
	}




}
 57c:	ff 91       	pop	r31
 57e:	ef 91       	pop	r30
 580:	bf 91       	pop	r27
 582:	af 91       	pop	r26
 584:	9f 91       	pop	r25
 586:	8f 91       	pop	r24
 588:	7f 91       	pop	r23
 58a:	6f 91       	pop	r22
 58c:	5f 91       	pop	r21
 58e:	4f 91       	pop	r20
 590:	3f 91       	pop	r19
 592:	2f 91       	pop	r18
 594:	0f 90       	pop	r0
 596:	0f be       	out	0x3f, r0	; 63
 598:	0f 90       	pop	r0
 59a:	1f 90       	pop	r1
 59c:	18 95       	reti

0000059e <generate_signal>:
 */ 
#include <avr/io.h>			// include IO operation setting
#include <math.h>			// Include math library for signal generation

void generate_signal(uint8_t *frame_buffer, uint8_t type, uint16_t freq,float tim_set)
{
 59e:	4f 92       	push	r4
 5a0:	5f 92       	push	r5
 5a2:	6f 92       	push	r6
 5a4:	7f 92       	push	r7
 5a6:	8f 92       	push	r8
 5a8:	9f 92       	push	r9
 5aa:	af 92       	push	r10
 5ac:	bf 92       	push	r11
 5ae:	cf 92       	push	r12
 5b0:	df 92       	push	r13
 5b2:	ef 92       	push	r14
 5b4:	ff 92       	push	r15
 5b6:	0f 93       	push	r16
 5b8:	1f 93       	push	r17
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	ec 01       	movw	r28, r24
 5c0:	f6 2e       	mov	r15, r22
 5c2:	48 01       	movw	r8, r16
 5c4:	59 01       	movw	r10, r18
	
	
	
	
	
	uint16_t arr_length= (uint16_t)(((1/(float)freq))/tim_set)-1;	
 5c6:	ba 01       	movw	r22, r20
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0e 94 34 05 	call	0xa68	; 0xa68 <__floatunsisf>
 5d0:	9b 01       	movw	r18, r22
 5d2:	ac 01       	movw	r20, r24
 5d4:	60 e0       	ldi	r22, 0x00	; 0
 5d6:	70 e0       	ldi	r23, 0x00	; 0
 5d8:	80 e8       	ldi	r24, 0x80	; 128
 5da:	9f e3       	ldi	r25, 0x3F	; 63
 5dc:	0e 94 93 04 	call	0x926	; 0x926 <__divsf3>
 5e0:	a5 01       	movw	r20, r10
 5e2:	94 01       	movw	r18, r8
 5e4:	0e 94 93 04 	call	0x926	; 0x926 <__divsf3>
 5e8:	0e 94 05 05 	call	0xa0a	; 0xa0a <__fixunssfsi>
 5ec:	8b 01       	movw	r16, r22
 5ee:	01 50       	subi	r16, 0x01	; 1
 5f0:	11 09       	sbc	r17, r1
	
	
	 
	
	switch (type)
 5f2:	83 e0       	ldi	r24, 0x03	; 3
 5f4:	f8 16       	cp	r15, r24
 5f6:	c9 f0       	breq	.+50     	; 0x62a <generate_signal+0x8c>
 5f8:	8f 15       	cp	r24, r15
 5fa:	38 f0       	brcs	.+14     	; 0x60a <generate_signal+0x6c>
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	f8 16       	cp	r15, r24
 600:	e9 f0       	breq	.+58     	; 0x63c <generate_signal+0x9e>
 602:	82 e0       	ldi	r24, 0x02	; 2
 604:	f8 16       	cp	r15, r24
 606:	b1 f0       	breq	.+44     	; 0x634 <generate_signal+0x96>
 608:	0b c1       	rjmp	.+534    	; 0x820 <generate_signal+0x282>
 60a:	84 e0       	ldi	r24, 0x04	; 4
 60c:	f8 16       	cp	r15, r24
 60e:	41 f0       	breq	.+16     	; 0x620 <generate_signal+0x82>
 610:	85 e0       	ldi	r24, 0x05	; 5
 612:	f8 12       	cpse	r15, r24
 614:	05 c1       	rjmp	.+522    	; 0x820 <generate_signal+0x282>
			frame_buffer++;
		}
		break;
		
		case 5: // triangle
		for(uint16_t i=0; i<arr_length;i++)
 616:	01 15       	cp	r16, r1
 618:	11 05       	cpc	r17, r1
 61a:	09 f0       	breq	.+2      	; 0x61e <generate_signal+0x80>
 61c:	b1 c0       	rjmp	.+354    	; 0x780 <generate_signal+0x1e2>
 61e:	00 c1       	rjmp	.+512    	; 0x820 <generate_signal+0x282>
			frame_buffer++;
		}
		break;
		
		case 4: // Square wave
		for(uint16_t i=0; i<arr_length;i++)
 620:	01 15       	cp	r16, r1
 622:	11 05       	cpc	r17, r1
 624:	09 f0       	breq	.+2      	; 0x628 <generate_signal+0x8a>
 626:	9a c0       	rjmp	.+308    	; 0x75c <generate_signal+0x1be>
 628:	fb c0       	rjmp	.+502    	; 0x820 <generate_signal+0x282>
			frame_buffer++;
		}
		break;
		
		case 3: // negative ramp
		for(uint16_t i=0; i<arr_length;i++)
 62a:	01 15       	cp	r16, r1
 62c:	11 05       	cpc	r17, r1
 62e:	09 f0       	breq	.+2      	; 0x632 <generate_signal+0x94>
 630:	67 c0       	rjmp	.+206    	; 0x700 <generate_signal+0x162>
 632:	f6 c0       	rjmp	.+492    	; 0x820 <generate_signal+0x282>
		}
		break;
		
		
		case 2: // positive ramp
		for(uint16_t i=0; i<arr_length;i++)
 634:	01 15       	cp	r16, r1
 636:	11 05       	cpc	r17, r1
 638:	e9 f5       	brne	.+122    	; 0x6b4 <generate_signal+0x116>
 63a:	f2 c0       	rjmp	.+484    	; 0x820 <generate_signal+0x282>
	 
	
	switch (type)
	{
		case 1: // sin function
		for(uint16_t i=0; i<arr_length;i++)
 63c:	01 15       	cp	r16, r1
 63e:	11 05       	cpc	r17, r1
 640:	09 f4       	brne	.+2      	; 0x644 <generate_signal+0xa6>
 642:	ee c0       	rjmp	.+476    	; 0x820 <generate_signal+0x282>
 644:	e1 2c       	mov	r14, r1
 646:	f1 2c       	mov	r15, r1
		{
			
			*frame_buffer=(uint8_t)(127.5*cos((float)(i)*2*M_PI/(float)arr_length)+127.5);
 648:	48 01       	movw	r8, r16
 64a:	a1 2c       	mov	r10, r1
 64c:	b1 2c       	mov	r11, r1
 64e:	b7 01       	movw	r22, r14
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0e 94 34 05 	call	0xa68	; 0xa68 <__floatunsisf>
 658:	9b 01       	movw	r18, r22
 65a:	ac 01       	movw	r20, r24
 65c:	0e 94 22 04 	call	0x844	; 0x844 <__addsf3>
 660:	2b ed       	ldi	r18, 0xDB	; 219
 662:	3f e0       	ldi	r19, 0x0F	; 15
 664:	49 e4       	ldi	r20, 0x49	; 73
 666:	50 e4       	ldi	r21, 0x40	; 64
 668:	0e 94 01 06 	call	0xc02	; 0xc02 <__mulsf3>
 66c:	2b 01       	movw	r4, r22
 66e:	3c 01       	movw	r6, r24
 670:	c5 01       	movw	r24, r10
 672:	b4 01       	movw	r22, r8
 674:	0e 94 34 05 	call	0xa68	; 0xa68 <__floatunsisf>
 678:	9b 01       	movw	r18, r22
 67a:	ac 01       	movw	r20, r24
 67c:	c3 01       	movw	r24, r6
 67e:	b2 01       	movw	r22, r4
 680:	0e 94 93 04 	call	0x926	; 0x926 <__divsf3>
 684:	0e 94 8e 04 	call	0x91c	; 0x91c <cos>
 688:	20 e0       	ldi	r18, 0x00	; 0
 68a:	30 e0       	ldi	r19, 0x00	; 0
 68c:	4f ef       	ldi	r20, 0xFF	; 255
 68e:	52 e4       	ldi	r21, 0x42	; 66
 690:	0e 94 01 06 	call	0xc02	; 0xc02 <__mulsf3>
 694:	20 e0       	ldi	r18, 0x00	; 0
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	4f ef       	ldi	r20, 0xFF	; 255
 69a:	52 e4       	ldi	r21, 0x42	; 66
 69c:	0e 94 22 04 	call	0x844	; 0x844 <__addsf3>
 6a0:	0e 94 05 05 	call	0xa0a	; 0xa0a <__fixunssfsi>
 6a4:	69 93       	st	Y+, r22
	 
	
	switch (type)
	{
		case 1: // sin function
		for(uint16_t i=0; i<arr_length;i++)
 6a6:	8f ef       	ldi	r24, 0xFF	; 255
 6a8:	e8 1a       	sub	r14, r24
 6aa:	f8 0a       	sbc	r15, r24
 6ac:	e0 16       	cp	r14, r16
 6ae:	f1 06       	cpc	r15, r17
 6b0:	70 f2       	brcs	.-100    	; 0x64e <generate_signal+0xb0>
 6b2:	b6 c0       	rjmp	.+364    	; 0x820 <generate_signal+0x282>
		}
		break;
		
		
		case 2: // positive ramp
		for(uint16_t i=0; i<arr_length;i++)
 6b4:	e1 2c       	mov	r14, r1
 6b6:	f1 2c       	mov	r15, r1
		{
			
			*frame_buffer=(uint8_t)((float)i/arr_length*255);
 6b8:	48 01       	movw	r8, r16
 6ba:	a1 2c       	mov	r10, r1
 6bc:	b1 2c       	mov	r11, r1
 6be:	b7 01       	movw	r22, r14
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	0e 94 34 05 	call	0xa68	; 0xa68 <__floatunsisf>
 6c8:	2b 01       	movw	r4, r22
 6ca:	3c 01       	movw	r6, r24
 6cc:	c5 01       	movw	r24, r10
 6ce:	b4 01       	movw	r22, r8
 6d0:	0e 94 34 05 	call	0xa68	; 0xa68 <__floatunsisf>
 6d4:	9b 01       	movw	r18, r22
 6d6:	ac 01       	movw	r20, r24
 6d8:	c3 01       	movw	r24, r6
 6da:	b2 01       	movw	r22, r4
 6dc:	0e 94 93 04 	call	0x926	; 0x926 <__divsf3>
 6e0:	20 e0       	ldi	r18, 0x00	; 0
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	4f e7       	ldi	r20, 0x7F	; 127
 6e6:	53 e4       	ldi	r21, 0x43	; 67
 6e8:	0e 94 01 06 	call	0xc02	; 0xc02 <__mulsf3>
 6ec:	0e 94 05 05 	call	0xa0a	; 0xa0a <__fixunssfsi>
 6f0:	69 93       	st	Y+, r22
		}
		break;
		
		
		case 2: // positive ramp
		for(uint16_t i=0; i<arr_length;i++)
 6f2:	8f ef       	ldi	r24, 0xFF	; 255
 6f4:	e8 1a       	sub	r14, r24
 6f6:	f8 0a       	sbc	r15, r24
 6f8:	e0 16       	cp	r14, r16
 6fa:	f1 06       	cpc	r15, r17
 6fc:	00 f3       	brcs	.-64     	; 0x6be <generate_signal+0x120>
 6fe:	90 c0       	rjmp	.+288    	; 0x820 <generate_signal+0x282>
			frame_buffer++;
		}
		break;
		
		case 3: // negative ramp
		for(uint16_t i=0; i<arr_length;i++)
 700:	e1 2c       	mov	r14, r1
 702:	f1 2c       	mov	r15, r1
		{
			
			*frame_buffer=(uint8_t)(255-(float)i/arr_length*255);
 704:	48 01       	movw	r8, r16
 706:	a1 2c       	mov	r10, r1
 708:	b1 2c       	mov	r11, r1
 70a:	b7 01       	movw	r22, r14
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	0e 94 34 05 	call	0xa68	; 0xa68 <__floatunsisf>
 714:	2b 01       	movw	r4, r22
 716:	3c 01       	movw	r6, r24
 718:	c5 01       	movw	r24, r10
 71a:	b4 01       	movw	r22, r8
 71c:	0e 94 34 05 	call	0xa68	; 0xa68 <__floatunsisf>
 720:	9b 01       	movw	r18, r22
 722:	ac 01       	movw	r20, r24
 724:	c3 01       	movw	r24, r6
 726:	b2 01       	movw	r22, r4
 728:	0e 94 93 04 	call	0x926	; 0x926 <__divsf3>
 72c:	20 e0       	ldi	r18, 0x00	; 0
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	4f e7       	ldi	r20, 0x7F	; 127
 732:	53 e4       	ldi	r21, 0x43	; 67
 734:	0e 94 01 06 	call	0xc02	; 0xc02 <__mulsf3>
 738:	9b 01       	movw	r18, r22
 73a:	ac 01       	movw	r20, r24
 73c:	60 e0       	ldi	r22, 0x00	; 0
 73e:	70 e0       	ldi	r23, 0x00	; 0
 740:	8f e7       	ldi	r24, 0x7F	; 127
 742:	93 e4       	ldi	r25, 0x43	; 67
 744:	0e 94 21 04 	call	0x842	; 0x842 <__subsf3>
 748:	0e 94 05 05 	call	0xa0a	; 0xa0a <__fixunssfsi>
 74c:	69 93       	st	Y+, r22
			frame_buffer++;
		}
		break;
		
		case 3: // negative ramp
		for(uint16_t i=0; i<arr_length;i++)
 74e:	8f ef       	ldi	r24, 0xFF	; 255
 750:	e8 1a       	sub	r14, r24
 752:	f8 0a       	sbc	r15, r24
 754:	e0 16       	cp	r14, r16
 756:	f1 06       	cpc	r15, r17
 758:	c0 f2       	brcs	.-80     	; 0x70a <generate_signal+0x16c>
 75a:	62 c0       	rjmp	.+196    	; 0x820 <generate_signal+0x282>
		break;
		
		case 4: // Square wave
		for(uint16_t i=0; i<arr_length;i++)
		{
			if(i<arr_length/2)
 75c:	98 01       	movw	r18, r16
 75e:	36 95       	lsr	r19
 760:	27 95       	ror	r18
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	90 e0       	ldi	r25, 0x00	; 0
			*frame_buffer=0;
			else
			*frame_buffer=255;
 766:	4f ef       	ldi	r20, 0xFF	; 255
		break;
		
		case 4: // Square wave
		for(uint16_t i=0; i<arr_length;i++)
		{
			if(i<arr_length/2)
 768:	82 17       	cp	r24, r18
 76a:	93 07       	cpc	r25, r19
 76c:	10 f4       	brcc	.+4      	; 0x772 <generate_signal+0x1d4>
			*frame_buffer=0;
 76e:	18 82       	st	Y, r1
 770:	01 c0       	rjmp	.+2      	; 0x774 <generate_signal+0x1d6>
			else
			*frame_buffer=255;
 772:	48 83       	st	Y, r20
			
			frame_buffer++;
 774:	21 96       	adiw	r28, 0x01	; 1
			frame_buffer++;
		}
		break;
		
		case 4: // Square wave
		for(uint16_t i=0; i<arr_length;i++)
 776:	01 96       	adiw	r24, 0x01	; 1
 778:	80 17       	cp	r24, r16
 77a:	91 07       	cpc	r25, r17
 77c:	a8 f3       	brcs	.-22     	; 0x768 <generate_signal+0x1ca>
 77e:	50 c0       	rjmp	.+160    	; 0x820 <generate_signal+0x282>
		break;
		
		case 5: // triangle
		for(uint16_t i=0; i<arr_length;i++)
		{
			if(i<arr_length/2)
 780:	68 01       	movw	r12, r16
 782:	d6 94       	lsr	r13
 784:	c7 94       	ror	r12
 786:	e1 2c       	mov	r14, r1
 788:	f1 2c       	mov	r15, r1
			*frame_buffer=(uint8_t)((float)i/arr_length*255);
			else
			*frame_buffer=(uint8_t)(255-(float)i/arr_length*255);;
 78a:	28 01       	movw	r4, r16
 78c:	61 2c       	mov	r6, r1
 78e:	71 2c       	mov	r7, r1
		break;
		
		case 5: // triangle
		for(uint16_t i=0; i<arr_length;i++)
		{
			if(i<arr_length/2)
 790:	ec 14       	cp	r14, r12
 792:	fd 04       	cpc	r15, r13
 794:	d8 f4       	brcc	.+54     	; 0x7cc <generate_signal+0x22e>
			*frame_buffer=(uint8_t)((float)i/arr_length*255);
 796:	b7 01       	movw	r22, r14
 798:	80 e0       	ldi	r24, 0x00	; 0
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	0e 94 34 05 	call	0xa68	; 0xa68 <__floatunsisf>
 7a0:	4b 01       	movw	r8, r22
 7a2:	5c 01       	movw	r10, r24
 7a4:	c3 01       	movw	r24, r6
 7a6:	b2 01       	movw	r22, r4
 7a8:	0e 94 34 05 	call	0xa68	; 0xa68 <__floatunsisf>
 7ac:	9b 01       	movw	r18, r22
 7ae:	ac 01       	movw	r20, r24
 7b0:	c5 01       	movw	r24, r10
 7b2:	b4 01       	movw	r22, r8
 7b4:	0e 94 93 04 	call	0x926	; 0x926 <__divsf3>
 7b8:	20 e0       	ldi	r18, 0x00	; 0
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	4f e7       	ldi	r20, 0x7F	; 127
 7be:	53 e4       	ldi	r21, 0x43	; 67
 7c0:	0e 94 01 06 	call	0xc02	; 0xc02 <__mulsf3>
 7c4:	0e 94 05 05 	call	0xa0a	; 0xa0a <__fixunssfsi>
 7c8:	68 83       	st	Y, r22
 7ca:	22 c0       	rjmp	.+68     	; 0x810 <generate_signal+0x272>
			else
			*frame_buffer=(uint8_t)(255-(float)i/arr_length*255);;
 7cc:	b7 01       	movw	r22, r14
 7ce:	80 e0       	ldi	r24, 0x00	; 0
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	0e 94 34 05 	call	0xa68	; 0xa68 <__floatunsisf>
 7d6:	4b 01       	movw	r8, r22
 7d8:	5c 01       	movw	r10, r24
 7da:	c3 01       	movw	r24, r6
 7dc:	b2 01       	movw	r22, r4
 7de:	0e 94 34 05 	call	0xa68	; 0xa68 <__floatunsisf>
 7e2:	9b 01       	movw	r18, r22
 7e4:	ac 01       	movw	r20, r24
 7e6:	c5 01       	movw	r24, r10
 7e8:	b4 01       	movw	r22, r8
 7ea:	0e 94 93 04 	call	0x926	; 0x926 <__divsf3>
 7ee:	20 e0       	ldi	r18, 0x00	; 0
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	4f e7       	ldi	r20, 0x7F	; 127
 7f4:	53 e4       	ldi	r21, 0x43	; 67
 7f6:	0e 94 01 06 	call	0xc02	; 0xc02 <__mulsf3>
 7fa:	9b 01       	movw	r18, r22
 7fc:	ac 01       	movw	r20, r24
 7fe:	60 e0       	ldi	r22, 0x00	; 0
 800:	70 e0       	ldi	r23, 0x00	; 0
 802:	8f e7       	ldi	r24, 0x7F	; 127
 804:	93 e4       	ldi	r25, 0x43	; 67
 806:	0e 94 21 04 	call	0x842	; 0x842 <__subsf3>
 80a:	0e 94 05 05 	call	0xa0a	; 0xa0a <__fixunssfsi>
 80e:	68 83       	st	Y, r22
			
			frame_buffer++;
 810:	21 96       	adiw	r28, 0x01	; 1
			frame_buffer++;
		}
		break;
		
		case 5: // triangle
		for(uint16_t i=0; i<arr_length;i++)
 812:	8f ef       	ldi	r24, 0xFF	; 255
 814:	e8 1a       	sub	r14, r24
 816:	f8 0a       	sbc	r15, r24
 818:	e0 16       	cp	r14, r16
 81a:	f1 06       	cpc	r15, r17
 81c:	08 f4       	brcc	.+2      	; 0x820 <generate_signal+0x282>
 81e:	b8 cf       	rjmp	.-144    	; 0x790 <generate_signal+0x1f2>
	}
	
	return frame_buffer-arr_length;
	
	
}
 820:	df 91       	pop	r29
 822:	cf 91       	pop	r28
 824:	1f 91       	pop	r17
 826:	0f 91       	pop	r16
 828:	ff 90       	pop	r15
 82a:	ef 90       	pop	r14
 82c:	df 90       	pop	r13
 82e:	cf 90       	pop	r12
 830:	bf 90       	pop	r11
 832:	af 90       	pop	r10
 834:	9f 90       	pop	r9
 836:	8f 90       	pop	r8
 838:	7f 90       	pop	r7
 83a:	6f 90       	pop	r6
 83c:	5f 90       	pop	r5
 83e:	4f 90       	pop	r4
 840:	08 95       	ret

00000842 <__subsf3>:
 842:	50 58       	subi	r21, 0x80	; 128

00000844 <__addsf3>:
 844:	bb 27       	eor	r27, r27
 846:	aa 27       	eor	r26, r26
 848:	0e 94 39 04 	call	0x872	; 0x872 <__addsf3x>
 84c:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__fp_round>
 850:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fp_pscA>
 854:	38 f0       	brcs	.+14     	; 0x864 <__addsf3+0x20>
 856:	0e 94 81 05 	call	0xb02	; 0xb02 <__fp_pscB>
 85a:	20 f0       	brcs	.+8      	; 0x864 <__addsf3+0x20>
 85c:	39 f4       	brne	.+14     	; 0x86c <__addsf3+0x28>
 85e:	9f 3f       	cpi	r25, 0xFF	; 255
 860:	19 f4       	brne	.+6      	; 0x868 <__addsf3+0x24>
 862:	26 f4       	brtc	.+8      	; 0x86c <__addsf3+0x28>
 864:	0c 94 77 05 	jmp	0xaee	; 0xaee <__fp_nan>
 868:	0e f4       	brtc	.+2      	; 0x86c <__addsf3+0x28>
 86a:	e0 95       	com	r30
 86c:	e7 fb       	bst	r30, 7
 86e:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_inf>

00000872 <__addsf3x>:
 872:	e9 2f       	mov	r30, r25
 874:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__fp_split3>
 878:	58 f3       	brcs	.-42     	; 0x850 <__addsf3+0xc>
 87a:	ba 17       	cp	r27, r26
 87c:	62 07       	cpc	r22, r18
 87e:	73 07       	cpc	r23, r19
 880:	84 07       	cpc	r24, r20
 882:	95 07       	cpc	r25, r21
 884:	20 f0       	brcs	.+8      	; 0x88e <__addsf3x+0x1c>
 886:	79 f4       	brne	.+30     	; 0x8a6 <__addsf3x+0x34>
 888:	a6 f5       	brtc	.+104    	; 0x8f2 <__addsf3x+0x80>
 88a:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__fp_zero>
 88e:	0e f4       	brtc	.+2      	; 0x892 <__addsf3x+0x20>
 890:	e0 95       	com	r30
 892:	0b 2e       	mov	r0, r27
 894:	ba 2f       	mov	r27, r26
 896:	a0 2d       	mov	r26, r0
 898:	0b 01       	movw	r0, r22
 89a:	b9 01       	movw	r22, r18
 89c:	90 01       	movw	r18, r0
 89e:	0c 01       	movw	r0, r24
 8a0:	ca 01       	movw	r24, r20
 8a2:	a0 01       	movw	r20, r0
 8a4:	11 24       	eor	r1, r1
 8a6:	ff 27       	eor	r31, r31
 8a8:	59 1b       	sub	r21, r25
 8aa:	99 f0       	breq	.+38     	; 0x8d2 <__addsf3x+0x60>
 8ac:	59 3f       	cpi	r21, 0xF9	; 249
 8ae:	50 f4       	brcc	.+20     	; 0x8c4 <__addsf3x+0x52>
 8b0:	50 3e       	cpi	r21, 0xE0	; 224
 8b2:	68 f1       	brcs	.+90     	; 0x90e <__stack+0xf>
 8b4:	1a 16       	cp	r1, r26
 8b6:	f0 40       	sbci	r31, 0x00	; 0
 8b8:	a2 2f       	mov	r26, r18
 8ba:	23 2f       	mov	r18, r19
 8bc:	34 2f       	mov	r19, r20
 8be:	44 27       	eor	r20, r20
 8c0:	58 5f       	subi	r21, 0xF8	; 248
 8c2:	f3 cf       	rjmp	.-26     	; 0x8aa <__addsf3x+0x38>
 8c4:	46 95       	lsr	r20
 8c6:	37 95       	ror	r19
 8c8:	27 95       	ror	r18
 8ca:	a7 95       	ror	r26
 8cc:	f0 40       	sbci	r31, 0x00	; 0
 8ce:	53 95       	inc	r21
 8d0:	c9 f7       	brne	.-14     	; 0x8c4 <__addsf3x+0x52>
 8d2:	7e f4       	brtc	.+30     	; 0x8f2 <__addsf3x+0x80>
 8d4:	1f 16       	cp	r1, r31
 8d6:	ba 0b       	sbc	r27, r26
 8d8:	62 0b       	sbc	r22, r18
 8da:	73 0b       	sbc	r23, r19
 8dc:	84 0b       	sbc	r24, r20
 8de:	ba f0       	brmi	.+46     	; 0x90e <__stack+0xf>
 8e0:	91 50       	subi	r25, 0x01	; 1
 8e2:	a1 f0       	breq	.+40     	; 0x90c <__stack+0xd>
 8e4:	ff 0f       	add	r31, r31
 8e6:	bb 1f       	adc	r27, r27
 8e8:	66 1f       	adc	r22, r22
 8ea:	77 1f       	adc	r23, r23
 8ec:	88 1f       	adc	r24, r24
 8ee:	c2 f7       	brpl	.-16     	; 0x8e0 <__addsf3x+0x6e>
 8f0:	0e c0       	rjmp	.+28     	; 0x90e <__stack+0xf>
 8f2:	ba 0f       	add	r27, r26
 8f4:	62 1f       	adc	r22, r18
 8f6:	73 1f       	adc	r23, r19
 8f8:	84 1f       	adc	r24, r20
 8fa:	48 f4       	brcc	.+18     	; 0x90e <__stack+0xf>
 8fc:	87 95       	ror	r24
 8fe:	77 95       	ror	r23
 900:	67 95       	ror	r22
 902:	b7 95       	ror	r27
 904:	f7 95       	ror	r31
 906:	9e 3f       	cpi	r25, 0xFE	; 254
 908:	08 f0       	brcs	.+2      	; 0x90c <__stack+0xd>
 90a:	b0 cf       	rjmp	.-160    	; 0x86c <__addsf3+0x28>
 90c:	93 95       	inc	r25
 90e:	88 0f       	add	r24, r24
 910:	08 f0       	brcs	.+2      	; 0x914 <__stack+0x15>
 912:	99 27       	eor	r25, r25
 914:	ee 0f       	add	r30, r30
 916:	97 95       	ror	r25
 918:	87 95       	ror	r24
 91a:	08 95       	ret

0000091c <cos>:
 91c:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fp_rempio2>
 920:	e3 95       	inc	r30
 922:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__fp_sinus>

00000926 <__divsf3>:
 926:	0e 94 a7 04 	call	0x94e	; 0x94e <__divsf3x>
 92a:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__fp_round>
 92e:	0e 94 81 05 	call	0xb02	; 0xb02 <__fp_pscB>
 932:	58 f0       	brcs	.+22     	; 0x94a <__divsf3+0x24>
 934:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fp_pscA>
 938:	40 f0       	brcs	.+16     	; 0x94a <__divsf3+0x24>
 93a:	29 f4       	brne	.+10     	; 0x946 <__divsf3+0x20>
 93c:	5f 3f       	cpi	r21, 0xFF	; 255
 93e:	29 f0       	breq	.+10     	; 0x94a <__divsf3+0x24>
 940:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_inf>
 944:	51 11       	cpse	r21, r1
 946:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__fp_szero>
 94a:	0c 94 77 05 	jmp	0xaee	; 0xaee <__fp_nan>

0000094e <__divsf3x>:
 94e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__fp_split3>
 952:	68 f3       	brcs	.-38     	; 0x92e <__divsf3+0x8>

00000954 <__divsf3_pse>:
 954:	99 23       	and	r25, r25
 956:	b1 f3       	breq	.-20     	; 0x944 <__divsf3+0x1e>
 958:	55 23       	and	r21, r21
 95a:	91 f3       	breq	.-28     	; 0x940 <__divsf3+0x1a>
 95c:	95 1b       	sub	r25, r21
 95e:	55 0b       	sbc	r21, r21
 960:	bb 27       	eor	r27, r27
 962:	aa 27       	eor	r26, r26
 964:	62 17       	cp	r22, r18
 966:	73 07       	cpc	r23, r19
 968:	84 07       	cpc	r24, r20
 96a:	38 f0       	brcs	.+14     	; 0x97a <__divsf3_pse+0x26>
 96c:	9f 5f       	subi	r25, 0xFF	; 255
 96e:	5f 4f       	sbci	r21, 0xFF	; 255
 970:	22 0f       	add	r18, r18
 972:	33 1f       	adc	r19, r19
 974:	44 1f       	adc	r20, r20
 976:	aa 1f       	adc	r26, r26
 978:	a9 f3       	breq	.-22     	; 0x964 <__divsf3_pse+0x10>
 97a:	35 d0       	rcall	.+106    	; 0x9e6 <__divsf3_pse+0x92>
 97c:	0e 2e       	mov	r0, r30
 97e:	3a f0       	brmi	.+14     	; 0x98e <__divsf3_pse+0x3a>
 980:	e0 e8       	ldi	r30, 0x80	; 128
 982:	32 d0       	rcall	.+100    	; 0x9e8 <__divsf3_pse+0x94>
 984:	91 50       	subi	r25, 0x01	; 1
 986:	50 40       	sbci	r21, 0x00	; 0
 988:	e6 95       	lsr	r30
 98a:	00 1c       	adc	r0, r0
 98c:	ca f7       	brpl	.-14     	; 0x980 <__divsf3_pse+0x2c>
 98e:	2b d0       	rcall	.+86     	; 0x9e6 <__divsf3_pse+0x92>
 990:	fe 2f       	mov	r31, r30
 992:	29 d0       	rcall	.+82     	; 0x9e6 <__divsf3_pse+0x92>
 994:	66 0f       	add	r22, r22
 996:	77 1f       	adc	r23, r23
 998:	88 1f       	adc	r24, r24
 99a:	bb 1f       	adc	r27, r27
 99c:	26 17       	cp	r18, r22
 99e:	37 07       	cpc	r19, r23
 9a0:	48 07       	cpc	r20, r24
 9a2:	ab 07       	cpc	r26, r27
 9a4:	b0 e8       	ldi	r27, 0x80	; 128
 9a6:	09 f0       	breq	.+2      	; 0x9aa <__divsf3_pse+0x56>
 9a8:	bb 0b       	sbc	r27, r27
 9aa:	80 2d       	mov	r24, r0
 9ac:	bf 01       	movw	r22, r30
 9ae:	ff 27       	eor	r31, r31
 9b0:	93 58       	subi	r25, 0x83	; 131
 9b2:	5f 4f       	sbci	r21, 0xFF	; 255
 9b4:	3a f0       	brmi	.+14     	; 0x9c4 <__divsf3_pse+0x70>
 9b6:	9e 3f       	cpi	r25, 0xFE	; 254
 9b8:	51 05       	cpc	r21, r1
 9ba:	78 f0       	brcs	.+30     	; 0x9da <__divsf3_pse+0x86>
 9bc:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_inf>
 9c0:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__fp_szero>
 9c4:	5f 3f       	cpi	r21, 0xFF	; 255
 9c6:	e4 f3       	brlt	.-8      	; 0x9c0 <__divsf3_pse+0x6c>
 9c8:	98 3e       	cpi	r25, 0xE8	; 232
 9ca:	d4 f3       	brlt	.-12     	; 0x9c0 <__divsf3_pse+0x6c>
 9cc:	86 95       	lsr	r24
 9ce:	77 95       	ror	r23
 9d0:	67 95       	ror	r22
 9d2:	b7 95       	ror	r27
 9d4:	f7 95       	ror	r31
 9d6:	9f 5f       	subi	r25, 0xFF	; 255
 9d8:	c9 f7       	brne	.-14     	; 0x9cc <__divsf3_pse+0x78>
 9da:	88 0f       	add	r24, r24
 9dc:	91 1d       	adc	r25, r1
 9de:	96 95       	lsr	r25
 9e0:	87 95       	ror	r24
 9e2:	97 f9       	bld	r25, 7
 9e4:	08 95       	ret
 9e6:	e1 e0       	ldi	r30, 0x01	; 1
 9e8:	66 0f       	add	r22, r22
 9ea:	77 1f       	adc	r23, r23
 9ec:	88 1f       	adc	r24, r24
 9ee:	bb 1f       	adc	r27, r27
 9f0:	62 17       	cp	r22, r18
 9f2:	73 07       	cpc	r23, r19
 9f4:	84 07       	cpc	r24, r20
 9f6:	ba 07       	cpc	r27, r26
 9f8:	20 f0       	brcs	.+8      	; 0xa02 <__divsf3_pse+0xae>
 9fa:	62 1b       	sub	r22, r18
 9fc:	73 0b       	sbc	r23, r19
 9fe:	84 0b       	sbc	r24, r20
 a00:	ba 0b       	sbc	r27, r26
 a02:	ee 1f       	adc	r30, r30
 a04:	88 f7       	brcc	.-30     	; 0x9e8 <__divsf3_pse+0x94>
 a06:	e0 95       	com	r30
 a08:	08 95       	ret

00000a0a <__fixunssfsi>:
 a0a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__fp_splitA>
 a0e:	88 f0       	brcs	.+34     	; 0xa32 <__fixunssfsi+0x28>
 a10:	9f 57       	subi	r25, 0x7F	; 127
 a12:	98 f0       	brcs	.+38     	; 0xa3a <__fixunssfsi+0x30>
 a14:	b9 2f       	mov	r27, r25
 a16:	99 27       	eor	r25, r25
 a18:	b7 51       	subi	r27, 0x17	; 23
 a1a:	b0 f0       	brcs	.+44     	; 0xa48 <__fixunssfsi+0x3e>
 a1c:	e1 f0       	breq	.+56     	; 0xa56 <__fixunssfsi+0x4c>
 a1e:	66 0f       	add	r22, r22
 a20:	77 1f       	adc	r23, r23
 a22:	88 1f       	adc	r24, r24
 a24:	99 1f       	adc	r25, r25
 a26:	1a f0       	brmi	.+6      	; 0xa2e <__fixunssfsi+0x24>
 a28:	ba 95       	dec	r27
 a2a:	c9 f7       	brne	.-14     	; 0xa1e <__fixunssfsi+0x14>
 a2c:	14 c0       	rjmp	.+40     	; 0xa56 <__fixunssfsi+0x4c>
 a2e:	b1 30       	cpi	r27, 0x01	; 1
 a30:	91 f0       	breq	.+36     	; 0xa56 <__fixunssfsi+0x4c>
 a32:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__fp_zero>
 a36:	b1 e0       	ldi	r27, 0x01	; 1
 a38:	08 95       	ret
 a3a:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__fp_zero>
 a3e:	67 2f       	mov	r22, r23
 a40:	78 2f       	mov	r23, r24
 a42:	88 27       	eor	r24, r24
 a44:	b8 5f       	subi	r27, 0xF8	; 248
 a46:	39 f0       	breq	.+14     	; 0xa56 <__fixunssfsi+0x4c>
 a48:	b9 3f       	cpi	r27, 0xF9	; 249
 a4a:	cc f3       	brlt	.-14     	; 0xa3e <__fixunssfsi+0x34>
 a4c:	86 95       	lsr	r24
 a4e:	77 95       	ror	r23
 a50:	67 95       	ror	r22
 a52:	b3 95       	inc	r27
 a54:	d9 f7       	brne	.-10     	; 0xa4c <__fixunssfsi+0x42>
 a56:	3e f4       	brtc	.+14     	; 0xa66 <__fixunssfsi+0x5c>
 a58:	90 95       	com	r25
 a5a:	80 95       	com	r24
 a5c:	70 95       	com	r23
 a5e:	61 95       	neg	r22
 a60:	7f 4f       	sbci	r23, 0xFF	; 255
 a62:	8f 4f       	sbci	r24, 0xFF	; 255
 a64:	9f 4f       	sbci	r25, 0xFF	; 255
 a66:	08 95       	ret

00000a68 <__floatunsisf>:
 a68:	e8 94       	clt
 a6a:	09 c0       	rjmp	.+18     	; 0xa7e <__floatsisf+0x12>

00000a6c <__floatsisf>:
 a6c:	97 fb       	bst	r25, 7
 a6e:	3e f4       	brtc	.+14     	; 0xa7e <__floatsisf+0x12>
 a70:	90 95       	com	r25
 a72:	80 95       	com	r24
 a74:	70 95       	com	r23
 a76:	61 95       	neg	r22
 a78:	7f 4f       	sbci	r23, 0xFF	; 255
 a7a:	8f 4f       	sbci	r24, 0xFF	; 255
 a7c:	9f 4f       	sbci	r25, 0xFF	; 255
 a7e:	99 23       	and	r25, r25
 a80:	a9 f0       	breq	.+42     	; 0xaac <__floatsisf+0x40>
 a82:	f9 2f       	mov	r31, r25
 a84:	96 e9       	ldi	r25, 0x96	; 150
 a86:	bb 27       	eor	r27, r27
 a88:	93 95       	inc	r25
 a8a:	f6 95       	lsr	r31
 a8c:	87 95       	ror	r24
 a8e:	77 95       	ror	r23
 a90:	67 95       	ror	r22
 a92:	b7 95       	ror	r27
 a94:	f1 11       	cpse	r31, r1
 a96:	f8 cf       	rjmp	.-16     	; 0xa88 <__floatsisf+0x1c>
 a98:	fa f4       	brpl	.+62     	; 0xad8 <__floatsisf+0x6c>
 a9a:	bb 0f       	add	r27, r27
 a9c:	11 f4       	brne	.+4      	; 0xaa2 <__floatsisf+0x36>
 a9e:	60 ff       	sbrs	r22, 0
 aa0:	1b c0       	rjmp	.+54     	; 0xad8 <__floatsisf+0x6c>
 aa2:	6f 5f       	subi	r22, 0xFF	; 255
 aa4:	7f 4f       	sbci	r23, 0xFF	; 255
 aa6:	8f 4f       	sbci	r24, 0xFF	; 255
 aa8:	9f 4f       	sbci	r25, 0xFF	; 255
 aaa:	16 c0       	rjmp	.+44     	; 0xad8 <__floatsisf+0x6c>
 aac:	88 23       	and	r24, r24
 aae:	11 f0       	breq	.+4      	; 0xab4 <__floatsisf+0x48>
 ab0:	96 e9       	ldi	r25, 0x96	; 150
 ab2:	11 c0       	rjmp	.+34     	; 0xad6 <__floatsisf+0x6a>
 ab4:	77 23       	and	r23, r23
 ab6:	21 f0       	breq	.+8      	; 0xac0 <__floatsisf+0x54>
 ab8:	9e e8       	ldi	r25, 0x8E	; 142
 aba:	87 2f       	mov	r24, r23
 abc:	76 2f       	mov	r23, r22
 abe:	05 c0       	rjmp	.+10     	; 0xaca <__floatsisf+0x5e>
 ac0:	66 23       	and	r22, r22
 ac2:	71 f0       	breq	.+28     	; 0xae0 <__floatsisf+0x74>
 ac4:	96 e8       	ldi	r25, 0x86	; 134
 ac6:	86 2f       	mov	r24, r22
 ac8:	70 e0       	ldi	r23, 0x00	; 0
 aca:	60 e0       	ldi	r22, 0x00	; 0
 acc:	2a f0       	brmi	.+10     	; 0xad8 <__floatsisf+0x6c>
 ace:	9a 95       	dec	r25
 ad0:	66 0f       	add	r22, r22
 ad2:	77 1f       	adc	r23, r23
 ad4:	88 1f       	adc	r24, r24
 ad6:	da f7       	brpl	.-10     	; 0xace <__floatsisf+0x62>
 ad8:	88 0f       	add	r24, r24
 ada:	96 95       	lsr	r25
 adc:	87 95       	ror	r24
 ade:	97 f9       	bld	r25, 7
 ae0:	08 95       	ret

00000ae2 <__fp_inf>:
 ae2:	97 f9       	bld	r25, 7
 ae4:	9f 67       	ori	r25, 0x7F	; 127
 ae6:	80 e8       	ldi	r24, 0x80	; 128
 ae8:	70 e0       	ldi	r23, 0x00	; 0
 aea:	60 e0       	ldi	r22, 0x00	; 0
 aec:	08 95       	ret

00000aee <__fp_nan>:
 aee:	9f ef       	ldi	r25, 0xFF	; 255
 af0:	80 ec       	ldi	r24, 0xC0	; 192
 af2:	08 95       	ret

00000af4 <__fp_pscA>:
 af4:	00 24       	eor	r0, r0
 af6:	0a 94       	dec	r0
 af8:	16 16       	cp	r1, r22
 afa:	17 06       	cpc	r1, r23
 afc:	18 06       	cpc	r1, r24
 afe:	09 06       	cpc	r0, r25
 b00:	08 95       	ret

00000b02 <__fp_pscB>:
 b02:	00 24       	eor	r0, r0
 b04:	0a 94       	dec	r0
 b06:	12 16       	cp	r1, r18
 b08:	13 06       	cpc	r1, r19
 b0a:	14 06       	cpc	r1, r20
 b0c:	05 06       	cpc	r0, r21
 b0e:	08 95       	ret
 b10:	0c 94 77 05 	jmp	0xaee	; 0xaee <__fp_nan>

00000b14 <__fp_rempio2>:
 b14:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__fp_splitA>
 b18:	d8 f3       	brcs	.-10     	; 0xb10 <__fp_pscB+0xe>
 b1a:	e8 94       	clt
 b1c:	e0 e0       	ldi	r30, 0x00	; 0
 b1e:	bb 27       	eor	r27, r27
 b20:	9f 57       	subi	r25, 0x7F	; 127
 b22:	f0 f0       	brcs	.+60     	; 0xb60 <__fp_rempio2+0x4c>
 b24:	2a ed       	ldi	r18, 0xDA	; 218
 b26:	3f e0       	ldi	r19, 0x0F	; 15
 b28:	49 ec       	ldi	r20, 0xC9	; 201
 b2a:	06 c0       	rjmp	.+12     	; 0xb38 <__fp_rempio2+0x24>
 b2c:	ee 0f       	add	r30, r30
 b2e:	bb 0f       	add	r27, r27
 b30:	66 1f       	adc	r22, r22
 b32:	77 1f       	adc	r23, r23
 b34:	88 1f       	adc	r24, r24
 b36:	28 f0       	brcs	.+10     	; 0xb42 <__fp_rempio2+0x2e>
 b38:	b2 3a       	cpi	r27, 0xA2	; 162
 b3a:	62 07       	cpc	r22, r18
 b3c:	73 07       	cpc	r23, r19
 b3e:	84 07       	cpc	r24, r20
 b40:	28 f0       	brcs	.+10     	; 0xb4c <__fp_rempio2+0x38>
 b42:	b2 5a       	subi	r27, 0xA2	; 162
 b44:	62 0b       	sbc	r22, r18
 b46:	73 0b       	sbc	r23, r19
 b48:	84 0b       	sbc	r24, r20
 b4a:	e3 95       	inc	r30
 b4c:	9a 95       	dec	r25
 b4e:	72 f7       	brpl	.-36     	; 0xb2c <__fp_rempio2+0x18>
 b50:	80 38       	cpi	r24, 0x80	; 128
 b52:	30 f4       	brcc	.+12     	; 0xb60 <__fp_rempio2+0x4c>
 b54:	9a 95       	dec	r25
 b56:	bb 0f       	add	r27, r27
 b58:	66 1f       	adc	r22, r22
 b5a:	77 1f       	adc	r23, r23
 b5c:	88 1f       	adc	r24, r24
 b5e:	d2 f7       	brpl	.-12     	; 0xb54 <__fp_rempio2+0x40>
 b60:	90 48       	sbci	r25, 0x80	; 128
 b62:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_mpack_finite>

00000b66 <__fp_round>:
 b66:	09 2e       	mov	r0, r25
 b68:	03 94       	inc	r0
 b6a:	00 0c       	add	r0, r0
 b6c:	11 f4       	brne	.+4      	; 0xb72 <__fp_round+0xc>
 b6e:	88 23       	and	r24, r24
 b70:	52 f0       	brmi	.+20     	; 0xb86 <__fp_round+0x20>
 b72:	bb 0f       	add	r27, r27
 b74:	40 f4       	brcc	.+16     	; 0xb86 <__fp_round+0x20>
 b76:	bf 2b       	or	r27, r31
 b78:	11 f4       	brne	.+4      	; 0xb7e <__fp_round+0x18>
 b7a:	60 ff       	sbrs	r22, 0
 b7c:	04 c0       	rjmp	.+8      	; 0xb86 <__fp_round+0x20>
 b7e:	6f 5f       	subi	r22, 0xFF	; 255
 b80:	7f 4f       	sbci	r23, 0xFF	; 255
 b82:	8f 4f       	sbci	r24, 0xFF	; 255
 b84:	9f 4f       	sbci	r25, 0xFF	; 255
 b86:	08 95       	ret

00000b88 <__fp_sinus>:
 b88:	ef 93       	push	r30
 b8a:	e0 ff       	sbrs	r30, 0
 b8c:	07 c0       	rjmp	.+14     	; 0xb9c <__fp_sinus+0x14>
 b8e:	a2 ea       	ldi	r26, 0xA2	; 162
 b90:	2a ed       	ldi	r18, 0xDA	; 218
 b92:	3f e0       	ldi	r19, 0x0F	; 15
 b94:	49 ec       	ldi	r20, 0xC9	; 201
 b96:	5f eb       	ldi	r21, 0xBF	; 191
 b98:	0e 94 39 04 	call	0x872	; 0x872 <__addsf3x>
 b9c:	0e 94 b3 05 	call	0xb66	; 0xb66 <__fp_round>
 ba0:	0f 90       	pop	r0
 ba2:	03 94       	inc	r0
 ba4:	01 fc       	sbrc	r0, 1
 ba6:	90 58       	subi	r25, 0x80	; 128
 ba8:	e8 e6       	ldi	r30, 0x68	; 104
 baa:	f0 e0       	ldi	r31, 0x00	; 0
 bac:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__fp_powsodd>

00000bb0 <__fp_split3>:
 bb0:	57 fd       	sbrc	r21, 7
 bb2:	90 58       	subi	r25, 0x80	; 128
 bb4:	44 0f       	add	r20, r20
 bb6:	55 1f       	adc	r21, r21
 bb8:	59 f0       	breq	.+22     	; 0xbd0 <__fp_splitA+0x10>
 bba:	5f 3f       	cpi	r21, 0xFF	; 255
 bbc:	71 f0       	breq	.+28     	; 0xbda <__fp_splitA+0x1a>
 bbe:	47 95       	ror	r20

00000bc0 <__fp_splitA>:
 bc0:	88 0f       	add	r24, r24
 bc2:	97 fb       	bst	r25, 7
 bc4:	99 1f       	adc	r25, r25
 bc6:	61 f0       	breq	.+24     	; 0xbe0 <__fp_splitA+0x20>
 bc8:	9f 3f       	cpi	r25, 0xFF	; 255
 bca:	79 f0       	breq	.+30     	; 0xbea <__fp_splitA+0x2a>
 bcc:	87 95       	ror	r24
 bce:	08 95       	ret
 bd0:	12 16       	cp	r1, r18
 bd2:	13 06       	cpc	r1, r19
 bd4:	14 06       	cpc	r1, r20
 bd6:	55 1f       	adc	r21, r21
 bd8:	f2 cf       	rjmp	.-28     	; 0xbbe <__fp_split3+0xe>
 bda:	46 95       	lsr	r20
 bdc:	f1 df       	rcall	.-30     	; 0xbc0 <__fp_splitA>
 bde:	08 c0       	rjmp	.+16     	; 0xbf0 <__fp_splitA+0x30>
 be0:	16 16       	cp	r1, r22
 be2:	17 06       	cpc	r1, r23
 be4:	18 06       	cpc	r1, r24
 be6:	99 1f       	adc	r25, r25
 be8:	f1 cf       	rjmp	.-30     	; 0xbcc <__fp_splitA+0xc>
 bea:	86 95       	lsr	r24
 bec:	71 05       	cpc	r23, r1
 bee:	61 05       	cpc	r22, r1
 bf0:	08 94       	sec
 bf2:	08 95       	ret

00000bf4 <__fp_zero>:
 bf4:	e8 94       	clt

00000bf6 <__fp_szero>:
 bf6:	bb 27       	eor	r27, r27
 bf8:	66 27       	eor	r22, r22
 bfa:	77 27       	eor	r23, r23
 bfc:	cb 01       	movw	r24, r22
 bfe:	97 f9       	bld	r25, 7
 c00:	08 95       	ret

00000c02 <__mulsf3>:
 c02:	0e 94 14 06 	call	0xc28	; 0xc28 <__mulsf3x>
 c06:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__fp_round>
 c0a:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__fp_pscA>
 c0e:	38 f0       	brcs	.+14     	; 0xc1e <__mulsf3+0x1c>
 c10:	0e 94 81 05 	call	0xb02	; 0xb02 <__fp_pscB>
 c14:	20 f0       	brcs	.+8      	; 0xc1e <__mulsf3+0x1c>
 c16:	95 23       	and	r25, r21
 c18:	11 f0       	breq	.+4      	; 0xc1e <__mulsf3+0x1c>
 c1a:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_inf>
 c1e:	0c 94 77 05 	jmp	0xaee	; 0xaee <__fp_nan>
 c22:	11 24       	eor	r1, r1
 c24:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__fp_szero>

00000c28 <__mulsf3x>:
 c28:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__fp_split3>
 c2c:	70 f3       	brcs	.-36     	; 0xc0a <__mulsf3+0x8>

00000c2e <__mulsf3_pse>:
 c2e:	95 9f       	mul	r25, r21
 c30:	c1 f3       	breq	.-16     	; 0xc22 <__mulsf3+0x20>
 c32:	95 0f       	add	r25, r21
 c34:	50 e0       	ldi	r21, 0x00	; 0
 c36:	55 1f       	adc	r21, r21
 c38:	62 9f       	mul	r22, r18
 c3a:	f0 01       	movw	r30, r0
 c3c:	72 9f       	mul	r23, r18
 c3e:	bb 27       	eor	r27, r27
 c40:	f0 0d       	add	r31, r0
 c42:	b1 1d       	adc	r27, r1
 c44:	63 9f       	mul	r22, r19
 c46:	aa 27       	eor	r26, r26
 c48:	f0 0d       	add	r31, r0
 c4a:	b1 1d       	adc	r27, r1
 c4c:	aa 1f       	adc	r26, r26
 c4e:	64 9f       	mul	r22, r20
 c50:	66 27       	eor	r22, r22
 c52:	b0 0d       	add	r27, r0
 c54:	a1 1d       	adc	r26, r1
 c56:	66 1f       	adc	r22, r22
 c58:	82 9f       	mul	r24, r18
 c5a:	22 27       	eor	r18, r18
 c5c:	b0 0d       	add	r27, r0
 c5e:	a1 1d       	adc	r26, r1
 c60:	62 1f       	adc	r22, r18
 c62:	73 9f       	mul	r23, r19
 c64:	b0 0d       	add	r27, r0
 c66:	a1 1d       	adc	r26, r1
 c68:	62 1f       	adc	r22, r18
 c6a:	83 9f       	mul	r24, r19
 c6c:	a0 0d       	add	r26, r0
 c6e:	61 1d       	adc	r22, r1
 c70:	22 1f       	adc	r18, r18
 c72:	74 9f       	mul	r23, r20
 c74:	33 27       	eor	r19, r19
 c76:	a0 0d       	add	r26, r0
 c78:	61 1d       	adc	r22, r1
 c7a:	23 1f       	adc	r18, r19
 c7c:	84 9f       	mul	r24, r20
 c7e:	60 0d       	add	r22, r0
 c80:	21 1d       	adc	r18, r1
 c82:	82 2f       	mov	r24, r18
 c84:	76 2f       	mov	r23, r22
 c86:	6a 2f       	mov	r22, r26
 c88:	11 24       	eor	r1, r1
 c8a:	9f 57       	subi	r25, 0x7F	; 127
 c8c:	50 40       	sbci	r21, 0x00	; 0
 c8e:	9a f0       	brmi	.+38     	; 0xcb6 <__mulsf3_pse+0x88>
 c90:	f1 f0       	breq	.+60     	; 0xcce <__mulsf3_pse+0xa0>
 c92:	88 23       	and	r24, r24
 c94:	4a f0       	brmi	.+18     	; 0xca8 <__mulsf3_pse+0x7a>
 c96:	ee 0f       	add	r30, r30
 c98:	ff 1f       	adc	r31, r31
 c9a:	bb 1f       	adc	r27, r27
 c9c:	66 1f       	adc	r22, r22
 c9e:	77 1f       	adc	r23, r23
 ca0:	88 1f       	adc	r24, r24
 ca2:	91 50       	subi	r25, 0x01	; 1
 ca4:	50 40       	sbci	r21, 0x00	; 0
 ca6:	a9 f7       	brne	.-22     	; 0xc92 <__mulsf3_pse+0x64>
 ca8:	9e 3f       	cpi	r25, 0xFE	; 254
 caa:	51 05       	cpc	r21, r1
 cac:	80 f0       	brcs	.+32     	; 0xcce <__mulsf3_pse+0xa0>
 cae:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__fp_inf>
 cb2:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__fp_szero>
 cb6:	5f 3f       	cpi	r21, 0xFF	; 255
 cb8:	e4 f3       	brlt	.-8      	; 0xcb2 <__mulsf3_pse+0x84>
 cba:	98 3e       	cpi	r25, 0xE8	; 232
 cbc:	d4 f3       	brlt	.-12     	; 0xcb2 <__mulsf3_pse+0x84>
 cbe:	86 95       	lsr	r24
 cc0:	77 95       	ror	r23
 cc2:	67 95       	ror	r22
 cc4:	b7 95       	ror	r27
 cc6:	f7 95       	ror	r31
 cc8:	e7 95       	ror	r30
 cca:	9f 5f       	subi	r25, 0xFF	; 255
 ccc:	c1 f7       	brne	.-16     	; 0xcbe <__mulsf3_pse+0x90>
 cce:	fe 2b       	or	r31, r30
 cd0:	88 0f       	add	r24, r24
 cd2:	91 1d       	adc	r25, r1
 cd4:	96 95       	lsr	r25
 cd6:	87 95       	ror	r24
 cd8:	97 f9       	bld	r25, 7
 cda:	08 95       	ret

00000cdc <__fp_mpack>:
 cdc:	9f 3f       	cpi	r25, 0xFF	; 255
 cde:	31 f0       	breq	.+12     	; 0xcec <__fp_mpack_finite+0xc>

00000ce0 <__fp_mpack_finite>:
 ce0:	91 50       	subi	r25, 0x01	; 1
 ce2:	20 f4       	brcc	.+8      	; 0xcec <__fp_mpack_finite+0xc>
 ce4:	87 95       	ror	r24
 ce6:	77 95       	ror	r23
 ce8:	67 95       	ror	r22
 cea:	b7 95       	ror	r27
 cec:	88 0f       	add	r24, r24
 cee:	91 1d       	adc	r25, r1
 cf0:	96 95       	lsr	r25
 cf2:	87 95       	ror	r24
 cf4:	97 f9       	bld	r25, 7
 cf6:	08 95       	ret

00000cf8 <__fp_powsodd>:
 cf8:	9f 93       	push	r25
 cfa:	8f 93       	push	r24
 cfc:	7f 93       	push	r23
 cfe:	6f 93       	push	r22
 d00:	ff 93       	push	r31
 d02:	ef 93       	push	r30
 d04:	9b 01       	movw	r18, r22
 d06:	ac 01       	movw	r20, r24
 d08:	0e 94 01 06 	call	0xc02	; 0xc02 <__mulsf3>
 d0c:	ef 91       	pop	r30
 d0e:	ff 91       	pop	r31
 d10:	0e 94 90 06 	call	0xd20	; 0xd20 <__fp_powser>
 d14:	2f 91       	pop	r18
 d16:	3f 91       	pop	r19
 d18:	4f 91       	pop	r20
 d1a:	5f 91       	pop	r21
 d1c:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__mulsf3>

00000d20 <__fp_powser>:
 d20:	df 93       	push	r29
 d22:	cf 93       	push	r28
 d24:	1f 93       	push	r17
 d26:	0f 93       	push	r16
 d28:	ff 92       	push	r15
 d2a:	ef 92       	push	r14
 d2c:	df 92       	push	r13
 d2e:	7b 01       	movw	r14, r22
 d30:	8c 01       	movw	r16, r24
 d32:	68 94       	set
 d34:	06 c0       	rjmp	.+12     	; 0xd42 <__fp_powser+0x22>
 d36:	da 2e       	mov	r13, r26
 d38:	ef 01       	movw	r28, r30
 d3a:	0e 94 14 06 	call	0xc28	; 0xc28 <__mulsf3x>
 d3e:	fe 01       	movw	r30, r28
 d40:	e8 94       	clt
 d42:	a5 91       	lpm	r26, Z+
 d44:	25 91       	lpm	r18, Z+
 d46:	35 91       	lpm	r19, Z+
 d48:	45 91       	lpm	r20, Z+
 d4a:	55 91       	lpm	r21, Z+
 d4c:	a6 f3       	brts	.-24     	; 0xd36 <__fp_powser+0x16>
 d4e:	ef 01       	movw	r28, r30
 d50:	0e 94 39 04 	call	0x872	; 0x872 <__addsf3x>
 d54:	fe 01       	movw	r30, r28
 d56:	97 01       	movw	r18, r14
 d58:	a8 01       	movw	r20, r16
 d5a:	da 94       	dec	r13
 d5c:	69 f7       	brne	.-38     	; 0xd38 <__fp_powser+0x18>
 d5e:	df 90       	pop	r13
 d60:	ef 90       	pop	r14
 d62:	ff 90       	pop	r15
 d64:	0f 91       	pop	r16
 d66:	1f 91       	pop	r17
 d68:	cf 91       	pop	r28
 d6a:	df 91       	pop	r29
 d6c:	08 95       	ret

00000d6e <_exit>:
 d6e:	f8 94       	cli

00000d70 <__stop_program>:
 d70:	ff cf       	rjmp	.-2      	; 0xd70 <__stop_program>
