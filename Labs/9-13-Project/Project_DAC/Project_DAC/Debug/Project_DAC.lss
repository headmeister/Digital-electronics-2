
Project_DAC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000374  00800100  000015ee  00001682  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000043a  00800474  00800474  000019f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ca1  00000000  00000000  00001bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c95  00000000  00000000  00003851  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010a8  00000000  00000000  000044e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003fc  00000000  00000000  00005590  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ce  00000000  00000000  0000598c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018eb  00000000  00000000  0000605a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  00007945  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 8c 03 	jmp	0x718	; 0x718 <__vector_9>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_16>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 0d 08 	jmp	0x101a	; 0x101a <__vector_18>
      4c:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__vector_19>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	9e 04       	cpc	r9, r14
      6a:	9a 04       	cpc	r9, r10
      6c:	95 04       	cpc	r9, r5
      6e:	90 04       	cpc	r9, r0
      70:	8b 04       	cpc	r8, r11
      72:	86 04       	cpc	r8, r6
      74:	81 04       	cpc	r8, r1
      76:	7c 04       	cpc	r7, r12
      78:	77 04       	cpc	r7, r7
      7a:	e4 06       	cpc	r14, r20
      7c:	f0 06       	cpc	r15, r16
      7e:	f8 06       	cpc	r15, r24
      80:	00 07       	cpc	r16, r16
      82:	08 07       	cpc	r16, r24
      84:	10 07       	cpc	r17, r16
      86:	18 07       	cpc	r17, r24
      88:	24 07       	cpc	r18, r20
      8a:	30 07       	cpc	r19, r16

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee ee       	ldi	r30, 0xEE	; 238
      a0:	f5 e1       	ldi	r31, 0x15	; 21
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a4 37       	cpi	r26, 0x74	; 116
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	28 e0       	ldi	r18, 0x08	; 8
      b0:	a4 e7       	ldi	r26, 0x74	; 116
      b2:	b4 e0       	ldi	r27, 0x04	; 4
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	ae 3a       	cpi	r26, 0xAE	; 174
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 36 02 	call	0x46c	; 0x46c <main>
      c2:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
      ca:	5b 9a       	sbi	0x0b, 3	; 11
      cc:	85 e0       	ldi	r24, 0x05	; 5
      ce:	8a 95       	dec	r24
      d0:	f1 f7       	brne	.-4      	; 0xce <toggle_e+0x4>
      d2:	00 00       	nop
      d4:	5b 98       	cbi	0x0b, 3	; 11
      d6:	08 95       	ret

000000d8 <lcd_write>:
      d8:	cf 93       	push	r28
      da:	c8 2f       	mov	r28, r24
      dc:	66 23       	and	r22, r22
      de:	11 f0       	breq	.+4      	; 0xe4 <lcd_write+0xc>
      e0:	5a 9a       	sbi	0x0b, 2	; 11
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <lcd_write+0xe>
      e4:	5a 98       	cbi	0x0b, 2	; 11
      e6:	54 9a       	sbi	0x0a, 4	; 10
      e8:	55 9a       	sbi	0x0a, 5	; 10
      ea:	56 9a       	sbi	0x0a, 6	; 10
      ec:	57 9a       	sbi	0x0a, 7	; 10
      ee:	5f 98       	cbi	0x0b, 7	; 11
      f0:	5e 98       	cbi	0x0b, 6	; 11
      f2:	5d 98       	cbi	0x0b, 5	; 11
      f4:	5c 98       	cbi	0x0b, 4	; 11
      f6:	cc 23       	and	r28, r28
      f8:	0c f4       	brge	.+2      	; 0xfc <lcd_write+0x24>
      fa:	5f 9a       	sbi	0x0b, 7	; 11
      fc:	c6 fd       	sbrc	r28, 6
      fe:	5e 9a       	sbi	0x0b, 6	; 11
     100:	c5 fd       	sbrc	r28, 5
     102:	5d 9a       	sbi	0x0b, 5	; 11
     104:	c4 fd       	sbrc	r28, 4
     106:	5c 9a       	sbi	0x0b, 4	; 11
     108:	0e 94 65 00 	call	0xca	; 0xca <toggle_e>
     10c:	5f 98       	cbi	0x0b, 7	; 11
     10e:	5e 98       	cbi	0x0b, 6	; 11
     110:	5d 98       	cbi	0x0b, 5	; 11
     112:	5c 98       	cbi	0x0b, 4	; 11
     114:	c3 fd       	sbrc	r28, 3
     116:	5f 9a       	sbi	0x0b, 7	; 11
     118:	c2 fd       	sbrc	r28, 2
     11a:	5e 9a       	sbi	0x0b, 6	; 11
     11c:	c1 fd       	sbrc	r28, 1
     11e:	5d 9a       	sbi	0x0b, 5	; 11
     120:	c0 fd       	sbrc	r28, 0
     122:	5c 9a       	sbi	0x0b, 4	; 11
     124:	0e 94 65 00 	call	0xca	; 0xca <toggle_e>
     128:	5c 9a       	sbi	0x0b, 4	; 11
     12a:	5d 9a       	sbi	0x0b, 5	; 11
     12c:	5e 9a       	sbi	0x0b, 6	; 11
     12e:	5f 9a       	sbi	0x0b, 7	; 11
     130:	87 eb       	ldi	r24, 0xB7	; 183
     132:	9b e0       	ldi	r25, 0x0B	; 11
     134:	01 97       	sbiw	r24, 0x01	; 1
     136:	f1 f7       	brne	.-4      	; 0x134 <lcd_write+0x5c>
     138:	00 c0       	rjmp	.+0      	; 0x13a <lcd_write+0x62>
     13a:	00 00       	nop
     13c:	cf 91       	pop	r28
     13e:	08 95       	ret

00000140 <lcd_command>:
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_write>
     146:	08 95       	ret

00000148 <lcd_gotoxy>:
     148:	61 11       	cpse	r22, r1
     14a:	04 c0       	rjmp	.+8      	; 0x154 <lcd_gotoxy+0xc>
     14c:	80 58       	subi	r24, 0x80	; 128
     14e:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
     152:	08 95       	ret
     154:	80 54       	subi	r24, 0x40	; 64
     156:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
     15a:	08 95       	ret

0000015c <lcd_clrscr>:
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
     162:	08 95       	ret

00000164 <lcd_putc>:
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_write>
     16a:	08 95       	ret

0000016c <lcd_puts>:
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	ec 01       	movw	r28, r24
     172:	21 96       	adiw	r28, 0x01	; 1
     174:	fc 01       	movw	r30, r24
     176:	80 81       	ld	r24, Z
     178:	88 23       	and	r24, r24
     17a:	29 f0       	breq	.+10     	; 0x186 <lcd_puts+0x1a>
     17c:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_putc>
     180:	89 91       	ld	r24, Y+
     182:	81 11       	cpse	r24, r1
     184:	fb cf       	rjmp	.-10     	; 0x17c <lcd_puts+0x10>
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     18c:	cf 93       	push	r28
     18e:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     190:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     192:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     194:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     196:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     198:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     19a:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     19c:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     19e:	8f ef       	ldi	r24, 0xFF	; 255
     1a0:	99 ef       	ldi	r25, 0xF9	; 249
     1a2:	01 97       	sbiw	r24, 0x01	; 1
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x16>
     1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x1c>
     1a8:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
     1aa:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
     1ac:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
     1ae:	0e 94 65 00 	call	0xca	; 0xca <toggle_e>
     1b2:	8f e1       	ldi	r24, 0x1F	; 31
     1b4:	9e e4       	ldi	r25, 0x4E	; 78
     1b6:	01 97       	sbiw	r24, 0x01	; 1
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_init+0x2a>
     1ba:	00 c0       	rjmp	.+0      	; 0x1bc <lcd_init+0x30>
     1bc:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
     1be:	0e 94 65 00 	call	0xca	; 0xca <toggle_e>
     1c2:	8f ef       	ldi	r24, 0xFF	; 255
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	01 97       	sbiw	r24, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_init+0x3a>
     1ca:	00 c0       	rjmp	.+0      	; 0x1cc <lcd_init+0x40>
     1cc:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
     1ce:	0e 94 65 00 	call	0xca	; 0xca <toggle_e>
     1d2:	8f ef       	ldi	r24, 0xFF	; 255
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	01 97       	sbiw	r24, 0x01	; 1
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <lcd_init+0x4a>
     1da:	00 c0       	rjmp	.+0      	; 0x1dc <lcd_init+0x50>
     1dc:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
     1de:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
     1e0:	0e 94 65 00 	call	0xca	; 0xca <toggle_e>
     1e4:	8f ef       	ldi	r24, 0xFF	; 255
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	01 97       	sbiw	r24, 0x01	; 1
     1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcd_init+0x5c>
     1ec:	00 c0       	rjmp	.+0      	; 0x1ee <lcd_init+0x62>
     1ee:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
     1f0:	88 e2       	ldi	r24, 0x28	; 40
     1f2:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
     1f6:	88 e0       	ldi	r24, 0x08	; 8
     1f8:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
    lcd_clrscr();                  /* display clear                */
     1fc:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
     200:	86 e0       	ldi	r24, 0x06	; 6
     202:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
     206:	8c 2f       	mov	r24, r28
     208:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
}/* lcd_init */
     20c:	cf 91       	pop	r28
     20e:	08 95       	ret

00000210 <__vector_16>:


/** @brief  Frame buffer update timer (main sampling clock generator) moves in frame buffer
*/
ISR(TIMER0_OVF_vect)
{
     210:	1f 92       	push	r1
     212:	0f 92       	push	r0
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	0f 92       	push	r0
     218:	11 24       	eor	r1, r1
     21a:	2f 93       	push	r18
     21c:	3f 93       	push	r19
     21e:	8f 93       	push	r24
     220:	9f 93       	push	r25
     222:	ef 93       	push	r30
     224:	ff 93       	push	r31
	static uint16_t index = 0;

	


	if (index < arr_size -1)					//  if at end of active array portion move to start
     226:	20 91 7b 04 	lds	r18, 0x047B	; 0x80047b <index.2123>
     22a:	30 91 7c 04 	lds	r19, 0x047C	; 0x80047c <index.2123+0x1>
     22e:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <arr_size>
     232:	90 91 7e 04 	lds	r25, 0x047E	; 0x80047e <arr_size+0x1>
     236:	01 97       	sbiw	r24, 0x01	; 1
     238:	28 17       	cp	r18, r24
     23a:	39 07       	cpc	r19, r25
     23c:	38 f4       	brcc	.+14     	; 0x24c <__vector_16+0x3c>
	{
		
		index++;
     23e:	2f 5f       	subi	r18, 0xFF	; 255
     240:	3f 4f       	sbci	r19, 0xFF	; 255
     242:	30 93 7c 04 	sts	0x047C, r19	; 0x80047c <index.2123+0x1>
     246:	20 93 7b 04 	sts	0x047B, r18	; 0x80047b <index.2123>
     24a:	08 c0       	rjmp	.+16     	; 0x25c <__vector_16+0x4c>
	}
	else
	{
		
		index=0;								// clear index 2cyc
     24c:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <index.2123+0x1>
     250:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <index.2123>
		
		asm("STS 0x0124,R1");					// balancing branches 2cyc
     254:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <timer_values+0x5>
		asm("STS 0x0124,R1");					// balancing branches 2cyc
     258:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <timer_values+0x5>
		
	}

	PORTB = frame_buffer[index];				// output the data
     25c:	e0 91 7b 04 	lds	r30, 0x047B	; 0x80047b <index.2123>
     260:	f0 91 7c 04 	lds	r31, 0x047C	; 0x80047c <index.2123+0x1>
     264:	ea 53       	subi	r30, 0x3A	; 58
     266:	fb 4f       	sbci	r31, 0xFB	; 251
     268:	80 81       	ld	r24, Z
     26a:	85 b9       	out	0x05, r24	; 5

}
     26c:	ff 91       	pop	r31
     26e:	ef 91       	pop	r30
     270:	9f 91       	pop	r25
     272:	8f 91       	pop	r24
     274:	3f 91       	pop	r19
     276:	2f 91       	pop	r18
     278:	0f 90       	pop	r0
     27a:	0f be       	out	0x3f, r0	; 63
     27c:	0f 90       	pop	r0
     27e:	1f 90       	pop	r1
     280:	18 95       	reti

00000282 <change_size>:




void change_size()													// change the active frame buffer size to contain whole period
{
     282:	cf 92       	push	r12
     284:	df 92       	push	r13
     286:	ef 92       	push	r14
     288:	ff 92       	push	r15
     28a:	cf 93       	push	r28
	static uint8_t timer_index = 0;
	uint8_t stop=0;
	arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);
     28c:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <frequency>
     290:	70 91 08 01 	lds	r23, 0x0108	; 0x800108 <frequency+0x1>
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 b0 09 	call	0x1360	; 0x1360 <__floatunsisf>
     29c:	9b 01       	movw	r18, r22
     29e:	ac 01       	movw	r20, r24
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	80 e8       	ldi	r24, 0x80	; 128
     2a6:	9f e3       	ldi	r25, 0x3F	; 63
     2a8:	0e 94 0f 09 	call	0x121e	; 0x121e <__divsf3>
     2ac:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <tim_set>
     2b0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <tim_set+0x1>
     2b4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <tim_set+0x2>
     2b8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <tim_set+0x3>
     2bc:	0e 94 0f 09 	call	0x121e	; 0x121e <__divsf3>
     2c0:	0e 94 81 09 	call	0x1302	; 0x1302 <__fixunssfsi>
     2c4:	70 93 7e 04 	sts	0x047E, r23	; 0x80047e <arr_size+0x1>
     2c8:	60 93 7d 04 	sts	0x047D, r22	; 0x80047d <arr_size>

	while (arr_size > 1000 && timer_index < 3)						// if the signal does not fit change the timer and try again
     2cc:	69 3e       	cpi	r22, 0xE9	; 233
     2ce:	73 40       	sbci	r23, 0x03	; 3
     2d0:	e8 f1       	brcs	.+122    	; 0x34c <change_size+0xca>
     2d2:	c0 91 74 04 	lds	r28, 0x0474	; 0x800474 <__data_end>
     2d6:	c3 30       	cpi	r28, 0x03	; 3
     2d8:	d8 f5       	brcc	.+118    	; 0x350 <change_size+0xce>
     2da:	cf 5f       	subi	r28, 0xFF	; 255
     2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <change_size+0x5e>
     2de:	c8 2f       	mov	r28, r24
	{
		tim_set = timer_values[++timer_index];
     2e0:	ec 2f       	mov	r30, r28
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	ee 0f       	add	r30, r30
     2e6:	ff 1f       	adc	r31, r31
     2e8:	ee 0f       	add	r30, r30
     2ea:	ff 1f       	adc	r31, r31
     2ec:	e1 5e       	subi	r30, 0xE1	; 225
     2ee:	fe 4f       	sbci	r31, 0xFE	; 254
     2f0:	c0 80       	ld	r12, Z
     2f2:	d1 80       	ldd	r13, Z+1	; 0x01
     2f4:	e2 80       	ldd	r14, Z+2	; 0x02
     2f6:	f3 80       	ldd	r15, Z+3	; 0x03
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);
     2f8:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <frequency>
     2fc:	70 91 08 01 	lds	r23, 0x0108	; 0x800108 <frequency+0x1>
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 b0 09 	call	0x1360	; 0x1360 <__floatunsisf>
     308:	9b 01       	movw	r18, r22
     30a:	ac 01       	movw	r20, r24
     30c:	60 e0       	ldi	r22, 0x00	; 0
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	80 e8       	ldi	r24, 0x80	; 128
     312:	9f e3       	ldi	r25, 0x3F	; 63
     314:	0e 94 0f 09 	call	0x121e	; 0x121e <__divsf3>
     318:	a7 01       	movw	r20, r14
     31a:	96 01       	movw	r18, r12
     31c:	0e 94 0f 09 	call	0x121e	; 0x121e <__divsf3>
     320:	0e 94 81 09 	call	0x1302	; 0x1302 <__fixunssfsi>
{
	static uint8_t timer_index = 0;
	uint8_t stop=0;
	arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);

	while (arr_size > 1000 && timer_index < 3)						// if the signal does not fit change the timer and try again
     324:	69 3e       	cpi	r22, 0xE9	; 233
     326:	83 e0       	ldi	r24, 0x03	; 3
     328:	78 07       	cpc	r23, r24
     32a:	18 f5       	brcc	.+70     	; 0x372 <change_size+0xf0>
     32c:	c0 93 74 04 	sts	0x0474, r28	; 0x800474 <__data_end>
     330:	c0 92 02 01 	sts	0x0102, r12	; 0x800102 <tim_set>
     334:	d0 92 03 01 	sts	0x0103, r13	; 0x800103 <tim_set+0x1>
     338:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <tim_set+0x2>
     33c:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <tim_set+0x3>
     340:	70 93 7e 04 	sts	0x047E, r23	; 0x80047e <arr_size+0x1>
     344:	60 93 7d 04 	sts	0x047D, r22	; 0x80047d <arr_size>
	{
		tim_set = timer_values[++timer_index];
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);
		stop=1;
     348:	21 e0       	ldi	r18, 0x01	; 1
     34a:	03 c0       	rjmp	.+6      	; 0x352 <change_size+0xd0>


void change_size()													// change the active frame buffer size to contain whole period
{
	static uint8_t timer_index = 0;
	uint8_t stop=0;
     34c:	20 e0       	ldi	r18, 0x00	; 0
     34e:	01 c0       	rjmp	.+2      	; 0x352 <change_size+0xd0>
     350:	20 e0       	ldi	r18, 0x00	; 0
		tim_set = timer_values[++timer_index];
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);
		stop=1;
	}

	while (arr_size < 255 && timer_index>0 && stop==0)				// if it fits and is small try increasing it by making the sampling frequency larger
     352:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <arr_size>
     356:	90 91 7e 04 	lds	r25, 0x047E	; 0x80047e <arr_size+0x1>
     35a:	8f 3f       	cpi	r24, 0xFF	; 255
     35c:	91 05       	cpc	r25, r1
     35e:	08 f0       	brcs	.+2      	; 0x362 <change_size+0xe0>
     360:	63 c0       	rjmp	.+198    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     362:	c0 91 74 04 	lds	r28, 0x0474	; 0x800474 <__data_end>
     366:	cc 23       	and	r28, r28
     368:	09 f4       	brne	.+2      	; 0x36c <change_size+0xea>
     36a:	66 c0       	rjmp	.+204    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     36c:	22 23       	and	r18, r18
     36e:	b1 f0       	breq	.+44     	; 0x39c <change_size+0x11a>
     370:	5b c0       	rjmp	.+182    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	8c 0f       	add	r24, r28
{
	static uint8_t timer_index = 0;
	uint8_t stop=0;
	arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);

	while (arr_size > 1000 && timer_index < 3)						// if the signal does not fit change the timer and try again
     376:	84 30       	cpi	r24, 0x04	; 4
     378:	09 f0       	breq	.+2      	; 0x37c <change_size+0xfa>
     37a:	b1 cf       	rjmp	.-158    	; 0x2de <change_size+0x5c>
     37c:	c0 93 74 04 	sts	0x0474, r28	; 0x800474 <__data_end>
     380:	c0 92 02 01 	sts	0x0102, r12	; 0x800102 <tim_set>
     384:	d0 92 03 01 	sts	0x0103, r13	; 0x800103 <tim_set+0x1>
     388:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <tim_set+0x2>
     38c:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <tim_set+0x3>
     390:	70 93 7e 04 	sts	0x047E, r23	; 0x80047e <arr_size+0x1>
     394:	60 93 7d 04 	sts	0x047D, r22	; 0x80047d <arr_size>
	{
		tim_set = timer_values[++timer_index];
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);
		stop=1;
     398:	21 e0       	ldi	r18, 0x01	; 1
     39a:	db cf       	rjmp	.-74     	; 0x352 <change_size+0xd0>
	}

	while (arr_size < 255 && timer_index>0 && stop==0)				// if it fits and is small try increasing it by making the sampling frequency larger
	{
		tim_set = timer_values[--timer_index];
     39c:	c1 50       	subi	r28, 0x01	; 1
     39e:	ec 2f       	mov	r30, r28
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	ee 0f       	add	r30, r30
     3a4:	ff 1f       	adc	r31, r31
     3a6:	ee 0f       	add	r30, r30
     3a8:	ff 1f       	adc	r31, r31
     3aa:	e1 5e       	subi	r30, 0xE1	; 225
     3ac:	fe 4f       	sbci	r31, 0xFE	; 254
     3ae:	c0 80       	ld	r12, Z
     3b0:	d1 80       	ldd	r13, Z+1	; 0x01
     3b2:	e2 80       	ldd	r14, Z+2	; 0x02
     3b4:	f3 80       	ldd	r15, Z+3	; 0x03
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);
     3b6:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <frequency>
     3ba:	70 91 08 01 	lds	r23, 0x0108	; 0x800108 <frequency+0x1>
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 b0 09 	call	0x1360	; 0x1360 <__floatunsisf>
     3c6:	9b 01       	movw	r18, r22
     3c8:	ac 01       	movw	r20, r24
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	70 e0       	ldi	r23, 0x00	; 0
     3ce:	80 e8       	ldi	r24, 0x80	; 128
     3d0:	9f e3       	ldi	r25, 0x3F	; 63
     3d2:	0e 94 0f 09 	call	0x121e	; 0x121e <__divsf3>
     3d6:	a7 01       	movw	r20, r14
     3d8:	96 01       	movw	r18, r12
     3da:	0e 94 0f 09 	call	0x121e	; 0x121e <__divsf3>
     3de:	0e 94 81 09 	call	0x1302	; 0x1302 <__fixunssfsi>
		tim_set = timer_values[++timer_index];
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);
		stop=1;
	}

	while (arr_size < 255 && timer_index>0 && stop==0)				// if it fits and is small try increasing it by making the sampling frequency larger
     3e2:	6f 3f       	cpi	r22, 0xFF	; 255
     3e4:	71 05       	cpc	r23, r1
     3e6:	78 f0       	brcs	.+30     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3e8:	c0 93 74 04 	sts	0x0474, r28	; 0x800474 <__data_end>
     3ec:	c0 92 02 01 	sts	0x0102, r12	; 0x800102 <tim_set>
     3f0:	d0 92 03 01 	sts	0x0103, r13	; 0x800103 <tim_set+0x1>
     3f4:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <tim_set+0x2>
     3f8:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <tim_set+0x3>
     3fc:	70 93 7e 04 	sts	0x047E, r23	; 0x80047e <arr_size+0x1>
     400:	60 93 7d 04 	sts	0x047D, r22	; 0x80047d <arr_size>
     404:	11 c0       	rjmp	.+34     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     406:	c1 11       	cpse	r28, r1
     408:	c9 cf       	rjmp	.-110    	; 0x39c <change_size+0x11a>
     40a:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <__data_end>
     40e:	c0 92 02 01 	sts	0x0102, r12	; 0x800102 <tim_set>
     412:	d0 92 03 01 	sts	0x0103, r13	; 0x800103 <tim_set+0x1>
     416:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <tim_set+0x2>
     41a:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <tim_set+0x3>
     41e:	70 93 7e 04 	sts	0x047E, r23	; 0x80047e <arr_size+0x1>
     422:	60 93 7d 04 	sts	0x047D, r22	; 0x80047d <arr_size>
     426:	08 c0       	rjmp	.+16     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
	{
		tim_set = timer_values[--timer_index];
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);
	}

	switch (timer_index)// Theoretical: can switch the timer ovf period to update frequency, this however changes sampling frequency, for which will the recon. filters on output not suffice
     428:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <__data_end>
     42c:	81 30       	cpi	r24, 0x01	; 1
     42e:	59 f0       	breq	.+22     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     430:	18 f0       	brcs	.+6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     432:	82 30       	cpi	r24, 0x02	; 2
     434:	79 f0       	breq	.+30     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     436:	14 c0       	rjmp	.+40     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
	{
		case 0:
		TIM0_overflow_16u();
     438:	85 b5       	in	r24, 0x25	; 37
     43a:	89 7f       	andi	r24, 0xF9	; 249
     43c:	85 bd       	out	0x25, r24	; 37
     43e:	85 b5       	in	r24, 0x25	; 37
     440:	81 60       	ori	r24, 0x01	; 1
     442:	85 bd       	out	0x25, r24	; 37
		break;
     444:	0d c0       	rjmp	.+26     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>

		case 1:
		TIM0_overflow_128u();
     446:	85 b5       	in	r24, 0x25	; 37
     448:	8a 7f       	andi	r24, 0xFA	; 250
     44a:	85 bd       	out	0x25, r24	; 37
     44c:	85 b5       	in	r24, 0x25	; 37
     44e:	82 60       	ori	r24, 0x02	; 2
     450:	85 bd       	out	0x25, r24	; 37
		break;
     452:	06 c0       	rjmp	.+12     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		case 2:
		TIM0_overflow_1m();
     454:	85 b5       	in	r24, 0x25	; 37
     456:	8b 7f       	andi	r24, 0xFB	; 251
     458:	85 bd       	out	0x25, r24	; 37
     45a:	85 b5       	in	r24, 0x25	; 37
     45c:	83 60       	ori	r24, 0x03	; 3
     45e:	85 bd       	out	0x25, r24	; 37
		break;
	}


}
     460:	cf 91       	pop	r28
     462:	ff 90       	pop	r15
     464:	ef 90       	pop	r14
     466:	df 90       	pop	r13
     468:	cf 90       	pop	r12
     46a:	08 95       	ret

0000046c <main>:
const float timer_values[] = { 16e-6,128e-6,1e-3 };		// settable timer ovf values

int main(void)
{

	change_size();
     46c:	0e 94 41 01 	call	0x282	; 0x282 <change_size>
	lcd_init(LCD_DISP_ON);
     470:	8c e0       	ldi	r24, 0x0C	; 12
     472:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_init>
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
     476:	87 e6       	ldi	r24, 0x67	; 103
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 65 08 	call	0x10ca	; 0x10ca <uart_init>
	update_disp(11,frequency,multiplier);
     47e:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <multiplier>
     482:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <frequency>
     486:	70 91 08 01 	lds	r23, 0x0108	; 0x800108 <frequency+0x1>
     48a:	8b e0       	ldi	r24, 0x0B	; 11
     48c:	0e 94 82 07 	call	0xf04	; 0xf04 <update_disp>
	DDRD = 0xFF;											// set D as output
     490:	8f ef       	ldi	r24, 0xFF	; 255
     492:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;											// set B as output
     494:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x07;											// set necesary C pins as output
     496:	87 e0       	ldi	r24, 0x07	; 7
     498:	87 b9       	out	0x07, r24	; 7

	generate_signal(frame_buffer, 1, frequency, tim_set,multiplier);	// init frame buffer with sine wave of frequency 1
     49a:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <multiplier>
     49e:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <frequency>
     4a2:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <frequency+0x1>
     4a6:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <tim_set>
     4aa:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <tim_set+0x1>
     4ae:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <tim_set+0x2>
     4b2:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <tim_set+0x3>
     4b6:	61 e0       	ldi	r22, 0x01	; 1
     4b8:	86 ec       	ldi	r24, 0xC6	; 198
     4ba:	94 e0       	ldi	r25, 0x04	; 4
     4bc:	0e 94 2f 04 	call	0x85e	; 0x85e <generate_signal>



	TIM0_overflow_16u();
     4c0:	85 b5       	in	r24, 0x25	; 37
     4c2:	89 7f       	andi	r24, 0xF9	; 249
     4c4:	85 bd       	out	0x25, r24	; 37
     4c6:	85 b5       	in	r24, 0x25	; 37
     4c8:	81 60       	ori	r24, 0x01	; 1
     4ca:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
     4cc:	ee e6       	ldi	r30, 0x6E	; 110
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	80 81       	ld	r24, Z
     4d2:	81 60       	ori	r24, 0x01	; 1
     4d4:	80 83       	st	Z, r24

	TIM2_overflow_1m();
     4d6:	e1 eb       	ldi	r30, 0xB1	; 177
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	80 81       	ld	r24, Z
     4dc:	8c 7f       	andi	r24, 0xFC	; 252
     4de:	80 83       	st	Z, r24
     4e0:	80 81       	ld	r24, Z
     4e2:	84 60       	ori	r24, 0x04	; 4
     4e4:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
     4e6:	e0 e7       	ldi	r30, 0x70	; 112
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	80 81       	ld	r24, Z
     4ec:	81 60       	ori	r24, 0x01	; 1
     4ee:	80 83       	st	Z, r24





	sei();													// Enable interrupt
     4f0:	78 94       	sei
     4f2:	ff cf       	rjmp	.-2      	; 0x4f2 <main+0x86>

000004f4 <decode_button>:

}


void decode_button(void)									// decodes which button has been pressed and updates variables the button changes
{
     4f4:	ef 92       	push	r14
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
	static uint8_t accum=0;									//accum variable for variable speed setting for frequency
	static uint8_t prev_type=255;							// for locking frequency button
	uint8_t step=accum/4+1;
	
	
	if (butt > 0)											// change anything and recalculate signal only when changing params (button was pressed)
     4fc:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <butt>
     500:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <butt+0x1>
     504:	00 97       	sbiw	r24, 0x00	; 0
     506:	09 f4       	brne	.+2      	; 0x50a <decode_button+0x16>
     508:	e8 c0       	rjmp	.+464    	; 0x6da <decode_button+0x1e6>
	uint8_t temp = 0;
	static uint8_t type = 11;								//default setting (on start generate sinewave)
	static uint8_t Func =0;
	static uint8_t accum=0;									//accum variable for variable speed setting for frequency
	static uint8_t prev_type=255;							// for locking frequency button
	uint8_t step=accum/4+1;
     50a:	20 91 76 04 	lds	r18, 0x0476	; 0x800476 <accum.2144>
     50e:	26 95       	lsr	r18
     510:	26 95       	lsr	r18
     512:	31 e0       	ldi	r19, 0x01	; 1
     514:	32 0f       	add	r19, r18
	
	if (butt > 0)											// change anything and recalculate signal only when changing params (button was pressed)
	{
		
		
		while ((butt & 0x0001) == 0)						// find the button position
     516:	80 fd       	sbrc	r24, 0
     518:	ed c0       	rjmp	.+474    	; 0x6f4 <decode_button+0x200>
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	01 c0       	rjmp	.+2      	; 0x520 <decode_button+0x2c>
		{
			temp++;
     51e:	2c 2f       	mov	r18, r28
     520:	c1 e0       	ldi	r28, 0x01	; 1
     522:	c2 0f       	add	r28, r18
			butt = butt >> 1;
     524:	96 95       	lsr	r25
     526:	87 95       	ror	r24
	
	if (butt > 0)											// change anything and recalculate signal only when changing params (button was pressed)
	{
		
		
		while ((butt & 0x0001) == 0)						// find the button position
     528:	80 ff       	sbrs	r24, 0
     52a:	f9 cf       	rjmp	.-14     	; 0x51e <decode_button+0x2a>
     52c:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <butt+0x1>
     530:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <butt>
			butt = butt >> 1;
		}
		
		
		
		if (temp == 0 || temp == 8 ||temp==4)
     534:	cc 23       	and	r28, r28
     536:	09 f4       	brne	.+2      	; 0x53a <decode_button+0x46>
     538:	d6 c0       	rjmp	.+428    	; 0x6e6 <decode_button+0x1f2>
     53a:	2b 7f       	andi	r18, 0xFB	; 251
     53c:	23 30       	cpi	r18, 0x03	; 3
     53e:	09 f0       	breq	.+2      	; 0x542 <decode_button+0x4e>
     540:	6e c0       	rjmp	.+220    	; 0x61e <decode_button+0x12a>
     542:	df c0       	rjmp	.+446    	; 0x702 <decode_button+0x20e>
		{
			if(Func==0)										// if func button is not pressed change frequency
     544:	c0 e0       	ldi	r28, 0x00	; 0
				
					
				
				
				
				if (temp == 0 && (frequency+step) <= 2000)
     546:	83 2f       	mov	r24, r19
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <frequency>
     54e:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <frequency+0x1>
     552:	28 0f       	add	r18, r24
     554:	39 1f       	adc	r19, r25
     556:	21 3d       	cpi	r18, 0xD1	; 209
     558:	37 40       	sbci	r19, 0x07	; 7
     55a:	58 f4       	brcc	.+22     	; 0x572 <decode_button+0x7e>
				{
					
					frequency+=step;
     55c:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <frequency>
     560:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <frequency+0x1>
     564:	82 0f       	add	r24, r18
     566:	93 1f       	adc	r25, r19
     568:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <frequency+0x1>
     56c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <frequency>
     570:	59 c0       	rjmp	.+178    	; 0x624 <decode_button+0x130>
				}
				else if(temp == 0 && (frequency+step) > 2000)
     572:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <frequency>
     576:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <frequency+0x1>
     57a:	82 0f       	add	r24, r18
     57c:	93 1f       	adc	r25, r19
     57e:	81 3d       	cpi	r24, 0xD1	; 209
     580:	97 40       	sbci	r25, 0x07	; 7
     582:	08 f4       	brcc	.+2      	; 0x586 <decode_button+0x92>
     584:	4f c0       	rjmp	.+158    	; 0x624 <decode_button+0x130>
				{
					frequency=2000;
     586:	80 ed       	ldi	r24, 0xD0	; 208
     588:	97 e0       	ldi	r25, 0x07	; 7
     58a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <frequency+0x1>
     58e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <frequency>
     592:	48 c0       	rjmp	.+144    	; 0x624 <decode_button+0x130>
				}

				if (temp == 8 && (frequency-step) >= 100)
     594:	c8 30       	cpi	r28, 0x08	; 8
     596:	09 f0       	breq	.+2      	; 0x59a <decode_button+0xa6>
     598:	45 c0       	rjmp	.+138    	; 0x624 <decode_button+0x130>
     59a:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <frequency>
     59e:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <frequency+0x1>
     5a2:	83 2f       	mov	r24, r19
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	9a 01       	movw	r18, r20
     5a8:	28 1b       	sub	r18, r24
     5aa:	39 0b       	sbc	r19, r25
     5ac:	24 36       	cpi	r18, 0x64	; 100
     5ae:	31 05       	cpc	r19, r1
     5b0:	60 f0       	brcs	.+24     	; 0x5ca <decode_button+0xd6>
				{
					frequency-=step;
     5b2:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <frequency>
     5b6:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <frequency+0x1>
     5ba:	a9 01       	movw	r20, r18
     5bc:	48 1b       	sub	r20, r24
     5be:	59 0b       	sbc	r21, r25
     5c0:	50 93 08 01 	sts	0x0108, r21	; 0x800108 <frequency+0x1>
     5c4:	40 93 07 01 	sts	0x0107, r20	; 0x800107 <frequency>
     5c8:	3a c0       	rjmp	.+116    	; 0x63e <decode_button+0x14a>
				}
				else if(temp == 8 && (frequency-step) < 100)
     5ca:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <frequency>
     5ce:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <frequency+0x1>
     5d2:	a9 01       	movw	r20, r18
     5d4:	48 1b       	sub	r20, r24
     5d6:	59 0b       	sbc	r21, r25
     5d8:	44 36       	cpi	r20, 0x64	; 100
     5da:	51 05       	cpc	r21, r1
     5dc:	80 f5       	brcc	.+96     	; 0x63e <decode_button+0x14a>
				{
					frequency=100;
     5de:	84 e6       	ldi	r24, 0x64	; 100
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <frequency+0x1>
     5e6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <frequency>
     5ea:	29 c0       	rjmp	.+82     	; 0x63e <decode_button+0x14a>
			}
			else
			{

				
				if (temp == 0 && multiplier < 5)			// if F button has been pressed change the DTMF multiplier
     5ec:	c1 11       	cpse	r28, r1
     5ee:	0b c0       	rjmp	.+22     	; 0x606 <decode_button+0x112>
     5f0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <multiplier>
     5f4:	85 30       	cpi	r24, 0x05	; 5
     5f6:	08 f0       	brcs	.+2      	; 0x5fa <decode_button+0x106>
     5f8:	7b c0       	rjmp	.+246    	; 0x6f0 <decode_button+0x1fc>
				{
					multiplier++;
     5fa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <multiplier>
     5fe:	8f 5f       	subi	r24, 0xFF	; 255
     600:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <multiplier>
     604:	75 c0       	rjmp	.+234    	; 0x6f0 <decode_button+0x1fc>
				}

				if (temp == 8 && multiplier > 1)
     606:	c8 30       	cpi	r28, 0x08	; 8
     608:	69 f4       	brne	.+26     	; 0x624 <decode_button+0x130>
     60a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <multiplier>
     60e:	82 30       	cpi	r24, 0x02	; 2
     610:	b0 f0       	brcs	.+44     	; 0x63e <decode_button+0x14a>
				{
					multiplier--;
     612:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <multiplier>
     616:	81 50       	subi	r24, 0x01	; 1
     618:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <multiplier>
     61c:	10 c0       	rjmp	.+32     	; 0x63e <decode_button+0x14a>
				}
			}
		}
		else
		{
			type = temp;
     61e:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <type.2142>
     622:	0d c0       	rjmp	.+26     	; 0x63e <decode_button+0x14a>
		}
		
		
		if(temp==4)											// if F button pressed 
     624:	c4 30       	cpi	r28, 0x04	; 4
     626:	59 f4       	brne	.+22     	; 0x63e <decode_button+0x14a>
		{
			if( prev_type!=4)								// if it is not beeing pushed down
     628:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     62c:	84 30       	cpi	r24, 0x04	; 4
     62e:	79 f1       	breq	.+94     	; 0x68e <decode_button+0x19a>
			Func^=0x01;	
     630:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <Func.2143>
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	89 27       	eor	r24, r25
     638:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <Func.2143>
     63c:	28 c0       	rjmp	.+80     	; 0x68e <decode_button+0x19a>
			
			
		}
		else
		{
			change_size();
     63e:	0e 94 41 01 	call	0x282	; 0x282 <change_size>
			
			generate_signal(frame_buffer, type, frequency, tim_set,multiplier); 
     642:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <multiplier>
     646:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <frequency>
     64a:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <frequency+0x1>
     64e:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <tim_set>
     652:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <tim_set+0x1>
     656:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <tim_set+0x2>
     65a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <tim_set+0x3>
     65e:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <type.2142>
     662:	86 ec       	ldi	r24, 0xC6	; 198
     664:	94 e0       	ldi	r25, 0x04	; 4
     666:	0e 94 2f 04 	call	0x85e	; 0x85e <generate_signal>
			
			update_disp(type,frequency,multiplier);
     66a:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <multiplier>
     66e:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <frequency>
     672:	70 91 08 01 	lds	r23, 0x0108	; 0x800108 <frequency+0x1>
     676:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <type.2142>
     67a:	0e 94 82 07 	call	0xf04	; 0xf04 <update_disp>
			
			send_uart(type,frequency);
     67e:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <frequency>
     682:	70 91 08 01 	lds	r23, 0x0108	; 0x800108 <frequency+0x1>
     686:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <type.2142>
     68a:	0e 94 40 07 	call	0xe80	; 0xe80 <send_uart>
		}
		
		if(Func>0)											// display status of function button onto display
     68e:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <Func.2143>
     692:	88 23       	and	r24, r24
     694:	49 f0       	breq	.+18     	; 0x6a8 <decode_button+0x1b4>
		{
			lcd_gotoxy(14,1);
     696:	61 e0       	ldi	r22, 0x01	; 1
     698:	8e e0       	ldi	r24, 0x0E	; 14
     69a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_gotoxy>
			lcd_puts(" F");
     69e:	8c e1       	ldi	r24, 0x1C	; 28
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
     6a6:	08 c0       	rjmp	.+16     	; 0x6b8 <decode_button+0x1c4>
		}
		else
		{
			lcd_gotoxy(14,1);
     6a8:	61 e0       	ldi	r22, 0x01	; 1
     6aa:	8e e0       	ldi	r24, 0x0E	; 14
     6ac:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_gotoxy>
			lcd_puts("  ");
     6b0:	8a e6       	ldi	r24, 0x6A	; 106
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
		}
		
		if(temp==prev_type) 
     6b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     6bc:	8c 13       	cpse	r24, r28
     6be:	08 c0       	rjmp	.+16     	; 0x6d0 <decode_button+0x1dc>
		{
			if(accum<240)
     6c0:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <accum.2144>
     6c4:	80 3f       	cpi	r24, 0xF0	; 240
     6c6:	18 f5       	brcc	.+70     	; 0x70e <decode_button+0x21a>
			accum++;
     6c8:	8f 5f       	subi	r24, 0xFF	; 255
     6ca:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <accum.2144>
     6ce:	1f c0       	rjmp	.+62     	; 0x70e <decode_button+0x21a>
		}
		else
		{
			
			accum=0;
     6d0:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <accum.2144>
			prev_type=temp;
     6d4:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
     6d8:	1a c0       	rjmp	.+52     	; 0x70e <decode_button+0x21a>
		}

	}
	else
	{
		accum=0;
     6da:	10 92 76 04 	sts	0x0476, r1	; 0x800476 <accum.2144>
		prev_type=255;
     6de:	8f ef       	ldi	r24, 0xFF	; 255
     6e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}

}
     6e4:	14 c0       	rjmp	.+40     	; 0x70e <decode_button+0x21a>
		
		
		
		if (temp == 0 || temp == 8 ||temp==4)
		{
			if(Func==0)										// if func button is not pressed change frequency
     6e6:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <Func.2143>
     6ea:	81 11       	cpse	r24, r1
     6ec:	81 cf       	rjmp	.-254    	; 0x5f0 <decode_button+0xfc>
     6ee:	2b cf       	rjmp	.-426    	; 0x546 <decode_button+0x52>
     6f0:	c0 e0       	ldi	r28, 0x00	; 0
     6f2:	a5 cf       	rjmp	.-182    	; 0x63e <decode_button+0x14a>
     6f4:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <Func.2143>
     6f8:	88 23       	and	r24, r24
     6fa:	09 f4       	brne	.+2      	; 0x6fe <decode_button+0x20a>
     6fc:	23 cf       	rjmp	.-442    	; 0x544 <decode_button+0x50>
     6fe:	c0 e0       	ldi	r28, 0x00	; 0
     700:	75 cf       	rjmp	.-278    	; 0x5ec <decode_button+0xf8>
     702:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <Func.2143>
     706:	88 23       	and	r24, r24
     708:	09 f4       	brne	.+2      	; 0x70c <decode_button+0x218>
     70a:	44 cf       	rjmp	.-376    	; 0x594 <decode_button+0xa0>
     70c:	6f cf       	rjmp	.-290    	; 0x5ec <decode_button+0xf8>
	{
		accum=0;
		prev_type=255;
	}

}
     70e:	cf 91       	pop	r28
     710:	1f 91       	pop	r17
     712:	0f 91       	pop	r16
     714:	ef 90       	pop	r14
     716:	08 95       	ret

00000718 <__vector_9>:
	PORTB = frame_buffer[index];				// output the data

}

ISR(TIMER2_OVF_vect)
{
     718:	1f 92       	push	r1
     71a:	0f 92       	push	r0
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	0f 92       	push	r0
     720:	11 24       	eor	r1, r1
     722:	2f 93       	push	r18
     724:	3f 93       	push	r19
     726:	4f 93       	push	r20
     728:	5f 93       	push	r21
     72a:	6f 93       	push	r22
     72c:	7f 93       	push	r23
     72e:	8f 93       	push	r24
     730:	9f 93       	push	r25
     732:	af 93       	push	r26
     734:	bf 93       	push	r27
     736:	ef 93       	push	r30
     738:	ff 93       	push	r31
	static uint8_t ind = 0;						// indexing variable in columns
	uint16_t temp = 0;							// temporary variable for extracting button pressed
	static uint16_t debounce_reg = 0;			// debouncing register (stores value and outputs after desired period)
	
	static uint8_t ovf = 0;
	uint16_t  debounce_temp = debounce_reg;		// temporary debouncer to check if values have changed
     73a:	20 91 79 04 	lds	r18, 0x0479	; 0x800479 <debounce_reg.2131>
     73e:	30 91 7a 04 	lds	r19, 0x047A	; 0x80047a <debounce_reg.2131+0x1>

	ind++;
     742:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <ind.2129>
     746:	8f 5f       	subi	r24, 0xFF	; 255
     748:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <ind.2129>

	if (ind < 3)								// sweep through columns
     74c:	83 30       	cpi	r24, 0x03	; 3
     74e:	80 f4       	brcc	.+32     	; 0x770 <__vector_9+0x58>
	{

		PORTC &= 0xF8;
     750:	88 b1       	in	r24, 0x08	; 8
     752:	88 7f       	andi	r24, 0xF8	; 248
     754:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << ind);
     756:	48 b1       	in	r20, 0x08	; 8
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	00 90 78 04 	lds	r0, 0x0478	; 0x800478 <ind.2129>
     760:	02 c0       	rjmp	.+4      	; 0x766 <__vector_9+0x4e>
     762:	88 0f       	add	r24, r24
     764:	99 1f       	adc	r25, r25
     766:	0a 94       	dec	r0
     768:	e2 f7       	brpl	.-8      	; 0x762 <__vector_9+0x4a>
     76a:	84 2b       	or	r24, r20
     76c:	88 b9       	out	0x08, r24	; 8
     76e:	11 c0       	rjmp	.+34     	; 0x792 <__vector_9+0x7a>

	}
	else
	{

		ind = 0;
     770:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <ind.2129>
		PORTC &= 0xF8;
     774:	88 b1       	in	r24, 0x08	; 8
     776:	88 7f       	andi	r24, 0xF8	; 248
     778:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << ind);
     77a:	48 b1       	in	r20, 0x08	; 8
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	00 90 78 04 	lds	r0, 0x0478	; 0x800478 <ind.2129>
     784:	02 c0       	rjmp	.+4      	; 0x78a <__vector_9+0x72>
     786:	88 0f       	add	r24, r24
     788:	99 1f       	adc	r25, r25
     78a:	0a 94       	dec	r0
     78c:	e2 f7       	brpl	.-8      	; 0x786 <__vector_9+0x6e>
     78e:	84 2b       	or	r24, r20
     790:	88 b9       	out	0x08, r24	; 8
	}

	switch (ind)								// extract button pressed and update debounce register
     792:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <ind.2129>
     796:	81 30       	cpi	r24, 0x01	; 1
     798:	c9 f0       	breq	.+50     	; 0x7cc <__vector_9+0xb4>
     79a:	18 f0       	brcs	.+6      	; 0x7a2 <__vector_9+0x8a>
     79c:	82 30       	cpi	r24, 0x02	; 2
     79e:	39 f1       	breq	.+78     	; 0x7ee <__vector_9+0xd6>
     7a0:	37 c0       	rjmp	.+110    	; 0x810 <__vector_9+0xf8>
	{
		case 0:
		temp = PINC & 0b01111000;				// take the connected pins to 4x3 keypad
     7a2:	86 b1       	in	r24, 0x06	; 6
     7a4:	88 77       	andi	r24, 0x78	; 120
     7a6:	90 e0       	ldi	r25, 0x00	; 0
		temp = temp >> 3;						// shift to the beggining
		debounce_reg &= 0xFFF0;					// update the debounce register (zero out the current nibble)
		debounce_reg |= temp;					// update the current nibble
     7a8:	40 91 79 04 	lds	r20, 0x0479	; 0x800479 <debounce_reg.2131>
     7ac:	50 91 7a 04 	lds	r21, 0x047A	; 0x80047a <debounce_reg.2131+0x1>
     7b0:	40 7f       	andi	r20, 0xF0	; 240
     7b2:	96 95       	lsr	r25
     7b4:	87 95       	ror	r24
     7b6:	96 95       	lsr	r25
     7b8:	87 95       	ror	r24
     7ba:	96 95       	lsr	r25
     7bc:	87 95       	ror	r24
     7be:	84 2b       	or	r24, r20
     7c0:	95 2b       	or	r25, r21
     7c2:	90 93 7a 04 	sts	0x047A, r25	; 0x80047a <debounce_reg.2131+0x1>
     7c6:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <debounce_reg.2131>
		break;
     7ca:	22 c0       	rjmp	.+68     	; 0x810 <__vector_9+0xf8>

		case 1:
		temp = PINC & 0b01111000;
     7cc:	86 b1       	in	r24, 0x06	; 6
     7ce:	88 77       	andi	r24, 0x78	; 120
     7d0:	90 e0       	ldi	r25, 0x00	; 0
		temp = temp << 1;
		debounce_reg &= 0xFF0F;
		debounce_reg |= temp;
     7d2:	40 91 79 04 	lds	r20, 0x0479	; 0x800479 <debounce_reg.2131>
     7d6:	50 91 7a 04 	lds	r21, 0x047A	; 0x80047a <debounce_reg.2131+0x1>
     7da:	4f 70       	andi	r20, 0x0F	; 15
     7dc:	88 0f       	add	r24, r24
     7de:	99 1f       	adc	r25, r25
     7e0:	84 2b       	or	r24, r20
     7e2:	95 2b       	or	r25, r21
     7e4:	90 93 7a 04 	sts	0x047A, r25	; 0x80047a <debounce_reg.2131+0x1>
     7e8:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <debounce_reg.2131>
		break;
     7ec:	11 c0       	rjmp	.+34     	; 0x810 <__vector_9+0xf8>

		case 2:
		temp = PINC & 0b01111000;
     7ee:	46 b1       	in	r20, 0x06	; 6
     7f0:	48 77       	andi	r20, 0x78	; 120
		temp = temp << 5;
		debounce_reg &= 0xF0FF;
		debounce_reg |= temp;
     7f2:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <debounce_reg.2131>
     7f6:	90 91 7a 04 	lds	r25, 0x047A	; 0x80047a <debounce_reg.2131+0x1>
     7fa:	90 7f       	andi	r25, 0xF0	; 240
     7fc:	60 e2       	ldi	r22, 0x20	; 32
     7fe:	46 9f       	mul	r20, r22
     800:	a0 01       	movw	r20, r0
     802:	11 24       	eor	r1, r1
     804:	84 2b       	or	r24, r20
     806:	95 2b       	or	r25, r21
     808:	90 93 7a 04 	sts	0x047A, r25	; 0x80047a <debounce_reg.2131+0x1>
     80c:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <debounce_reg.2131>
		break;


	}

	ovf++;
     810:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <ovf.2132>
     814:	8f 5f       	subi	r24, 0xFF	; 255
     816:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <ovf.2132>

	if (ovf > 50 && debounce_reg == debounce_temp) // output debounced values if time has come and button values are stable
     81a:	83 33       	cpi	r24, 0x33	; 51
     81c:	78 f0       	brcs	.+30     	; 0x83c <__vector_9+0x124>
     81e:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <debounce_reg.2131>
     822:	90 91 7a 04 	lds	r25, 0x047A	; 0x80047a <debounce_reg.2131+0x1>
     826:	28 17       	cp	r18, r24
     828:	39 07       	cpc	r19, r25
     82a:	41 f4       	brne	.+16     	; 0x83c <__vector_9+0x124>
	{
		butt = debounce_reg;
     82c:	30 93 80 04 	sts	0x0480, r19	; 0x800480 <butt+0x1>
     830:	20 93 7f 04 	sts	0x047F, r18	; 0x80047f <butt>
		ovf = 0;
     834:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <ovf.2132>
		decode_button();
     838:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <decode_button>
	}




}
     83c:	ff 91       	pop	r31
     83e:	ef 91       	pop	r30
     840:	bf 91       	pop	r27
     842:	af 91       	pop	r26
     844:	9f 91       	pop	r25
     846:	8f 91       	pop	r24
     848:	7f 91       	pop	r23
     84a:	6f 91       	pop	r22
     84c:	5f 91       	pop	r21
     84e:	4f 91       	pop	r20
     850:	3f 91       	pop	r19
     852:	2f 91       	pop	r18
     854:	0f 90       	pop	r0
     856:	0f be       	out	0x3f, r0	; 63
     858:	0f 90       	pop	r0
     85a:	1f 90       	pop	r1
     85c:	18 95       	reti

0000085e <generate_signal>:
};



void generate_signal(uint8_t* frame_buffer, uint8_t type, uint16_t freq,float tim_set,uint8_t multiplier)
{
     85e:	4f 92       	push	r4
     860:	5f 92       	push	r5
     862:	6f 92       	push	r6
     864:	7f 92       	push	r7
     866:	8f 92       	push	r8
     868:	9f 92       	push	r9
     86a:	af 92       	push	r10
     86c:	bf 92       	push	r11
     86e:	cf 92       	push	r12
     870:	df 92       	push	r13
     872:	ef 92       	push	r14
     874:	ff 92       	push	r15
     876:	0f 93       	push	r16
     878:	1f 93       	push	r17
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	00 d0       	rcall	.+0      	; 0x880 <generate_signal+0x22>
     880:	00 d0       	rcall	.+0      	; 0x882 <generate_signal+0x24>
     882:	00 d0       	rcall	.+0      	; 0x884 <generate_signal+0x26>
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
     888:	9e 83       	std	Y+6, r25	; 0x06
     88a:	8d 83       	std	Y+5, r24	; 0x05
     88c:	48 01       	movw	r8, r16
     88e:	59 01       	movw	r10, r18
	
	
	type=type_map[type-1];										// find which button has been pressed
     890:	c6 2e       	mov	r12, r22
     892:	d1 2c       	mov	r13, r1
     894:	61 e0       	ldi	r22, 0x01	; 1
     896:	c6 1a       	sub	r12, r22
     898:	d1 08       	sbc	r13, r1
	
	
	uint16_t arr_length= (uint16_t)(((1/(float)freq))/tim_set);	// calculate required array length to accomodate full period
     89a:	ba 01       	movw	r22, r20
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0e 94 b0 09 	call	0x1360	; 0x1360 <__floatunsisf>
     8a4:	9b 01       	movw	r18, r22
     8a6:	ac 01       	movw	r20, r24
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	80 e8       	ldi	r24, 0x80	; 128
     8ae:	9f e3       	ldi	r25, 0x3F	; 63
     8b0:	0e 94 0f 09 	call	0x121e	; 0x121e <__divsf3>
     8b4:	a5 01       	movw	r20, r10
     8b6:	94 01       	movw	r18, r8
     8b8:	0e 94 0f 09 	call	0x121e	; 0x121e <__divsf3>
     8bc:	0e 94 81 09 	call	0x1302	; 0x1302 <__fixunssfsi>
     8c0:	8b 01       	movw	r16, r22
     8c2:	09 3e       	cpi	r16, 0xE9	; 233
     8c4:	73 e0       	ldi	r23, 0x03	; 3
     8c6:	17 07       	cpc	r17, r23
     8c8:	10 f0       	brcs	.+4      	; 0x8ce <generate_signal+0x70>
     8ca:	08 ee       	ldi	r16, 0xE8	; 232
     8cc:	13 e0       	ldi	r17, 0x03	; 3

void generate_signal(uint8_t* frame_buffer, uint8_t type, uint16_t freq,float tim_set,uint8_t multiplier)
{
	
	
	type=type_map[type-1];										// find which button has been pressed
     8ce:	f6 01       	movw	r30, r12
     8d0:	e7 59       	subi	r30, 0x97	; 151
     8d2:	fb 4f       	sbci	r31, 0xFB	; 251
	
	if(arr_length>1000)											// in case the array_length would exceed the frame_buffer size cap it, when using this fcn correctly it should not happen though
	arr_length=1000;
	
	
	switch (type)												// which type of function to generate
     8d4:	e0 81       	ld	r30, Z
     8d6:	8e 2f       	mov	r24, r30
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	fc 01       	movw	r30, r24
     8dc:	31 97       	sbiw	r30, 0x01	; 1
     8de:	e9 30       	cpi	r30, 0x09	; 9
     8e0:	f1 05       	cpc	r31, r1
     8e2:	08 f0       	brcs	.+2      	; 0x8e6 <generate_signal+0x88>
     8e4:	23 c2       	rjmp	.+1094   	; 0xd2c <__stack+0x42d>
     8e6:	ec 5c       	subi	r30, 0xCC	; 204
     8e8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ea:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <__tablejump2__>
		}
		break;
		
		
		case 9: // DTMF
		for(uint16_t i=0; i<arr_length;i++)
     8ee:	01 15       	cp	r16, r1
     8f0:	11 05       	cpc	r17, r1
     8f2:	09 f0       	breq	.+2      	; 0x8f6 <generate_signal+0x98>
     8f4:	c0 c1       	rjmp	.+896    	; 0xc76 <__stack+0x377>
     8f6:	1a c2       	rjmp	.+1076   	; 0xd2c <__stack+0x42d>
			frame_buffer++;
		}
		break;
		
		case 8: // Ecg
		for(uint16_t i=0; i<arr_length;i++)
     8f8:	01 15       	cp	r16, r1
     8fa:	11 05       	cpc	r17, r1
     8fc:	09 f0       	breq	.+2      	; 0x900 <__stack+0x1>
     8fe:	8d c1       	rjmp	.+794    	; 0xc1a <__stack+0x31b>
     900:	15 c2       	rjmp	.+1066   	; 0xd2c <__stack+0x42d>
			frame_buffer++;
		}
		break;
		
		case 7: // Halfwave Rectified
		for(uint16_t i=0; i<arr_length;i++)
     902:	01 15       	cp	r16, r1
     904:	11 05       	cpc	r17, r1
     906:	09 f0       	breq	.+2      	; 0x90a <__stack+0xb>
     908:	4c c1       	rjmp	.+664    	; 0xba2 <__stack+0x2a3>
     90a:	10 c2       	rjmp	.+1056   	; 0xd2c <__stack+0x42d>
			frame_buffer++;
		}
		break;
		
		case 6: //Fullwave Rectified
		for(uint16_t i=0; i<arr_length;i++)
     90c:	01 15       	cp	r16, r1
     90e:	11 05       	cpc	r17, r1
     910:	09 f0       	breq	.+2      	; 0x914 <__stack+0x15>
     912:	18 c1       	rjmp	.+560    	; 0xb44 <__stack+0x245>
     914:	0b c2       	rjmp	.+1046   	; 0xd2c <__stack+0x42d>
			frame_buffer++;
		}
		break;
		
		case 5: // triangle
		for(uint16_t i=0; i<arr_length;i++)
     916:	01 15       	cp	r16, r1
     918:	11 05       	cpc	r17, r1
     91a:	09 f0       	breq	.+2      	; 0x91e <__stack+0x1f>
     91c:	b7 c0       	rjmp	.+366    	; 0xa8c <__stack+0x18d>
     91e:	06 c2       	rjmp	.+1036   	; 0xd2c <__stack+0x42d>
			frame_buffer++;
		}
		break;
		
		case 4: // Square wave
		for(uint16_t i=0; i<arr_length;i++)
     920:	01 15       	cp	r16, r1
     922:	11 05       	cpc	r17, r1
     924:	09 f0       	breq	.+2      	; 0x928 <__stack+0x29>
     926:	98 c0       	rjmp	.+304    	; 0xa58 <__stack+0x159>
     928:	01 c2       	rjmp	.+1026   	; 0xd2c <__stack+0x42d>
			frame_buffer++;
		}
		break;
		
		case 3: // negative ramp
		for(uint16_t i=0; i<arr_length;i++)
     92a:	01 15       	cp	r16, r1
     92c:	11 05       	cpc	r17, r1
     92e:	09 f0       	breq	.+2      	; 0x932 <__stack+0x33>
     930:	61 c0       	rjmp	.+194    	; 0x9f4 <__stack+0xf5>
     932:	fc c1       	rjmp	.+1016   	; 0xd2c <__stack+0x42d>
		}
		break;
		
		
		case 2: // positive ramp
		for(uint16_t i=0; i<arr_length;i++)
     934:	01 15       	cp	r16, r1
     936:	11 05       	cpc	r17, r1
     938:	99 f5       	brne	.+102    	; 0x9a0 <__stack+0xa1>
     93a:	f8 c1       	rjmp	.+1008   	; 0xd2c <__stack+0x42d>
	
	
	switch (type)												// which type of function to generate
	{
		case 1: // sin function
		for(uint16_t i=0; i<arr_length;i++)
     93c:	01 15       	cp	r16, r1
     93e:	11 05       	cpc	r17, r1
     940:	09 f4       	brne	.+2      	; 0x944 <__stack+0x45>
     942:	f4 c1       	rjmp	.+1000   	; 0xd2c <__stack+0x42d>
     944:	e1 2c       	mov	r14, r1
     946:	f1 2c       	mov	r15, r1
		{
			*frame_buffer=lookup_sine[(uint16_t)((float)i/(float)arr_length*511.0)];	// put point from LUT at position in frame buffer
     948:	48 01       	movw	r8, r16
     94a:	a1 2c       	mov	r10, r1
     94c:	b1 2c       	mov	r11, r1
     94e:	b7 01       	movw	r22, r14
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	0e 94 b0 09 	call	0x1360	; 0x1360 <__floatunsisf>
     958:	2b 01       	movw	r4, r22
     95a:	3c 01       	movw	r6, r24
     95c:	c5 01       	movw	r24, r10
     95e:	b4 01       	movw	r22, r8
     960:	0e 94 b0 09 	call	0x1360	; 0x1360 <__floatunsisf>
     964:	9b 01       	movw	r18, r22
     966:	ac 01       	movw	r20, r24
     968:	c3 01       	movw	r24, r6
     96a:	b2 01       	movw	r22, r4
     96c:	0e 94 0f 09 	call	0x121e	; 0x121e <__divsf3>
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	30 e8       	ldi	r19, 0x80	; 128
     974:	4f ef       	ldi	r20, 0xFF	; 255
     976:	53 e4       	ldi	r21, 0x43	; 67
     978:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3>
     97c:	0e 94 81 09 	call	0x1302	; 0x1302 <__fixunssfsi>
     980:	fb 01       	movw	r30, r22
     982:	e7 59       	subi	r30, 0x97	; 151
     984:	fd 4f       	sbci	r31, 0xFD	; 253
     986:	80 81       	ld	r24, Z
     988:	ad 81       	ldd	r26, Y+5	; 0x05
     98a:	be 81       	ldd	r27, Y+6	; 0x06
     98c:	8d 93       	st	X+, r24
     98e:	be 83       	std	Y+6, r27	; 0x06
     990:	ad 83       	std	Y+5, r26	; 0x05
	
	
	switch (type)												// which type of function to generate
	{
		case 1: // sin function
		for(uint16_t i=0; i<arr_length;i++)
     992:	bf ef       	ldi	r27, 0xFF	; 255
     994:	eb 1a       	sub	r14, r27
     996:	fb 0a       	sbc	r15, r27
     998:	e0 16       	cp	r14, r16
     99a:	f1 06       	cpc	r15, r17
     99c:	c1 f6       	brne	.-80     	; 0x94e <__stack+0x4f>
     99e:	c6 c1       	rjmp	.+908    	; 0xd2c <__stack+0x42d>
		}
		break;
		
		
		case 2: // positive ramp
		for(uint16_t i=0; i<arr_length;i++)
     9a0:	e1 2c       	mov	r14, r1
     9a2:	f1 2c       	mov	r15, r1
		{
			
			*frame_buffer=(uint8_t)((float)i/arr_length*255);
     9a4:	48 01       	movw	r8, r16
     9a6:	a1 2c       	mov	r10, r1
     9a8:	b1 2c       	mov	r11, r1
     9aa:	b7 01       	movw	r22, r14
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 b0 09 	call	0x1360	; 0x1360 <__floatunsisf>
     9b4:	2b 01       	movw	r4, r22
     9b6:	3c 01       	movw	r6, r24
     9b8:	c5 01       	movw	r24, r10
     9ba:	b4 01       	movw	r22, r8
     9bc:	0e 94 b0 09 	call	0x1360	; 0x1360 <__floatunsisf>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	c3 01       	movw	r24, r6
     9c6:	b2 01       	movw	r22, r4
     9c8:	0e 94 0f 09 	call	0x121e	; 0x121e <__divsf3>
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	4f e7       	ldi	r20, 0x7F	; 127
     9d2:	53 e4       	ldi	r21, 0x43	; 67
     9d4:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3>
     9d8:	0e 94 81 09 	call	0x1302	; 0x1302 <__fixunssfsi>
     9dc:	ed 81       	ldd	r30, Y+5	; 0x05
     9de:	fe 81       	ldd	r31, Y+6	; 0x06
     9e0:	61 93       	st	Z+, r22
     9e2:	fe 83       	std	Y+6, r31	; 0x06
     9e4:	ed 83       	std	Y+5, r30	; 0x05
		}
		break;
		
		
		case 2: // positive ramp
		for(uint16_t i=0; i<arr_length;i++)
     9e6:	ff ef       	ldi	r31, 0xFF	; 255
     9e8:	ef 1a       	sub	r14, r31
     9ea:	ff 0a       	sbc	r15, r31
     9ec:	e0 16       	cp	r14, r16
     9ee:	f1 06       	cpc	r15, r17
     9f0:	e1 f6       	brne	.-72     	; 0x9aa <__stack+0xab>
     9f2:	9c c1       	rjmp	.+824    	; 0xd2c <__stack+0x42d>
			frame_buffer++;
		}
		break;
		
		case 3: // negative ramp
		for(uint16_t i=0; i<arr_length;i++)
     9f4:	e1 2c       	mov	r14, r1
     9f6:	f1 2c       	mov	r15, r1
		{
			
			*frame_buffer=(uint8_t)(255-(float)i/arr_length*255);
     9f8:	48 01       	movw	r8, r16
     9fa:	a1 2c       	mov	r10, r1
     9fc:	b1 2c       	mov	r11, r1
     9fe:	b7 01       	movw	r22, r14
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	0e 94 b0 09 	call	0x1360	; 0x1360 <__floatunsisf>
     a08:	2b 01       	movw	r4, r22
     a0a:	3c 01       	movw	r6, r24
     a0c:	c5 01       	movw	r24, r10
     a0e:	b4 01       	movw	r22, r8
     a10:	0e 94 b0 09 	call	0x1360	; 0x1360 <__floatunsisf>
     a14:	9b 01       	movw	r18, r22
     a16:	ac 01       	movw	r20, r24
     a18:	c3 01       	movw	r24, r6
     a1a:	b2 01       	movw	r22, r4
     a1c:	0e 94 0f 09 	call	0x121e	; 0x121e <__divsf3>
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	4f e7       	ldi	r20, 0x7F	; 127
     a26:	53 e4       	ldi	r21, 0x43	; 67
     a28:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3>
     a2c:	9b 01       	movw	r18, r22
     a2e:	ac 01       	movw	r20, r24
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	8f e7       	ldi	r24, 0x7F	; 127
     a36:	93 e4       	ldi	r25, 0x43	; 67
     a38:	0e 94 a2 08 	call	0x1144	; 0x1144 <__subsf3>
     a3c:	0e 94 81 09 	call	0x1302	; 0x1302 <__fixunssfsi>
     a40:	ad 81       	ldd	r26, Y+5	; 0x05
     a42:	be 81       	ldd	r27, Y+6	; 0x06
     a44:	6d 93       	st	X+, r22
     a46:	be 83       	std	Y+6, r27	; 0x06
     a48:	ad 83       	std	Y+5, r26	; 0x05
			frame_buffer++;
		}
		break;
		
		case 3: // negative ramp
		for(uint16_t i=0; i<arr_length;i++)
     a4a:	bf ef       	ldi	r27, 0xFF	; 255
     a4c:	eb 1a       	sub	r14, r27
     a4e:	fb 0a       	sbc	r15, r27
     a50:	e0 16       	cp	r14, r16
     a52:	f1 06       	cpc	r15, r17
     a54:	a1 f6       	brne	.-88     	; 0x9fe <__stack+0xff>
     a56:	6a c1       	rjmp	.+724    	; 0xd2c <__stack+0x42d>
		break;
		
		case 4: // Square wave
		for(uint16_t i=0; i<arr_length;i++)
		{
			if(i<arr_length/2)
     a58:	98 01       	movw	r18, r16
     a5a:	36 95       	lsr	r19
     a5c:	27 95       	ror	r18
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
			*frame_buffer=0;
			else
			*frame_buffer=255;
     a62:	4f ef       	ldi	r20, 0xFF	; 255
		break;
		
		case 4: // Square wave
		for(uint16_t i=0; i<arr_length;i++)
		{
			if(i<arr_length/2)
     a64:	82 17       	cp	r24, r18
     a66:	93 07       	cpc	r25, r19
     a68:	20 f4       	brcc	.+8      	; 0xa72 <__stack+0x173>
			*frame_buffer=0;
     a6a:	ed 81       	ldd	r30, Y+5	; 0x05
     a6c:	fe 81       	ldd	r31, Y+6	; 0x06
     a6e:	10 82       	st	Z, r1
     a70:	03 c0       	rjmp	.+6      	; 0xa78 <__stack+0x179>
			else
			*frame_buffer=255;
     a72:	ad 81       	ldd	r26, Y+5	; 0x05
     a74:	be 81       	ldd	r27, Y+6	; 0x06
     a76:	4c 93       	st	X, r20
			
			frame_buffer++;
     a78:	ed 81       	ldd	r30, Y+5	; 0x05
     a7a:	fe 81       	ldd	r31, Y+6	; 0x06
     a7c:	31 96       	adiw	r30, 0x01	; 1
     a7e:	fe 83       	std	Y+6, r31	; 0x06
     a80:	ed 83       	std	Y+5, r30	; 0x05
			frame_buffer++;
		}
		break;
		
		case 4: // Square wave
		for(uint16_t i=0; i<arr_length;i++)
     a82:	01 96       	adiw	r24, 0x01	; 1
     a84:	80 17       	cp	r24, r16
     a86:	91 07       	cpc	r25, r17
     a88:	69 f7       	brne	.-38     	; 0xa64 <__stack+0x165>
     a8a:	50 c1       	rjmp	.+672    	; 0xd2c <__stack+0x42d>
		break;
		
		case 5: // triangle
		for(uint16_t i=0; i<arr_length;i++)
		{
			if(i<=arr_length/2)
     a8c:	68 01       	movw	r12, r16
     a8e:	d6 94       	lsr	r13
     a90:	c7 94       	ror	r12
     a92:	e1 2c       	mov	r14, r1
     a94:	f1 2c       	mov	r15, r1
			*frame_buffer=(uint8_t)((float)i/arr_length*254.5)*2;
			else
			*frame_buffer=(uint8_t)(255-(float)i/arr_length*255)*2;
     a96:	28 01       	movw	r4, r16
     a98:	61 2c       	mov	r6, r1
     a9a:	71 2c       	mov	r7, r1
		break;
		
		case 5: // triangle
		for(uint16_t i=0; i<arr_length;i++)
		{
			if(i<=arr_length/2)
     a9c:	ce 14       	cp	r12, r14
     a9e:	df 04       	cpc	r13, r15
     aa0:	f0 f0       	brcs	.+60     	; 0xade <__stack+0x1df>
			*frame_buffer=(uint8_t)((float)i/arr_length*254.5)*2;
     aa2:	b7 01       	movw	r22, r14
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	0e 94 b0 09 	call	0x1360	; 0x1360 <__floatunsisf>
     aac:	4b 01       	movw	r8, r22
     aae:	5c 01       	movw	r10, r24
     ab0:	c3 01       	movw	r24, r6
     ab2:	b2 01       	movw	r22, r4
     ab4:	0e 94 b0 09 	call	0x1360	; 0x1360 <__floatunsisf>
     ab8:	9b 01       	movw	r18, r22
     aba:	ac 01       	movw	r20, r24
     abc:	c5 01       	movw	r24, r10
     abe:	b4 01       	movw	r22, r8
     ac0:	0e 94 0f 09 	call	0x121e	; 0x121e <__divsf3>
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	30 e8       	ldi	r19, 0x80	; 128
     ac8:	4e e7       	ldi	r20, 0x7E	; 126
     aca:	53 e4       	ldi	r21, 0x43	; 67
     acc:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3>
     ad0:	0e 94 81 09 	call	0x1302	; 0x1302 <__fixunssfsi>
     ad4:	66 0f       	add	r22, r22
     ad6:	ad 81       	ldd	r26, Y+5	; 0x05
     ad8:	be 81       	ldd	r27, Y+6	; 0x06
     ada:	6c 93       	st	X, r22
     adc:	25 c0       	rjmp	.+74     	; 0xb28 <__stack+0x229>
			else
			*frame_buffer=(uint8_t)(255-(float)i/arr_length*255)*2;
     ade:	b7 01       	movw	r22, r14
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 94 b0 09 	call	0x1360	; 0x1360 <__floatunsisf>
     ae8:	4b 01       	movw	r8, r22
     aea:	5c 01       	movw	r10, r24
     aec:	c3 01       	movw	r24, r6
     aee:	b2 01       	movw	r22, r4
     af0:	0e 94 b0 09 	call	0x1360	; 0x1360 <__floatunsisf>
     af4:	9b 01       	movw	r18, r22
     af6:	ac 01       	movw	r20, r24
     af8:	c5 01       	movw	r24, r10
     afa:	b4 01       	movw	r22, r8
     afc:	0e 94 0f 09 	call	0x121e	; 0x121e <__divsf3>
     b00:	20 e0       	ldi	r18, 0x00	; 0
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	4f e7       	ldi	r20, 0x7F	; 127
     b06:	53 e4       	ldi	r21, 0x43	; 67
     b08:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3>
     b0c:	9b 01       	movw	r18, r22
     b0e:	ac 01       	movw	r20, r24
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	8f e7       	ldi	r24, 0x7F	; 127
     b16:	93 e4       	ldi	r25, 0x43	; 67
     b18:	0e 94 a2 08 	call	0x1144	; 0x1144 <__subsf3>
     b1c:	0e 94 81 09 	call	0x1302	; 0x1302 <__fixunssfsi>
     b20:	66 0f       	add	r22, r22
     b22:	ed 81       	ldd	r30, Y+5	; 0x05
     b24:	fe 81       	ldd	r31, Y+6	; 0x06
     b26:	60 83       	st	Z, r22
			
			frame_buffer++;
     b28:	6d 81       	ldd	r22, Y+5	; 0x05
     b2a:	7e 81       	ldd	r23, Y+6	; 0x06
     b2c:	6f 5f       	subi	r22, 0xFF	; 255
     b2e:	7f 4f       	sbci	r23, 0xFF	; 255
     b30:	7e 83       	std	Y+6, r23	; 0x06
     b32:	6d 83       	std	Y+5, r22	; 0x05
			frame_buffer++;
		}
		break;
		
		case 5: // triangle
		for(uint16_t i=0; i<arr_length;i++)
     b34:	7f ef       	ldi	r23, 0xFF	; 255
     b36:	e7 1a       	sub	r14, r23
     b38:	f7 0a       	sbc	r15, r23
     b3a:	e0 16       	cp	r14, r16
     b3c:	f1 06       	cpc	r15, r17
     b3e:	09 f0       	breq	.+2      	; 0xb42 <__stack+0x243>
     b40:	ad cf       	rjmp	.-166    	; 0xa9c <__stack+0x19d>
     b42:	f4 c0       	rjmp	.+488    	; 0xd2c <__stack+0x42d>
			frame_buffer++;
		}
		break;
		
		case 6: //Fullwave Rectified
		for(uint16_t i=0; i<arr_length;i++)
     b44:	e1 2c       	mov	r14, r1
     b46:	f1 2c       	mov	r15, r1
		{
			
			//	*frame_buffer=(uint8_t)(127.5*cos((float)(i)*2*M_PI/(float)arr_length)+127.5);
			*frame_buffer=(lookup_sine[(uint16_t)((float)i/(float)arr_length*255.0)]-128)*2;
     b48:	48 01       	movw	r8, r16
     b4a:	a1 2c       	mov	r10, r1
     b4c:	b1 2c       	mov	r11, r1
     b4e:	b7 01       	movw	r22, r14
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 b0 09 	call	0x1360	; 0x1360 <__floatunsisf>
     b58:	2b 01       	movw	r4, r22
     b5a:	3c 01       	movw	r6, r24
     b5c:	c5 01       	movw	r24, r10
     b5e:	b4 01       	movw	r22, r8
     b60:	0e 94 b0 09 	call	0x1360	; 0x1360 <__floatunsisf>
     b64:	9b 01       	movw	r18, r22
     b66:	ac 01       	movw	r20, r24
     b68:	c3 01       	movw	r24, r6
     b6a:	b2 01       	movw	r22, r4
     b6c:	0e 94 0f 09 	call	0x121e	; 0x121e <__divsf3>
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	4f e7       	ldi	r20, 0x7F	; 127
     b76:	53 e4       	ldi	r21, 0x43	; 67
     b78:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3>
     b7c:	0e 94 81 09 	call	0x1302	; 0x1302 <__fixunssfsi>
     b80:	fb 01       	movw	r30, r22
     b82:	e7 59       	subi	r30, 0x97	; 151
     b84:	fd 4f       	sbci	r31, 0xFD	; 253
     b86:	80 81       	ld	r24, Z
     b88:	88 0f       	add	r24, r24
     b8a:	ad 81       	ldd	r26, Y+5	; 0x05
     b8c:	be 81       	ldd	r27, Y+6	; 0x06
     b8e:	8d 93       	st	X+, r24
     b90:	be 83       	std	Y+6, r27	; 0x06
     b92:	ad 83       	std	Y+5, r26	; 0x05
			frame_buffer++;
		}
		break;
		
		case 6: //Fullwave Rectified
		for(uint16_t i=0; i<arr_length;i++)
     b94:	bf ef       	ldi	r27, 0xFF	; 255
     b96:	eb 1a       	sub	r14, r27
     b98:	fb 0a       	sbc	r15, r27
     b9a:	e0 16       	cp	r14, r16
     b9c:	f1 06       	cpc	r15, r17
     b9e:	b9 f6       	brne	.-82     	; 0xb4e <__stack+0x24f>
     ba0:	c5 c0       	rjmp	.+394    	; 0xd2c <__stack+0x42d>
		case 7: // Halfwave Rectified
		for(uint16_t i=0; i<arr_length;i++)
		{

			index=(uint16_t)((float)i/(float)arr_length*511.0);
			if(i<(arr_length/2))
     ba2:	68 01       	movw	r12, r16
     ba4:	d6 94       	lsr	r13
     ba6:	c7 94       	ror	r12
     ba8:	e1 2c       	mov	r14, r1
     baa:	f1 2c       	mov	r15, r1
			*frame_buffer=(lookup_sine[index]-128)*2;
     bac:	28 01       	movw	r4, r16
     bae:	61 2c       	mov	r6, r1
     bb0:	71 2c       	mov	r7, r1
		case 7: // Halfwave Rectified
		for(uint16_t i=0; i<arr_length;i++)
		{

			index=(uint16_t)((float)i/(float)arr_length*511.0);
			if(i<(arr_length/2))
     bb2:	ec 14       	cp	r14, r12
     bb4:	fd 04       	cpc	r15, r13
     bb6:	10 f5       	brcc	.+68     	; 0xbfc <__stack+0x2fd>
			*frame_buffer=(lookup_sine[index]-128)*2;
     bb8:	b7 01       	movw	r22, r14
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 b0 09 	call	0x1360	; 0x1360 <__floatunsisf>
     bc2:	4b 01       	movw	r8, r22
     bc4:	5c 01       	movw	r10, r24
     bc6:	c3 01       	movw	r24, r6
     bc8:	b2 01       	movw	r22, r4
     bca:	0e 94 b0 09 	call	0x1360	; 0x1360 <__floatunsisf>
     bce:	9b 01       	movw	r18, r22
     bd0:	ac 01       	movw	r20, r24
     bd2:	c5 01       	movw	r24, r10
     bd4:	b4 01       	movw	r22, r8
     bd6:	0e 94 0f 09 	call	0x121e	; 0x121e <__divsf3>
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e8       	ldi	r19, 0x80	; 128
     bde:	4f ef       	ldi	r20, 0xFF	; 255
     be0:	53 e4       	ldi	r21, 0x43	; 67
     be2:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3>
     be6:	0e 94 81 09 	call	0x1302	; 0x1302 <__fixunssfsi>
     bea:	fb 01       	movw	r30, r22
     bec:	e7 59       	subi	r30, 0x97	; 151
     bee:	fd 4f       	sbci	r31, 0xFD	; 253
     bf0:	80 81       	ld	r24, Z
     bf2:	88 0f       	add	r24, r24
     bf4:	ed 81       	ldd	r30, Y+5	; 0x05
     bf6:	fe 81       	ldd	r31, Y+6	; 0x06
     bf8:	80 83       	st	Z, r24
     bfa:	03 c0       	rjmp	.+6      	; 0xc02 <__stack+0x303>
			else
			*frame_buffer=0;
     bfc:	ad 81       	ldd	r26, Y+5	; 0x05
     bfe:	be 81       	ldd	r27, Y+6	; 0x06
     c00:	1c 92       	st	X, r1
			
			frame_buffer++;
     c02:	ed 81       	ldd	r30, Y+5	; 0x05
     c04:	fe 81       	ldd	r31, Y+6	; 0x06
     c06:	31 96       	adiw	r30, 0x01	; 1
     c08:	fe 83       	std	Y+6, r31	; 0x06
     c0a:	ed 83       	std	Y+5, r30	; 0x05
			frame_buffer++;
		}
		break;
		
		case 7: // Halfwave Rectified
		for(uint16_t i=0; i<arr_length;i++)
     c0c:	ff ef       	ldi	r31, 0xFF	; 255
     c0e:	ef 1a       	sub	r14, r31
     c10:	ff 0a       	sbc	r15, r31
     c12:	e0 16       	cp	r14, r16
     c14:	f1 06       	cpc	r15, r17
     c16:	69 f6       	brne	.-102    	; 0xbb2 <__stack+0x2b3>
     c18:	89 c0       	rjmp	.+274    	; 0xd2c <__stack+0x42d>
			frame_buffer++;
		}
		break;
		
		case 8: // Ecg
		for(uint16_t i=0; i<arr_length;i++)
     c1a:	e1 2c       	mov	r14, r1
     c1c:	f1 2c       	mov	r15, r1
		{
			

			*frame_buffer=ecg_lookup[(uint16_t)((float)i/(float)arr_length*234.0)];
     c1e:	48 01       	movw	r8, r16
     c20:	a1 2c       	mov	r10, r1
     c22:	b1 2c       	mov	r11, r1
     c24:	b7 01       	movw	r22, r14
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	0e 94 b0 09 	call	0x1360	; 0x1360 <__floatunsisf>
     c2e:	2b 01       	movw	r4, r22
     c30:	3c 01       	movw	r6, r24
     c32:	c5 01       	movw	r24, r10
     c34:	b4 01       	movw	r22, r8
     c36:	0e 94 b0 09 	call	0x1360	; 0x1360 <__floatunsisf>
     c3a:	9b 01       	movw	r18, r22
     c3c:	ac 01       	movw	r20, r24
     c3e:	c3 01       	movw	r24, r6
     c40:	b2 01       	movw	r22, r4
     c42:	0e 94 0f 09 	call	0x121e	; 0x121e <__divsf3>
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	4a e6       	ldi	r20, 0x6A	; 106
     c4c:	53 e4       	ldi	r21, 0x43	; 67
     c4e:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3>
     c52:	0e 94 81 09 	call	0x1302	; 0x1302 <__fixunssfsi>
     c56:	fb 01       	movw	r30, r22
     c58:	e1 58       	subi	r30, 0x81	; 129
     c5a:	fe 4f       	sbci	r31, 0xFE	; 254
     c5c:	80 81       	ld	r24, Z
     c5e:	ad 81       	ldd	r26, Y+5	; 0x05
     c60:	be 81       	ldd	r27, Y+6	; 0x06
     c62:	8d 93       	st	X+, r24
     c64:	be 83       	std	Y+6, r27	; 0x06
     c66:	ad 83       	std	Y+5, r26	; 0x05
			frame_buffer++;
		}
		break;
		
		case 8: // Ecg
		for(uint16_t i=0; i<arr_length;i++)
     c68:	bf ef       	ldi	r27, 0xFF	; 255
     c6a:	eb 1a       	sub	r14, r27
     c6c:	fb 0a       	sbc	r15, r27
     c6e:	e0 16       	cp	r14, r16
     c70:	f1 06       	cpc	r15, r17
     c72:	c1 f6       	brne	.-80     	; 0xc24 <__stack+0x325>
     c74:	5b c0       	rjmp	.+182    	; 0xd2c <__stack+0x42d>
		}
		break;
		
		
		case 9: // DTMF
		for(uint16_t i=0; i<arr_length;i++)
     c76:	c1 2c       	mov	r12, r1
     c78:	d1 2c       	mov	r13, r1
		{
			
			index=(uint16_t)((float)i/(float)arr_length*511.0*multiplier);
     c7a:	28 01       	movw	r4, r16
     c7c:	61 2c       	mov	r6, r1
     c7e:	71 2c       	mov	r7, r1
     c80:	6e 2d       	mov	r22, r14
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	69 83       	std	Y+1, r22	; 0x01
     c8a:	7a 83       	std	Y+2, r23	; 0x02
     c8c:	8b 83       	std	Y+3, r24	; 0x03
     c8e:	9c 83       	std	Y+4, r25	; 0x04
     c90:	b6 01       	movw	r22, r12
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 b0 09 	call	0x1360	; 0x1360 <__floatunsisf>
     c9a:	4b 01       	movw	r8, r22
     c9c:	5c 01       	movw	r10, r24
     c9e:	c3 01       	movw	r24, r6
     ca0:	b2 01       	movw	r22, r4
     ca2:	0e 94 b0 09 	call	0x1360	; 0x1360 <__floatunsisf>
     ca6:	9b 01       	movw	r18, r22
     ca8:	ac 01       	movw	r20, r24
     caa:	c5 01       	movw	r24, r10
     cac:	b4 01       	movw	r22, r8
     cae:	0e 94 0f 09 	call	0x121e	; 0x121e <__divsf3>
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e8       	ldi	r19, 0x80	; 128
     cb6:	4f ef       	ldi	r20, 0xFF	; 255
     cb8:	53 e4       	ldi	r21, 0x43	; 67
     cba:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3>
     cbe:	4b 01       	movw	r8, r22
     cc0:	5c 01       	movw	r10, r24
     cc2:	69 81       	ldd	r22, Y+1	; 0x01
     cc4:	7a 81       	ldd	r23, Y+2	; 0x02
     cc6:	8b 81       	ldd	r24, Y+3	; 0x03
     cc8:	9c 81       	ldd	r25, Y+4	; 0x04
     cca:	0e 94 b2 09 	call	0x1364	; 0x1364 <__floatsisf>
     cce:	a5 01       	movw	r20, r10
     cd0:	94 01       	movw	r18, r8
     cd2:	0e 94 3e 0a 	call	0x147c	; 0x147c <__mulsf3>
     cd6:	0e 94 81 09 	call	0x1302	; 0x1302 <__fixunssfsi>
     cda:	7b 01       	movw	r14, r22
			
			while(index>511)																	//if the index is larger than lookup table substract one period
     cdc:	e1 14       	cp	r14, r1
     cde:	72 e0       	ldi	r23, 0x02	; 2
     ce0:	f7 06       	cpc	r15, r23
     ce2:	40 f0       	brcs	.+16     	; 0xcf4 <__stack+0x3f5>
			{
				index=index-511;
     ce4:	8f ef       	ldi	r24, 0xFF	; 255
     ce6:	e8 1a       	sub	r14, r24
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	f8 0a       	sbc	r15, r24
		for(uint16_t i=0; i<arr_length;i++)
		{
			
			index=(uint16_t)((float)i/(float)arr_length*511.0*multiplier);
			
			while(index>511)																	//if the index is larger than lookup table substract one period
     cec:	e1 14       	cp	r14, r1
     cee:	92 e0       	ldi	r25, 0x02	; 2
     cf0:	f9 06       	cpc	r15, r25
     cf2:	c0 f7       	brcc	.-16     	; 0xce4 <__stack+0x3e5>
			{
				index=index-511;
			}
			
			*frame_buffer=lookup_sine[(uint16_t)((float)i/(float)arr_length*511.0)]/2+lookup_sine[index]/2;
     cf4:	c5 01       	movw	r24, r10
     cf6:	b4 01       	movw	r22, r8
     cf8:	0e 94 81 09 	call	0x1302	; 0x1302 <__fixunssfsi>
     cfc:	fb 01       	movw	r30, r22
     cfe:	e7 59       	subi	r30, 0x97	; 151
     d00:	fd 4f       	sbci	r31, 0xFD	; 253
     d02:	80 81       	ld	r24, Z
     d04:	98 2f       	mov	r25, r24
     d06:	96 95       	lsr	r25
     d08:	f7 01       	movw	r30, r14
     d0a:	e7 59       	subi	r30, 0x97	; 151
     d0c:	fd 4f       	sbci	r31, 0xFD	; 253
     d0e:	80 81       	ld	r24, Z
     d10:	86 95       	lsr	r24
     d12:	89 0f       	add	r24, r25
     d14:	ad 81       	ldd	r26, Y+5	; 0x05
     d16:	be 81       	ldd	r27, Y+6	; 0x06
     d18:	8d 93       	st	X+, r24
     d1a:	be 83       	std	Y+6, r27	; 0x06
     d1c:	ad 83       	std	Y+5, r26	; 0x05
		}
		break;
		
		
		case 9: // DTMF
		for(uint16_t i=0; i<arr_length;i++)
     d1e:	bf ef       	ldi	r27, 0xFF	; 255
     d20:	cb 1a       	sub	r12, r27
     d22:	db 0a       	sbc	r13, r27
     d24:	c0 16       	cp	r12, r16
     d26:	d1 06       	cpc	r13, r17
     d28:	09 f0       	breq	.+2      	; 0xd2c <__stack+0x42d>
     d2a:	b2 cf       	rjmp	.-156    	; 0xc90 <__stack+0x391>
	}
	
	
	
	
}
     d2c:	26 96       	adiw	r28, 0x06	; 6
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	f8 94       	cli
     d32:	de bf       	out	0x3e, r29	; 62
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	cd bf       	out	0x3d, r28	; 61
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	cf 90       	pop	r12
     d48:	bf 90       	pop	r11
     d4a:	af 90       	pop	r10
     d4c:	9f 90       	pop	r9
     d4e:	8f 90       	pop	r8
     d50:	7f 90       	pop	r7
     d52:	6f 90       	pop	r6
     d54:	5f 90       	pop	r5
     d56:	4f 90       	pop	r4
     d58:	08 95       	ret

00000d5a <return_wvftype>:
}



void return_wvftype(char text[],uint8_t type)
{
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	63 97       	sbiw	r28, 0x13	; 19
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
	const char rsin[]="FWRS";
     d6e:	25 e0       	ldi	r18, 0x05	; 5
     d70:	e2 e3       	ldi	r30, 0x32	; 50
     d72:	f1 e0       	ldi	r31, 0x01	; 1
     d74:	de 01       	movw	r26, r28
     d76:	11 96       	adiw	r26, 0x01	; 1
     d78:	01 90       	ld	r0, Z+
     d7a:	0d 92       	st	X+, r0
     d7c:	2a 95       	dec	r18
     d7e:	e1 f7       	brne	.-8      	; 0xd78 <return_wvftype+0x1e>
	const char dtmf[]="DTMF";
     d80:	25 e0       	ldi	r18, 0x05	; 5
     d82:	e7 e3       	ldi	r30, 0x37	; 55
     d84:	f1 e0       	ldi	r31, 0x01	; 1
     d86:	de 01       	movw	r26, r28
     d88:	16 96       	adiw	r26, 0x06	; 6
     d8a:	01 90       	ld	r0, Z+
     d8c:	0d 92       	st	X+, r0
     d8e:	2a 95       	dec	r18
     d90:	e1 f7       	brne	.-8      	; 0xd8a <return_wvftype+0x30>
	const char triag[]="Triangle";
     d92:	29 e0       	ldi	r18, 0x09	; 9
     d94:	ec e3       	ldi	r30, 0x3C	; 60
     d96:	f1 e0       	ldi	r31, 0x01	; 1
     d98:	de 01       	movw	r26, r28
     d9a:	1b 96       	adiw	r26, 0x0b	; 11
     d9c:	01 90       	ld	r0, Z+
     d9e:	0d 92       	st	X+, r0
     da0:	2a 95       	dec	r18
     da2:	e1 f7       	brne	.-8      	; 0xd9c <return_wvftype+0x42>
	switch (type_map[type-1])
     da4:	e6 2f       	mov	r30, r22
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	e8 59       	subi	r30, 0x98	; 152
     daa:	fb 4f       	sbci	r31, 0xFB	; 251
     dac:	e0 81       	ld	r30, Z
     dae:	4e 2f       	mov	r20, r30
     db0:	50 e0       	ldi	r21, 0x00	; 0
     db2:	fa 01       	movw	r30, r20
     db4:	31 97       	sbiw	r30, 0x01	; 1
     db6:	e9 30       	cpi	r30, 0x09	; 9
     db8:	f1 05       	cpc	r31, r1
     dba:	08 f0       	brcs	.+2      	; 0xdbe <return_wvftype+0x64>
     dbc:	58 c0       	rjmp	.+176    	; 0xe6e <return_wvftype+0x114>
     dbe:	dc 01       	movw	r26, r24
     dc0:	e3 5c       	subi	r30, 0xC3	; 195
     dc2:	ff 4f       	sbci	r31, 0xFF	; 255
     dc4:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <__tablejump2__>
	{
		case 1:
		strncpy(text,"Sin",4);
     dc8:	23 e5       	ldi	r18, 0x53	; 83
     dca:	39 e6       	ldi	r19, 0x69	; 105
     dcc:	11 96       	adiw	r26, 0x01	; 1
     dce:	3c 93       	st	X, r19
     dd0:	2e 93       	st	-X, r18
     dd2:	2e e6       	ldi	r18, 0x6E	; 110
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	13 96       	adiw	r26, 0x03	; 3
     dd8:	3c 93       	st	X, r19
     dda:	2e 93       	st	-X, r18
     ddc:	12 97       	sbiw	r26, 0x02	; 2
		break;
     dde:	47 c0       	rjmp	.+142    	; 0xe6e <return_wvftype+0x114>
		
		case 2:
		strncpy(text,"Ramp+\0",5);
     de0:	25 e0       	ldi	r18, 0x05	; 5
     de2:	e9 e0       	ldi	r30, 0x09	; 9
     de4:	f1 e0       	ldi	r31, 0x01	; 1
     de6:	01 90       	ld	r0, Z+
     de8:	0d 92       	st	X+, r0
     dea:	2a 95       	dec	r18
     dec:	e1 f7       	brne	.-8      	; 0xde6 <return_wvftype+0x8c>
		break;
     dee:	3f c0       	rjmp	.+126    	; 0xe6e <return_wvftype+0x114>
		
		case 3:
		strncpy(text,"Ramp-\0",6);
     df0:	26 e0       	ldi	r18, 0x06	; 6
     df2:	e0 e1       	ldi	r30, 0x10	; 16
     df4:	f1 e0       	ldi	r31, 0x01	; 1
     df6:	01 90       	ld	r0, Z+
     df8:	0d 92       	st	X+, r0
     dfa:	2a 95       	dec	r18
     dfc:	e1 f7       	brne	.-8      	; 0xdf6 <return_wvftype+0x9c>
		break;
     dfe:	37 c0       	rjmp	.+110    	; 0xe6e <return_wvftype+0x114>
		
		case 4:
		strncpy(text,"Square",7);
     e00:	27 e0       	ldi	r18, 0x07	; 7
     e02:	eb e2       	ldi	r30, 0x2B	; 43
     e04:	f1 e0       	ldi	r31, 0x01	; 1
     e06:	01 90       	ld	r0, Z+
     e08:	0d 92       	st	X+, r0
     e0a:	2a 95       	dec	r18
     e0c:	e1 f7       	brne	.-8      	; 0xe06 <return_wvftype+0xac>
		break;
     e0e:	2f c0       	rjmp	.+94     	; 0xe6e <return_wvftype+0x114>
		
		case 5:
		strncpy(text,triag,8);
     e10:	48 e0       	ldi	r20, 0x08	; 8
     e12:	50 e0       	ldi	r21, 0x00	; 0
     e14:	be 01       	movw	r22, r28
     e16:	65 5f       	subi	r22, 0xF5	; 245
     e18:	7f 4f       	sbci	r23, 0xFF	; 255
     e1a:	0e 94 b1 0a 	call	0x1562	; 0x1562 <strncpy>
		break;
     e1e:	27 c0       	rjmp	.+78     	; 0xe6e <return_wvftype+0x114>
		
		case 6:
		strncpy(text,rsin,6);
     e20:	46 e0       	ldi	r20, 0x06	; 6
     e22:	50 e0       	ldi	r21, 0x00	; 0
     e24:	be 01       	movw	r22, r28
     e26:	6f 5f       	subi	r22, 0xFF	; 255
     e28:	7f 4f       	sbci	r23, 0xFF	; 255
     e2a:	0e 94 b1 0a 	call	0x1562	; 0x1562 <strncpy>
		break;
     e2e:	1f c0       	rjmp	.+62     	; 0xe6e <return_wvftype+0x114>
		
		case 7:
		strncpy(text,"HWRS",4);
     e30:	28 e4       	ldi	r18, 0x48	; 72
     e32:	37 e5       	ldi	r19, 0x57	; 87
     e34:	11 96       	adiw	r26, 0x01	; 1
     e36:	3c 93       	st	X, r19
     e38:	2e 93       	st	-X, r18
     e3a:	22 e5       	ldi	r18, 0x52	; 82
     e3c:	33 e5       	ldi	r19, 0x53	; 83
     e3e:	13 96       	adiw	r26, 0x03	; 3
     e40:	3c 93       	st	X, r19
     e42:	2e 93       	st	-X, r18
     e44:	12 97       	sbiw	r26, 0x02	; 2
		break;
     e46:	13 c0       	rjmp	.+38     	; 0xe6e <return_wvftype+0x114>
		
		case 8:
		strncpy(text,"ECG",4);
     e48:	25 e4       	ldi	r18, 0x45	; 69
     e4a:	33 e4       	ldi	r19, 0x43	; 67
     e4c:	11 96       	adiw	r26, 0x01	; 1
     e4e:	3c 93       	st	X, r19
     e50:	2e 93       	st	-X, r18
     e52:	27 e4       	ldi	r18, 0x47	; 71
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	13 96       	adiw	r26, 0x03	; 3
     e58:	3c 93       	st	X, r19
     e5a:	2e 93       	st	-X, r18
     e5c:	12 97       	sbiw	r26, 0x02	; 2
		break;
     e5e:	07 c0       	rjmp	.+14     	; 0xe6e <return_wvftype+0x114>
		
		case 9:
		strncpy(text,dtmf,4);
     e60:	44 e0       	ldi	r20, 0x04	; 4
     e62:	50 e0       	ldi	r21, 0x00	; 0
     e64:	be 01       	movw	r22, r28
     e66:	6a 5f       	subi	r22, 0xFA	; 250
     e68:	7f 4f       	sbci	r23, 0xFF	; 255
     e6a:	0e 94 b1 0a 	call	0x1562	; 0x1562 <strncpy>
		type=255;
		break;
		
		
	}
}
     e6e:	63 96       	adiw	r28, 0x13	; 19
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	cd bf       	out	0x3d, r28	; 61
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	08 95       	ret

00000e80 <send_uart>:




void send_uart(uint8_t type,uint16_t frequency)
{
     e80:	cf 92       	push	r12
     e82:	df 92       	push	r13
     e84:	ff 92       	push	r15
     e86:	0f 93       	push	r16
     e88:	1f 93       	push	r17
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	2a 97       	sbiw	r28, 0x0a	; 10
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	f8 2e       	mov	r15, r24
     ea0:	6b 01       	movw	r12, r22
	char text[10]={0};
     ea2:	8e 01       	movw	r16, r28
     ea4:	0f 5f       	subi	r16, 0xFF	; 255
     ea6:	1f 4f       	sbci	r17, 0xFF	; 255
     ea8:	8a e0       	ldi	r24, 0x0A	; 10
     eaa:	f8 01       	movw	r30, r16
     eac:	11 92       	st	Z+, r1
     eae:	8a 95       	dec	r24
     eb0:	e9 f7       	brne	.-6      	; 0xeac <send_uart+0x2c>
	uart_puts("F: \0");
     eb2:	87 e1       	ldi	r24, 0x17	; 23
     eb4:	91 e0       	ldi	r25, 0x01	; 1
     eb6:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     eba:	4a e0       	ldi	r20, 0x0A	; 10
     ebc:	b8 01       	movw	r22, r16
     ebe:	c6 01       	movw	r24, r12
     ec0:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__itoa_ncheck>
	itoa(frequency,text,10);
	uart_puts(text);
     ec4:	c8 01       	movw	r24, r16
     ec6:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_puts>
	uart_puts(" Hz, Waveform: ");
     eca:	85 e4       	ldi	r24, 0x45	; 69
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_puts>
	return_wvftype(text,type);
     ed2:	6f 2d       	mov	r22, r15
     ed4:	c8 01       	movw	r24, r16
     ed6:	0e 94 ad 06 	call	0xd5a	; 0xd5a <return_wvftype>
	uart_puts(text);
     eda:	c8 01       	movw	r24, r16
     edc:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_puts>
	uart_puts("\n");
     ee0:	85 e5       	ldi	r24, 0x55	; 85
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	0e 94 93 08 	call	0x1126	; 0x1126 <uart_puts>
	
}
     ee8:	2a 96       	adiw	r28, 0x0a	; 10
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	1f 91       	pop	r17
     efa:	0f 91       	pop	r16
     efc:	ff 90       	pop	r15
     efe:	df 90       	pop	r13
     f00:	cf 90       	pop	r12
     f02:	08 95       	ret

00000f04 <update_disp>:




void update_disp(uint8_t type,uint16_t frequency,uint8_t multiplier)	//updates the LCD with the frequency
{
     f04:	ef 92       	push	r14
     f06:	ff 92       	push	r15
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	64 97       	sbiw	r28, 0x14	; 20
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	18 2f       	mov	r17, r24
     f22:	7b 01       	movw	r14, r22
     f24:	04 2f       	mov	r16, r20
	
	char text[10]={0};
     f26:	ce 01       	movw	r24, r28
     f28:	01 96       	adiw	r24, 0x01	; 1
     f2a:	2a e0       	ldi	r18, 0x0A	; 10
     f2c:	fc 01       	movw	r30, r24
     f2e:	11 92       	st	Z+, r1
     f30:	2a 95       	dec	r18
     f32:	e9 f7       	brne	.-6      	; 0xf2e <update_disp+0x2a>
	const char reg[]="Gen.:";
     f34:	26 e0       	ldi	r18, 0x06	; 6
     f36:	e9 e7       	ldi	r30, 0x79	; 121
     f38:	f1 e0       	ldi	r31, 0x01	; 1
     f3a:	de 01       	movw	r26, r28
     f3c:	1b 96       	adiw	r26, 0x0b	; 11
     f3e:	01 90       	ld	r0, Z+
     f40:	0d 92       	st	X+, r0
     f42:	2a 95       	dec	r18
     f44:	e1 f7       	brne	.-8      	; 0xf3e <update_disp+0x3a>
	const char multiplier_text[]=" M:";
     f46:	20 e2       	ldi	r18, 0x20	; 32
     f48:	3d e4       	ldi	r19, 0x4D	; 77
     f4a:	3a 8b       	std	Y+18, r19	; 0x12
     f4c:	29 8b       	std	Y+17, r18	; 0x11
     f4e:	2a e3       	ldi	r18, 0x3A	; 58
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	3c 8b       	std	Y+20, r19	; 0x14
     f54:	2b 8b       	std	Y+19, r18	; 0x13
	return_wvftype(text,type);
     f56:	61 2f       	mov	r22, r17
     f58:	0e 94 ad 06 	call	0xd5a	; 0xd5a <return_wvftype>
	
	
	if(type<255)	// if known type
     f5c:	1f 3f       	cpi	r17, 0xFF	; 255
     f5e:	09 f4       	brne	.+2      	; 0xf62 <update_disp+0x5e>
     f60:	4f c0       	rjmp	.+158    	; 0x1000 <update_disp+0xfc>
	{
		
		lcd_gotoxy(0,0);
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_gotoxy>
		
		
		if(type!=8 && type!=0 && type!=4)		// if changed frequency no need to overwrite the generated wvf on lCD
     f6a:	18 30       	cpi	r17, 0x08	; 8
     f6c:	51 f1       	breq	.+84     	; 0xfc2 <update_disp+0xbe>
     f6e:	81 2f       	mov	r24, r17
     f70:	8b 7f       	andi	r24, 0xFB	; 251
     f72:	39 f1       	breq	.+78     	; 0xfc2 <update_disp+0xbe>
		{
			
			
			lcd_puts(reg);
     f74:	ce 01       	movw	r24, r28
     f76:	0b 96       	adiw	r24, 0x0b	; 11
     f78:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
			lcd_puts("                ");		// Clear the appropriate space
     f7c:	8c e5       	ldi	r24, 0x5C	; 92
     f7e:	91 e0       	ldi	r25, 0x01	; 1
     f80:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
			lcd_gotoxy(6,0);
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	86 e0       	ldi	r24, 0x06	; 6
     f88:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_gotoxy>
			lcd_puts(text);
     f8c:	ce 01       	movw	r24, r28
     f8e:	01 96       	adiw	r24, 0x01	; 1
     f90:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
			if(type_map[type-1]==9)
     f94:	e1 2f       	mov	r30, r17
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	e8 59       	subi	r30, 0x98	; 152
     f9a:	fb 4f       	sbci	r31, 0xFB	; 251
     f9c:	80 81       	ld	r24, Z
     f9e:	89 30       	cpi	r24, 0x09	; 9
     fa0:	81 f4       	brne	.+32     	; 0xfc2 <update_disp+0xbe>
			{
				lcd_puts(multiplier_text);
     fa2:	ce 01       	movw	r24, r28
     fa4:	41 96       	adiw	r24, 0x11	; 17
     fa6:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
     faa:	4a e0       	ldi	r20, 0x0A	; 10
     fac:	be 01       	movw	r22, r28
     fae:	6f 5f       	subi	r22, 0xFF	; 255
     fb0:	7f 4f       	sbci	r23, 0xFF	; 255
     fb2:	80 2f       	mov	r24, r16
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__itoa_ncheck>
				itoa(multiplier,text,10);
				lcd_puts(text);
     fba:	ce 01       	movw	r24, r28
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
			}
		}
		
		
		
		lcd_gotoxy(0,1);
     fc2:	61 e0       	ldi	r22, 0x01	; 1
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_gotoxy>
		lcd_puts("                     ");			// Clear the appropriate space
     fca:	87 e5       	ldi	r24, 0x57	; 87
     fcc:	91 e0       	ldi	r25, 0x01	; 1
     fce:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
		
		lcd_gotoxy(0,1);
     fd2:	61 e0       	ldi	r22, 0x01	; 1
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_gotoxy>
		lcd_puts("Freq.: ");
     fda:	8d e6       	ldi	r24, 0x6D	; 109
     fdc:	91 e0       	ldi	r25, 0x01	; 1
     fde:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
     fe2:	4a e0       	ldi	r20, 0x0A	; 10
     fe4:	be 01       	movw	r22, r28
     fe6:	6f 5f       	subi	r22, 0xFF	; 255
     fe8:	7f 4f       	sbci	r23, 0xFF	; 255
     fea:	c7 01       	movw	r24, r14
     fec:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__itoa_ncheck>
		itoa(frequency,text,10);
		lcd_puts(text);
     ff0:	ce 01       	movw	r24, r28
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
		lcd_puts(" Hz");
     ff8:	85 e7       	ldi	r24, 0x75	; 117
     ffa:	91 e0       	ldi	r25, 0x01	; 1
     ffc:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
		
	}
    1000:	64 96       	adiw	r28, 0x14	; 20
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	0f 91       	pop	r16
    1014:	ff 90       	pop	r15
    1016:	ef 90       	pop	r14
    1018:	08 95       	ret

0000101a <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
    101a:	1f 92       	push	r1
    101c:	0f 92       	push	r0
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	0f 92       	push	r0
    1022:	11 24       	eor	r1, r1
    1024:	2f 93       	push	r18
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	ef 93       	push	r30
    102c:	ff 93       	push	r31
    102e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    1032:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    1036:	8c 71       	andi	r24, 0x1C	; 28
    1038:	e0 91 83 04 	lds	r30, 0x0483	; 0x800483 <UART_RxHead>
    103c:	ef 5f       	subi	r30, 0xFF	; 255
    103e:	ef 71       	andi	r30, 0x1F	; 31
    1040:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <UART_RxTail>
    1044:	e9 17       	cp	r30, r25
    1046:	39 f0       	breq	.+14     	; 0x1056 <__vector_18+0x3c>
    1048:	e0 93 83 04 	sts	0x0483, r30	; 0x800483 <UART_RxHead>
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	ea 57       	subi	r30, 0x7A	; 122
    1050:	fb 4f       	sbci	r31, 0xFB	; 251
    1052:	20 83       	st	Z, r18
    1054:	01 c0       	rjmp	.+2      	; 0x1058 <__vector_18+0x3e>
    1056:	82 e0       	ldi	r24, 0x02	; 2
    1058:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <UART_LastRxError>
    105c:	89 2b       	or	r24, r25
    105e:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <UART_LastRxError>
    1062:	ff 91       	pop	r31
    1064:	ef 91       	pop	r30
    1066:	9f 91       	pop	r25
    1068:	8f 91       	pop	r24
    106a:	2f 91       	pop	r18
    106c:	0f 90       	pop	r0
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	0f 90       	pop	r0
    1072:	1f 90       	pop	r1
    1074:	18 95       	reti

00001076 <__vector_19>:
    1076:	1f 92       	push	r1
    1078:	0f 92       	push	r0
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	0f 92       	push	r0
    107e:	11 24       	eor	r1, r1
    1080:	8f 93       	push	r24
    1082:	9f 93       	push	r25
    1084:	ef 93       	push	r30
    1086:	ff 93       	push	r31
    1088:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <UART_TxHead>
    108c:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <UART_TxTail>
    1090:	98 17       	cp	r25, r24
    1092:	69 f0       	breq	.+26     	; 0x10ae <__vector_19+0x38>
    1094:	e0 91 84 04 	lds	r30, 0x0484	; 0x800484 <UART_TxTail>
    1098:	ef 5f       	subi	r30, 0xFF	; 255
    109a:	ef 71       	andi	r30, 0x1F	; 31
    109c:	e0 93 84 04 	sts	0x0484, r30	; 0x800484 <UART_TxTail>
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	ea 55       	subi	r30, 0x5A	; 90
    10a4:	fb 4f       	sbci	r31, 0xFB	; 251
    10a6:	80 81       	ld	r24, Z
    10a8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    10ac:	05 c0       	rjmp	.+10     	; 0x10b8 <__vector_19+0x42>
    10ae:	e1 ec       	ldi	r30, 0xC1	; 193
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	8f 7d       	andi	r24, 0xDF	; 223
    10b6:	80 83       	st	Z, r24
    10b8:	ff 91       	pop	r31
    10ba:	ef 91       	pop	r30
    10bc:	9f 91       	pop	r25
    10be:	8f 91       	pop	r24
    10c0:	0f 90       	pop	r0
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	0f 90       	pop	r0
    10c6:	1f 90       	pop	r1
    10c8:	18 95       	reti

000010ca <uart_init>:
    10ca:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <UART_TxHead>
    10ce:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <UART_TxTail>
    10d2:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <UART_RxHead>
    10d6:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <UART_RxTail>
    10da:	99 23       	and	r25, r25
    10dc:	1c f4       	brge	.+6      	; 0x10e4 <uart_init+0x1a>
    10de:	22 e0       	ldi	r18, 0x02	; 2
    10e0:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    10e4:	90 78       	andi	r25, 0x80	; 128
    10e6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    10ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    10ee:	88 e9       	ldi	r24, 0x98	; 152
    10f0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    10f4:	86 e0       	ldi	r24, 0x06	; 6
    10f6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    10fa:	08 95       	ret

000010fc <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    10fc:	20 91 85 04 	lds	r18, 0x0485	; 0x800485 <UART_TxHead>
    1100:	2f 5f       	subi	r18, 0xFF	; 255
    1102:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
    1104:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <UART_TxTail>
    1108:	29 17       	cp	r18, r25
    110a:	e1 f3       	breq	.-8      	; 0x1104 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
    110c:	e2 2f       	mov	r30, r18
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	ea 55       	subi	r30, 0x5A	; 90
    1112:	fb 4f       	sbci	r31, 0xFB	; 251
    1114:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
    1116:	20 93 85 04 	sts	0x0485, r18	; 0x800485 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
    111a:	e1 ec       	ldi	r30, 0xC1	; 193
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	80 62       	ori	r24, 0x20	; 32
    1122:	80 83       	st	Z, r24
    1124:	08 95       	ret

00001126 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	ec 01       	movw	r28, r24
    while (*s)
    112c:	88 81       	ld	r24, Y
    112e:	88 23       	and	r24, r24
    1130:	31 f0       	breq	.+12     	; 0x113e <uart_puts+0x18>
    1132:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
    1134:	0e 94 7e 08 	call	0x10fc	; 0x10fc <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
    1138:	89 91       	ld	r24, Y+
    113a:	81 11       	cpse	r24, r1
    113c:	fb cf       	rjmp	.-10     	; 0x1134 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	08 95       	ret

00001144 <__subsf3>:
    1144:	50 58       	subi	r21, 0x80	; 128

00001146 <__addsf3>:
    1146:	bb 27       	eor	r27, r27
    1148:	aa 27       	eor	r26, r26
    114a:	0e 94 ba 08 	call	0x1174	; 0x1174 <__addsf3x>
    114e:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <__fp_round>
    1152:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__fp_pscA>
    1156:	38 f0       	brcs	.+14     	; 0x1166 <__addsf3+0x20>
    1158:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__fp_pscB>
    115c:	20 f0       	brcs	.+8      	; 0x1166 <__addsf3+0x20>
    115e:	39 f4       	brne	.+14     	; 0x116e <__addsf3+0x28>
    1160:	9f 3f       	cpi	r25, 0xFF	; 255
    1162:	19 f4       	brne	.+6      	; 0x116a <__addsf3+0x24>
    1164:	26 f4       	brtc	.+8      	; 0x116e <__addsf3+0x28>
    1166:	0c 94 f3 09 	jmp	0x13e6	; 0x13e6 <__fp_nan>
    116a:	0e f4       	brtc	.+2      	; 0x116e <__addsf3+0x28>
    116c:	e0 95       	com	r30
    116e:	e7 fb       	bst	r30, 7
    1170:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__fp_inf>

00001174 <__addsf3x>:
    1174:	e9 2f       	mov	r30, r25
    1176:	0e 94 15 0a 	call	0x142a	; 0x142a <__fp_split3>
    117a:	58 f3       	brcs	.-42     	; 0x1152 <__addsf3+0xc>
    117c:	ba 17       	cp	r27, r26
    117e:	62 07       	cpc	r22, r18
    1180:	73 07       	cpc	r23, r19
    1182:	84 07       	cpc	r24, r20
    1184:	95 07       	cpc	r25, r21
    1186:	20 f0       	brcs	.+8      	; 0x1190 <__addsf3x+0x1c>
    1188:	79 f4       	brne	.+30     	; 0x11a8 <__addsf3x+0x34>
    118a:	a6 f5       	brtc	.+104    	; 0x11f4 <__addsf3x+0x80>
    118c:	0c 94 37 0a 	jmp	0x146e	; 0x146e <__fp_zero>
    1190:	0e f4       	brtc	.+2      	; 0x1194 <__addsf3x+0x20>
    1192:	e0 95       	com	r30
    1194:	0b 2e       	mov	r0, r27
    1196:	ba 2f       	mov	r27, r26
    1198:	a0 2d       	mov	r26, r0
    119a:	0b 01       	movw	r0, r22
    119c:	b9 01       	movw	r22, r18
    119e:	90 01       	movw	r18, r0
    11a0:	0c 01       	movw	r0, r24
    11a2:	ca 01       	movw	r24, r20
    11a4:	a0 01       	movw	r20, r0
    11a6:	11 24       	eor	r1, r1
    11a8:	ff 27       	eor	r31, r31
    11aa:	59 1b       	sub	r21, r25
    11ac:	99 f0       	breq	.+38     	; 0x11d4 <__addsf3x+0x60>
    11ae:	59 3f       	cpi	r21, 0xF9	; 249
    11b0:	50 f4       	brcc	.+20     	; 0x11c6 <__addsf3x+0x52>
    11b2:	50 3e       	cpi	r21, 0xE0	; 224
    11b4:	68 f1       	brcs	.+90     	; 0x1210 <__addsf3x+0x9c>
    11b6:	1a 16       	cp	r1, r26
    11b8:	f0 40       	sbci	r31, 0x00	; 0
    11ba:	a2 2f       	mov	r26, r18
    11bc:	23 2f       	mov	r18, r19
    11be:	34 2f       	mov	r19, r20
    11c0:	44 27       	eor	r20, r20
    11c2:	58 5f       	subi	r21, 0xF8	; 248
    11c4:	f3 cf       	rjmp	.-26     	; 0x11ac <__addsf3x+0x38>
    11c6:	46 95       	lsr	r20
    11c8:	37 95       	ror	r19
    11ca:	27 95       	ror	r18
    11cc:	a7 95       	ror	r26
    11ce:	f0 40       	sbci	r31, 0x00	; 0
    11d0:	53 95       	inc	r21
    11d2:	c9 f7       	brne	.-14     	; 0x11c6 <__addsf3x+0x52>
    11d4:	7e f4       	brtc	.+30     	; 0x11f4 <__addsf3x+0x80>
    11d6:	1f 16       	cp	r1, r31
    11d8:	ba 0b       	sbc	r27, r26
    11da:	62 0b       	sbc	r22, r18
    11dc:	73 0b       	sbc	r23, r19
    11de:	84 0b       	sbc	r24, r20
    11e0:	ba f0       	brmi	.+46     	; 0x1210 <__addsf3x+0x9c>
    11e2:	91 50       	subi	r25, 0x01	; 1
    11e4:	a1 f0       	breq	.+40     	; 0x120e <__addsf3x+0x9a>
    11e6:	ff 0f       	add	r31, r31
    11e8:	bb 1f       	adc	r27, r27
    11ea:	66 1f       	adc	r22, r22
    11ec:	77 1f       	adc	r23, r23
    11ee:	88 1f       	adc	r24, r24
    11f0:	c2 f7       	brpl	.-16     	; 0x11e2 <__addsf3x+0x6e>
    11f2:	0e c0       	rjmp	.+28     	; 0x1210 <__addsf3x+0x9c>
    11f4:	ba 0f       	add	r27, r26
    11f6:	62 1f       	adc	r22, r18
    11f8:	73 1f       	adc	r23, r19
    11fa:	84 1f       	adc	r24, r20
    11fc:	48 f4       	brcc	.+18     	; 0x1210 <__addsf3x+0x9c>
    11fe:	87 95       	ror	r24
    1200:	77 95       	ror	r23
    1202:	67 95       	ror	r22
    1204:	b7 95       	ror	r27
    1206:	f7 95       	ror	r31
    1208:	9e 3f       	cpi	r25, 0xFE	; 254
    120a:	08 f0       	brcs	.+2      	; 0x120e <__addsf3x+0x9a>
    120c:	b0 cf       	rjmp	.-160    	; 0x116e <__addsf3+0x28>
    120e:	93 95       	inc	r25
    1210:	88 0f       	add	r24, r24
    1212:	08 f0       	brcs	.+2      	; 0x1216 <__addsf3x+0xa2>
    1214:	99 27       	eor	r25, r25
    1216:	ee 0f       	add	r30, r30
    1218:	97 95       	ror	r25
    121a:	87 95       	ror	r24
    121c:	08 95       	ret

0000121e <__divsf3>:
    121e:	0e 94 23 09 	call	0x1246	; 0x1246 <__divsf3x>
    1222:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <__fp_round>
    1226:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__fp_pscB>
    122a:	58 f0       	brcs	.+22     	; 0x1242 <__divsf3+0x24>
    122c:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__fp_pscA>
    1230:	40 f0       	brcs	.+16     	; 0x1242 <__divsf3+0x24>
    1232:	29 f4       	brne	.+10     	; 0x123e <__divsf3+0x20>
    1234:	5f 3f       	cpi	r21, 0xFF	; 255
    1236:	29 f0       	breq	.+10     	; 0x1242 <__divsf3+0x24>
    1238:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__fp_inf>
    123c:	51 11       	cpse	r21, r1
    123e:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__fp_szero>
    1242:	0c 94 f3 09 	jmp	0x13e6	; 0x13e6 <__fp_nan>

00001246 <__divsf3x>:
    1246:	0e 94 15 0a 	call	0x142a	; 0x142a <__fp_split3>
    124a:	68 f3       	brcs	.-38     	; 0x1226 <__divsf3+0x8>

0000124c <__divsf3_pse>:
    124c:	99 23       	and	r25, r25
    124e:	b1 f3       	breq	.-20     	; 0x123c <__divsf3+0x1e>
    1250:	55 23       	and	r21, r21
    1252:	91 f3       	breq	.-28     	; 0x1238 <__divsf3+0x1a>
    1254:	95 1b       	sub	r25, r21
    1256:	55 0b       	sbc	r21, r21
    1258:	bb 27       	eor	r27, r27
    125a:	aa 27       	eor	r26, r26
    125c:	62 17       	cp	r22, r18
    125e:	73 07       	cpc	r23, r19
    1260:	84 07       	cpc	r24, r20
    1262:	38 f0       	brcs	.+14     	; 0x1272 <__divsf3_pse+0x26>
    1264:	9f 5f       	subi	r25, 0xFF	; 255
    1266:	5f 4f       	sbci	r21, 0xFF	; 255
    1268:	22 0f       	add	r18, r18
    126a:	33 1f       	adc	r19, r19
    126c:	44 1f       	adc	r20, r20
    126e:	aa 1f       	adc	r26, r26
    1270:	a9 f3       	breq	.-22     	; 0x125c <__divsf3_pse+0x10>
    1272:	35 d0       	rcall	.+106    	; 0x12de <__divsf3_pse+0x92>
    1274:	0e 2e       	mov	r0, r30
    1276:	3a f0       	brmi	.+14     	; 0x1286 <__divsf3_pse+0x3a>
    1278:	e0 e8       	ldi	r30, 0x80	; 128
    127a:	32 d0       	rcall	.+100    	; 0x12e0 <__divsf3_pse+0x94>
    127c:	91 50       	subi	r25, 0x01	; 1
    127e:	50 40       	sbci	r21, 0x00	; 0
    1280:	e6 95       	lsr	r30
    1282:	00 1c       	adc	r0, r0
    1284:	ca f7       	brpl	.-14     	; 0x1278 <__divsf3_pse+0x2c>
    1286:	2b d0       	rcall	.+86     	; 0x12de <__divsf3_pse+0x92>
    1288:	fe 2f       	mov	r31, r30
    128a:	29 d0       	rcall	.+82     	; 0x12de <__divsf3_pse+0x92>
    128c:	66 0f       	add	r22, r22
    128e:	77 1f       	adc	r23, r23
    1290:	88 1f       	adc	r24, r24
    1292:	bb 1f       	adc	r27, r27
    1294:	26 17       	cp	r18, r22
    1296:	37 07       	cpc	r19, r23
    1298:	48 07       	cpc	r20, r24
    129a:	ab 07       	cpc	r26, r27
    129c:	b0 e8       	ldi	r27, 0x80	; 128
    129e:	09 f0       	breq	.+2      	; 0x12a2 <__divsf3_pse+0x56>
    12a0:	bb 0b       	sbc	r27, r27
    12a2:	80 2d       	mov	r24, r0
    12a4:	bf 01       	movw	r22, r30
    12a6:	ff 27       	eor	r31, r31
    12a8:	93 58       	subi	r25, 0x83	; 131
    12aa:	5f 4f       	sbci	r21, 0xFF	; 255
    12ac:	3a f0       	brmi	.+14     	; 0x12bc <__divsf3_pse+0x70>
    12ae:	9e 3f       	cpi	r25, 0xFE	; 254
    12b0:	51 05       	cpc	r21, r1
    12b2:	78 f0       	brcs	.+30     	; 0x12d2 <__divsf3_pse+0x86>
    12b4:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__fp_inf>
    12b8:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__fp_szero>
    12bc:	5f 3f       	cpi	r21, 0xFF	; 255
    12be:	e4 f3       	brlt	.-8      	; 0x12b8 <__divsf3_pse+0x6c>
    12c0:	98 3e       	cpi	r25, 0xE8	; 232
    12c2:	d4 f3       	brlt	.-12     	; 0x12b8 <__divsf3_pse+0x6c>
    12c4:	86 95       	lsr	r24
    12c6:	77 95       	ror	r23
    12c8:	67 95       	ror	r22
    12ca:	b7 95       	ror	r27
    12cc:	f7 95       	ror	r31
    12ce:	9f 5f       	subi	r25, 0xFF	; 255
    12d0:	c9 f7       	brne	.-14     	; 0x12c4 <__divsf3_pse+0x78>
    12d2:	88 0f       	add	r24, r24
    12d4:	91 1d       	adc	r25, r1
    12d6:	96 95       	lsr	r25
    12d8:	87 95       	ror	r24
    12da:	97 f9       	bld	r25, 7
    12dc:	08 95       	ret
    12de:	e1 e0       	ldi	r30, 0x01	; 1
    12e0:	66 0f       	add	r22, r22
    12e2:	77 1f       	adc	r23, r23
    12e4:	88 1f       	adc	r24, r24
    12e6:	bb 1f       	adc	r27, r27
    12e8:	62 17       	cp	r22, r18
    12ea:	73 07       	cpc	r23, r19
    12ec:	84 07       	cpc	r24, r20
    12ee:	ba 07       	cpc	r27, r26
    12f0:	20 f0       	brcs	.+8      	; 0x12fa <__divsf3_pse+0xae>
    12f2:	62 1b       	sub	r22, r18
    12f4:	73 0b       	sbc	r23, r19
    12f6:	84 0b       	sbc	r24, r20
    12f8:	ba 0b       	sbc	r27, r26
    12fa:	ee 1f       	adc	r30, r30
    12fc:	88 f7       	brcc	.-30     	; 0x12e0 <__divsf3_pse+0x94>
    12fe:	e0 95       	com	r30
    1300:	08 95       	ret

00001302 <__fixunssfsi>:
    1302:	0e 94 1d 0a 	call	0x143a	; 0x143a <__fp_splitA>
    1306:	88 f0       	brcs	.+34     	; 0x132a <__fixunssfsi+0x28>
    1308:	9f 57       	subi	r25, 0x7F	; 127
    130a:	98 f0       	brcs	.+38     	; 0x1332 <__fixunssfsi+0x30>
    130c:	b9 2f       	mov	r27, r25
    130e:	99 27       	eor	r25, r25
    1310:	b7 51       	subi	r27, 0x17	; 23
    1312:	b0 f0       	brcs	.+44     	; 0x1340 <__fixunssfsi+0x3e>
    1314:	e1 f0       	breq	.+56     	; 0x134e <__fixunssfsi+0x4c>
    1316:	66 0f       	add	r22, r22
    1318:	77 1f       	adc	r23, r23
    131a:	88 1f       	adc	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	1a f0       	brmi	.+6      	; 0x1326 <__fixunssfsi+0x24>
    1320:	ba 95       	dec	r27
    1322:	c9 f7       	brne	.-14     	; 0x1316 <__fixunssfsi+0x14>
    1324:	14 c0       	rjmp	.+40     	; 0x134e <__fixunssfsi+0x4c>
    1326:	b1 30       	cpi	r27, 0x01	; 1
    1328:	91 f0       	breq	.+36     	; 0x134e <__fixunssfsi+0x4c>
    132a:	0e 94 37 0a 	call	0x146e	; 0x146e <__fp_zero>
    132e:	b1 e0       	ldi	r27, 0x01	; 1
    1330:	08 95       	ret
    1332:	0c 94 37 0a 	jmp	0x146e	; 0x146e <__fp_zero>
    1336:	67 2f       	mov	r22, r23
    1338:	78 2f       	mov	r23, r24
    133a:	88 27       	eor	r24, r24
    133c:	b8 5f       	subi	r27, 0xF8	; 248
    133e:	39 f0       	breq	.+14     	; 0x134e <__fixunssfsi+0x4c>
    1340:	b9 3f       	cpi	r27, 0xF9	; 249
    1342:	cc f3       	brlt	.-14     	; 0x1336 <__fixunssfsi+0x34>
    1344:	86 95       	lsr	r24
    1346:	77 95       	ror	r23
    1348:	67 95       	ror	r22
    134a:	b3 95       	inc	r27
    134c:	d9 f7       	brne	.-10     	; 0x1344 <__fixunssfsi+0x42>
    134e:	3e f4       	brtc	.+14     	; 0x135e <__fixunssfsi+0x5c>
    1350:	90 95       	com	r25
    1352:	80 95       	com	r24
    1354:	70 95       	com	r23
    1356:	61 95       	neg	r22
    1358:	7f 4f       	sbci	r23, 0xFF	; 255
    135a:	8f 4f       	sbci	r24, 0xFF	; 255
    135c:	9f 4f       	sbci	r25, 0xFF	; 255
    135e:	08 95       	ret

00001360 <__floatunsisf>:
    1360:	e8 94       	clt
    1362:	09 c0       	rjmp	.+18     	; 0x1376 <__floatsisf+0x12>

00001364 <__floatsisf>:
    1364:	97 fb       	bst	r25, 7
    1366:	3e f4       	brtc	.+14     	; 0x1376 <__floatsisf+0x12>
    1368:	90 95       	com	r25
    136a:	80 95       	com	r24
    136c:	70 95       	com	r23
    136e:	61 95       	neg	r22
    1370:	7f 4f       	sbci	r23, 0xFF	; 255
    1372:	8f 4f       	sbci	r24, 0xFF	; 255
    1374:	9f 4f       	sbci	r25, 0xFF	; 255
    1376:	99 23       	and	r25, r25
    1378:	a9 f0       	breq	.+42     	; 0x13a4 <__floatsisf+0x40>
    137a:	f9 2f       	mov	r31, r25
    137c:	96 e9       	ldi	r25, 0x96	; 150
    137e:	bb 27       	eor	r27, r27
    1380:	93 95       	inc	r25
    1382:	f6 95       	lsr	r31
    1384:	87 95       	ror	r24
    1386:	77 95       	ror	r23
    1388:	67 95       	ror	r22
    138a:	b7 95       	ror	r27
    138c:	f1 11       	cpse	r31, r1
    138e:	f8 cf       	rjmp	.-16     	; 0x1380 <__floatsisf+0x1c>
    1390:	fa f4       	brpl	.+62     	; 0x13d0 <__floatsisf+0x6c>
    1392:	bb 0f       	add	r27, r27
    1394:	11 f4       	brne	.+4      	; 0x139a <__floatsisf+0x36>
    1396:	60 ff       	sbrs	r22, 0
    1398:	1b c0       	rjmp	.+54     	; 0x13d0 <__floatsisf+0x6c>
    139a:	6f 5f       	subi	r22, 0xFF	; 255
    139c:	7f 4f       	sbci	r23, 0xFF	; 255
    139e:	8f 4f       	sbci	r24, 0xFF	; 255
    13a0:	9f 4f       	sbci	r25, 0xFF	; 255
    13a2:	16 c0       	rjmp	.+44     	; 0x13d0 <__floatsisf+0x6c>
    13a4:	88 23       	and	r24, r24
    13a6:	11 f0       	breq	.+4      	; 0x13ac <__floatsisf+0x48>
    13a8:	96 e9       	ldi	r25, 0x96	; 150
    13aa:	11 c0       	rjmp	.+34     	; 0x13ce <__floatsisf+0x6a>
    13ac:	77 23       	and	r23, r23
    13ae:	21 f0       	breq	.+8      	; 0x13b8 <__floatsisf+0x54>
    13b0:	9e e8       	ldi	r25, 0x8E	; 142
    13b2:	87 2f       	mov	r24, r23
    13b4:	76 2f       	mov	r23, r22
    13b6:	05 c0       	rjmp	.+10     	; 0x13c2 <__floatsisf+0x5e>
    13b8:	66 23       	and	r22, r22
    13ba:	71 f0       	breq	.+28     	; 0x13d8 <__floatsisf+0x74>
    13bc:	96 e8       	ldi	r25, 0x86	; 134
    13be:	86 2f       	mov	r24, r22
    13c0:	70 e0       	ldi	r23, 0x00	; 0
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	2a f0       	brmi	.+10     	; 0x13d0 <__floatsisf+0x6c>
    13c6:	9a 95       	dec	r25
    13c8:	66 0f       	add	r22, r22
    13ca:	77 1f       	adc	r23, r23
    13cc:	88 1f       	adc	r24, r24
    13ce:	da f7       	brpl	.-10     	; 0x13c6 <__floatsisf+0x62>
    13d0:	88 0f       	add	r24, r24
    13d2:	96 95       	lsr	r25
    13d4:	87 95       	ror	r24
    13d6:	97 f9       	bld	r25, 7
    13d8:	08 95       	ret

000013da <__fp_inf>:
    13da:	97 f9       	bld	r25, 7
    13dc:	9f 67       	ori	r25, 0x7F	; 127
    13de:	80 e8       	ldi	r24, 0x80	; 128
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	08 95       	ret

000013e6 <__fp_nan>:
    13e6:	9f ef       	ldi	r25, 0xFF	; 255
    13e8:	80 ec       	ldi	r24, 0xC0	; 192
    13ea:	08 95       	ret

000013ec <__fp_pscA>:
    13ec:	00 24       	eor	r0, r0
    13ee:	0a 94       	dec	r0
    13f0:	16 16       	cp	r1, r22
    13f2:	17 06       	cpc	r1, r23
    13f4:	18 06       	cpc	r1, r24
    13f6:	09 06       	cpc	r0, r25
    13f8:	08 95       	ret

000013fa <__fp_pscB>:
    13fa:	00 24       	eor	r0, r0
    13fc:	0a 94       	dec	r0
    13fe:	12 16       	cp	r1, r18
    1400:	13 06       	cpc	r1, r19
    1402:	14 06       	cpc	r1, r20
    1404:	05 06       	cpc	r0, r21
    1406:	08 95       	ret

00001408 <__fp_round>:
    1408:	09 2e       	mov	r0, r25
    140a:	03 94       	inc	r0
    140c:	00 0c       	add	r0, r0
    140e:	11 f4       	brne	.+4      	; 0x1414 <__fp_round+0xc>
    1410:	88 23       	and	r24, r24
    1412:	52 f0       	brmi	.+20     	; 0x1428 <__fp_round+0x20>
    1414:	bb 0f       	add	r27, r27
    1416:	40 f4       	brcc	.+16     	; 0x1428 <__fp_round+0x20>
    1418:	bf 2b       	or	r27, r31
    141a:	11 f4       	brne	.+4      	; 0x1420 <__fp_round+0x18>
    141c:	60 ff       	sbrs	r22, 0
    141e:	04 c0       	rjmp	.+8      	; 0x1428 <__fp_round+0x20>
    1420:	6f 5f       	subi	r22, 0xFF	; 255
    1422:	7f 4f       	sbci	r23, 0xFF	; 255
    1424:	8f 4f       	sbci	r24, 0xFF	; 255
    1426:	9f 4f       	sbci	r25, 0xFF	; 255
    1428:	08 95       	ret

0000142a <__fp_split3>:
    142a:	57 fd       	sbrc	r21, 7
    142c:	90 58       	subi	r25, 0x80	; 128
    142e:	44 0f       	add	r20, r20
    1430:	55 1f       	adc	r21, r21
    1432:	59 f0       	breq	.+22     	; 0x144a <__fp_splitA+0x10>
    1434:	5f 3f       	cpi	r21, 0xFF	; 255
    1436:	71 f0       	breq	.+28     	; 0x1454 <__fp_splitA+0x1a>
    1438:	47 95       	ror	r20

0000143a <__fp_splitA>:
    143a:	88 0f       	add	r24, r24
    143c:	97 fb       	bst	r25, 7
    143e:	99 1f       	adc	r25, r25
    1440:	61 f0       	breq	.+24     	; 0x145a <__fp_splitA+0x20>
    1442:	9f 3f       	cpi	r25, 0xFF	; 255
    1444:	79 f0       	breq	.+30     	; 0x1464 <__fp_splitA+0x2a>
    1446:	87 95       	ror	r24
    1448:	08 95       	ret
    144a:	12 16       	cp	r1, r18
    144c:	13 06       	cpc	r1, r19
    144e:	14 06       	cpc	r1, r20
    1450:	55 1f       	adc	r21, r21
    1452:	f2 cf       	rjmp	.-28     	; 0x1438 <__fp_split3+0xe>
    1454:	46 95       	lsr	r20
    1456:	f1 df       	rcall	.-30     	; 0x143a <__fp_splitA>
    1458:	08 c0       	rjmp	.+16     	; 0x146a <__fp_splitA+0x30>
    145a:	16 16       	cp	r1, r22
    145c:	17 06       	cpc	r1, r23
    145e:	18 06       	cpc	r1, r24
    1460:	99 1f       	adc	r25, r25
    1462:	f1 cf       	rjmp	.-30     	; 0x1446 <__fp_splitA+0xc>
    1464:	86 95       	lsr	r24
    1466:	71 05       	cpc	r23, r1
    1468:	61 05       	cpc	r22, r1
    146a:	08 94       	sec
    146c:	08 95       	ret

0000146e <__fp_zero>:
    146e:	e8 94       	clt

00001470 <__fp_szero>:
    1470:	bb 27       	eor	r27, r27
    1472:	66 27       	eor	r22, r22
    1474:	77 27       	eor	r23, r23
    1476:	cb 01       	movw	r24, r22
    1478:	97 f9       	bld	r25, 7
    147a:	08 95       	ret

0000147c <__mulsf3>:
    147c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__mulsf3x>
    1480:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <__fp_round>
    1484:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__fp_pscA>
    1488:	38 f0       	brcs	.+14     	; 0x1498 <__mulsf3+0x1c>
    148a:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__fp_pscB>
    148e:	20 f0       	brcs	.+8      	; 0x1498 <__mulsf3+0x1c>
    1490:	95 23       	and	r25, r21
    1492:	11 f0       	breq	.+4      	; 0x1498 <__mulsf3+0x1c>
    1494:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__fp_inf>
    1498:	0c 94 f3 09 	jmp	0x13e6	; 0x13e6 <__fp_nan>
    149c:	11 24       	eor	r1, r1
    149e:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__fp_szero>

000014a2 <__mulsf3x>:
    14a2:	0e 94 15 0a 	call	0x142a	; 0x142a <__fp_split3>
    14a6:	70 f3       	brcs	.-36     	; 0x1484 <__mulsf3+0x8>

000014a8 <__mulsf3_pse>:
    14a8:	95 9f       	mul	r25, r21
    14aa:	c1 f3       	breq	.-16     	; 0x149c <__mulsf3+0x20>
    14ac:	95 0f       	add	r25, r21
    14ae:	50 e0       	ldi	r21, 0x00	; 0
    14b0:	55 1f       	adc	r21, r21
    14b2:	62 9f       	mul	r22, r18
    14b4:	f0 01       	movw	r30, r0
    14b6:	72 9f       	mul	r23, r18
    14b8:	bb 27       	eor	r27, r27
    14ba:	f0 0d       	add	r31, r0
    14bc:	b1 1d       	adc	r27, r1
    14be:	63 9f       	mul	r22, r19
    14c0:	aa 27       	eor	r26, r26
    14c2:	f0 0d       	add	r31, r0
    14c4:	b1 1d       	adc	r27, r1
    14c6:	aa 1f       	adc	r26, r26
    14c8:	64 9f       	mul	r22, r20
    14ca:	66 27       	eor	r22, r22
    14cc:	b0 0d       	add	r27, r0
    14ce:	a1 1d       	adc	r26, r1
    14d0:	66 1f       	adc	r22, r22
    14d2:	82 9f       	mul	r24, r18
    14d4:	22 27       	eor	r18, r18
    14d6:	b0 0d       	add	r27, r0
    14d8:	a1 1d       	adc	r26, r1
    14da:	62 1f       	adc	r22, r18
    14dc:	73 9f       	mul	r23, r19
    14de:	b0 0d       	add	r27, r0
    14e0:	a1 1d       	adc	r26, r1
    14e2:	62 1f       	adc	r22, r18
    14e4:	83 9f       	mul	r24, r19
    14e6:	a0 0d       	add	r26, r0
    14e8:	61 1d       	adc	r22, r1
    14ea:	22 1f       	adc	r18, r18
    14ec:	74 9f       	mul	r23, r20
    14ee:	33 27       	eor	r19, r19
    14f0:	a0 0d       	add	r26, r0
    14f2:	61 1d       	adc	r22, r1
    14f4:	23 1f       	adc	r18, r19
    14f6:	84 9f       	mul	r24, r20
    14f8:	60 0d       	add	r22, r0
    14fa:	21 1d       	adc	r18, r1
    14fc:	82 2f       	mov	r24, r18
    14fe:	76 2f       	mov	r23, r22
    1500:	6a 2f       	mov	r22, r26
    1502:	11 24       	eor	r1, r1
    1504:	9f 57       	subi	r25, 0x7F	; 127
    1506:	50 40       	sbci	r21, 0x00	; 0
    1508:	9a f0       	brmi	.+38     	; 0x1530 <__mulsf3_pse+0x88>
    150a:	f1 f0       	breq	.+60     	; 0x1548 <__mulsf3_pse+0xa0>
    150c:	88 23       	and	r24, r24
    150e:	4a f0       	brmi	.+18     	; 0x1522 <__mulsf3_pse+0x7a>
    1510:	ee 0f       	add	r30, r30
    1512:	ff 1f       	adc	r31, r31
    1514:	bb 1f       	adc	r27, r27
    1516:	66 1f       	adc	r22, r22
    1518:	77 1f       	adc	r23, r23
    151a:	88 1f       	adc	r24, r24
    151c:	91 50       	subi	r25, 0x01	; 1
    151e:	50 40       	sbci	r21, 0x00	; 0
    1520:	a9 f7       	brne	.-22     	; 0x150c <__mulsf3_pse+0x64>
    1522:	9e 3f       	cpi	r25, 0xFE	; 254
    1524:	51 05       	cpc	r21, r1
    1526:	80 f0       	brcs	.+32     	; 0x1548 <__mulsf3_pse+0xa0>
    1528:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__fp_inf>
    152c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__fp_szero>
    1530:	5f 3f       	cpi	r21, 0xFF	; 255
    1532:	e4 f3       	brlt	.-8      	; 0x152c <__mulsf3_pse+0x84>
    1534:	98 3e       	cpi	r25, 0xE8	; 232
    1536:	d4 f3       	brlt	.-12     	; 0x152c <__mulsf3_pse+0x84>
    1538:	86 95       	lsr	r24
    153a:	77 95       	ror	r23
    153c:	67 95       	ror	r22
    153e:	b7 95       	ror	r27
    1540:	f7 95       	ror	r31
    1542:	e7 95       	ror	r30
    1544:	9f 5f       	subi	r25, 0xFF	; 255
    1546:	c1 f7       	brne	.-16     	; 0x1538 <__mulsf3_pse+0x90>
    1548:	fe 2b       	or	r31, r30
    154a:	88 0f       	add	r24, r24
    154c:	91 1d       	adc	r25, r1
    154e:	96 95       	lsr	r25
    1550:	87 95       	ror	r24
    1552:	97 f9       	bld	r25, 7
    1554:	08 95       	ret

00001556 <__tablejump2__>:
    1556:	ee 0f       	add	r30, r30
    1558:	ff 1f       	adc	r31, r31
    155a:	05 90       	lpm	r0, Z+
    155c:	f4 91       	lpm	r31, Z
    155e:	e0 2d       	mov	r30, r0
    1560:	09 94       	ijmp

00001562 <strncpy>:
    1562:	fb 01       	movw	r30, r22
    1564:	dc 01       	movw	r26, r24
    1566:	41 50       	subi	r20, 0x01	; 1
    1568:	50 40       	sbci	r21, 0x00	; 0
    156a:	48 f0       	brcs	.+18     	; 0x157e <strncpy+0x1c>
    156c:	01 90       	ld	r0, Z+
    156e:	0d 92       	st	X+, r0
    1570:	00 20       	and	r0, r0
    1572:	c9 f7       	brne	.-14     	; 0x1566 <strncpy+0x4>
    1574:	01 c0       	rjmp	.+2      	; 0x1578 <strncpy+0x16>
    1576:	1d 92       	st	X+, r1
    1578:	41 50       	subi	r20, 0x01	; 1
    157a:	50 40       	sbci	r21, 0x00	; 0
    157c:	e0 f7       	brcc	.-8      	; 0x1576 <strncpy+0x14>
    157e:	08 95       	ret

00001580 <__itoa_ncheck>:
    1580:	bb 27       	eor	r27, r27
    1582:	4a 30       	cpi	r20, 0x0A	; 10
    1584:	31 f4       	brne	.+12     	; 0x1592 <__itoa_ncheck+0x12>
    1586:	99 23       	and	r25, r25
    1588:	22 f4       	brpl	.+8      	; 0x1592 <__itoa_ncheck+0x12>
    158a:	bd e2       	ldi	r27, 0x2D	; 45
    158c:	90 95       	com	r25
    158e:	81 95       	neg	r24
    1590:	9f 4f       	sbci	r25, 0xFF	; 255
    1592:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <__utoa_common>

00001596 <__utoa_ncheck>:
    1596:	bb 27       	eor	r27, r27

00001598 <__utoa_common>:
    1598:	fb 01       	movw	r30, r22
    159a:	55 27       	eor	r21, r21
    159c:	aa 27       	eor	r26, r26
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	aa 1f       	adc	r26, r26
    15a4:	a4 17       	cp	r26, r20
    15a6:	10 f0       	brcs	.+4      	; 0x15ac <__utoa_common+0x14>
    15a8:	a4 1b       	sub	r26, r20
    15aa:	83 95       	inc	r24
    15ac:	50 51       	subi	r21, 0x10	; 16
    15ae:	b9 f7       	brne	.-18     	; 0x159e <__utoa_common+0x6>
    15b0:	a0 5d       	subi	r26, 0xD0	; 208
    15b2:	aa 33       	cpi	r26, 0x3A	; 58
    15b4:	08 f0       	brcs	.+2      	; 0x15b8 <__utoa_common+0x20>
    15b6:	a9 5d       	subi	r26, 0xD9	; 217
    15b8:	a1 93       	st	Z+, r26
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	79 f7       	brne	.-34     	; 0x159c <__utoa_common+0x4>
    15be:	b1 11       	cpse	r27, r1
    15c0:	b1 93       	st	Z+, r27
    15c2:	11 92       	st	Z+, r1
    15c4:	cb 01       	movw	r24, r22
    15c6:	0c 94 e5 0a 	jmp	0x15ca	; 0x15ca <strrev>

000015ca <strrev>:
    15ca:	dc 01       	movw	r26, r24
    15cc:	fc 01       	movw	r30, r24
    15ce:	67 2f       	mov	r22, r23
    15d0:	71 91       	ld	r23, Z+
    15d2:	77 23       	and	r23, r23
    15d4:	e1 f7       	brne	.-8      	; 0x15ce <strrev+0x4>
    15d6:	32 97       	sbiw	r30, 0x02	; 2
    15d8:	04 c0       	rjmp	.+8      	; 0x15e2 <strrev+0x18>
    15da:	7c 91       	ld	r23, X
    15dc:	6d 93       	st	X+, r22
    15de:	70 83       	st	Z, r23
    15e0:	62 91       	ld	r22, -Z
    15e2:	ae 17       	cp	r26, r30
    15e4:	bf 07       	cpc	r27, r31
    15e6:	c8 f3       	brcs	.-14     	; 0x15da <strrev+0x10>
    15e8:	08 95       	ret

000015ea <_exit>:
    15ea:	f8 94       	cli

000015ec <__stop_program>:
    15ec:	ff cf       	rjmp	.-2      	; 0x15ec <__stop_program>
