
Project_DAC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000036a  00800100  00001558  000015ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001558  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000043b  0080046a  0080046a  00001956  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001956  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001988  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000019c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c12  00000000  00000000  00001b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c95  00000000  00000000  00003722  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001055  00000000  00000000  000043b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003fc  00000000  00000000  0000540c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c9  00000000  00000000  00005808  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001895  00000000  00000000  00005ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  00007766  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 43 03 	jmp	0x686	; 0x686 <__vector_9>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_16>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <__vector_18>
      4c:	0c 94 f0 07 	jmp	0xfe0	; 0xfe0 <__vector_19>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	55 04       	cpc	r5, r5
      6a:	51 04       	cpc	r5, r1
      6c:	4c 04       	cpc	r4, r12
      6e:	47 04       	cpc	r4, r7
      70:	42 04       	cpc	r4, r2
      72:	3d 04       	cpc	r3, r13
      74:	38 04       	cpc	r3, r8
      76:	33 04       	cpc	r3, r3
      78:	2e 04       	cpc	r2, r14
      7a:	99 06       	cpc	r9, r25
      7c:	a5 06       	cpc	r10, r21
      7e:	ad 06       	cpc	r10, r29
      80:	b5 06       	cpc	r11, r21
      82:	bd 06       	cpc	r11, r29
      84:	c5 06       	cpc	r12, r21
      86:	cd 06       	cpc	r12, r29
      88:	d9 06       	cpc	r13, r25
      8a:	e5 06       	cpc	r14, r21

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e5       	ldi	r30, 0x58	; 88
      a0:	f5 e1       	ldi	r31, 0x15	; 21
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	aa 36       	cpi	r26, 0x6A	; 106
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	28 e0       	ldi	r18, 0x08	; 8
      b0:	aa e6       	ldi	r26, 0x6A	; 106
      b2:	b4 e0       	ldi	r27, 0x04	; 4
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a5 3a       	cpi	r26, 0xA5	; 165
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 36 02 	call	0x46c	; 0x46c <main>
      c2:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
      ca:	5b 9a       	sbi	0x0b, 3	; 11
      cc:	85 e0       	ldi	r24, 0x05	; 5
      ce:	8a 95       	dec	r24
      d0:	f1 f7       	brne	.-4      	; 0xce <toggle_e+0x4>
      d2:	00 00       	nop
      d4:	5b 98       	cbi	0x0b, 3	; 11
      d6:	08 95       	ret

000000d8 <lcd_write>:
      d8:	cf 93       	push	r28
      da:	c8 2f       	mov	r28, r24
      dc:	66 23       	and	r22, r22
      de:	11 f0       	breq	.+4      	; 0xe4 <lcd_write+0xc>
      e0:	5a 9a       	sbi	0x0b, 2	; 11
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <lcd_write+0xe>
      e4:	5a 98       	cbi	0x0b, 2	; 11
      e6:	54 9a       	sbi	0x0a, 4	; 10
      e8:	55 9a       	sbi	0x0a, 5	; 10
      ea:	56 9a       	sbi	0x0a, 6	; 10
      ec:	57 9a       	sbi	0x0a, 7	; 10
      ee:	5f 98       	cbi	0x0b, 7	; 11
      f0:	5e 98       	cbi	0x0b, 6	; 11
      f2:	5d 98       	cbi	0x0b, 5	; 11
      f4:	5c 98       	cbi	0x0b, 4	; 11
      f6:	cc 23       	and	r28, r28
      f8:	0c f4       	brge	.+2      	; 0xfc <lcd_write+0x24>
      fa:	5f 9a       	sbi	0x0b, 7	; 11
      fc:	c6 fd       	sbrc	r28, 6
      fe:	5e 9a       	sbi	0x0b, 6	; 11
     100:	c5 fd       	sbrc	r28, 5
     102:	5d 9a       	sbi	0x0b, 5	; 11
     104:	c4 fd       	sbrc	r28, 4
     106:	5c 9a       	sbi	0x0b, 4	; 11
     108:	0e 94 65 00 	call	0xca	; 0xca <toggle_e>
     10c:	5f 98       	cbi	0x0b, 7	; 11
     10e:	5e 98       	cbi	0x0b, 6	; 11
     110:	5d 98       	cbi	0x0b, 5	; 11
     112:	5c 98       	cbi	0x0b, 4	; 11
     114:	c3 fd       	sbrc	r28, 3
     116:	5f 9a       	sbi	0x0b, 7	; 11
     118:	c2 fd       	sbrc	r28, 2
     11a:	5e 9a       	sbi	0x0b, 6	; 11
     11c:	c1 fd       	sbrc	r28, 1
     11e:	5d 9a       	sbi	0x0b, 5	; 11
     120:	c0 fd       	sbrc	r28, 0
     122:	5c 9a       	sbi	0x0b, 4	; 11
     124:	0e 94 65 00 	call	0xca	; 0xca <toggle_e>
     128:	5c 9a       	sbi	0x0b, 4	; 11
     12a:	5d 9a       	sbi	0x0b, 5	; 11
     12c:	5e 9a       	sbi	0x0b, 6	; 11
     12e:	5f 9a       	sbi	0x0b, 7	; 11
     130:	87 eb       	ldi	r24, 0xB7	; 183
     132:	9b e0       	ldi	r25, 0x0B	; 11
     134:	01 97       	sbiw	r24, 0x01	; 1
     136:	f1 f7       	brne	.-4      	; 0x134 <lcd_write+0x5c>
     138:	00 c0       	rjmp	.+0      	; 0x13a <lcd_write+0x62>
     13a:	00 00       	nop
     13c:	cf 91       	pop	r28
     13e:	08 95       	ret

00000140 <lcd_command>:
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_write>
     146:	08 95       	ret

00000148 <lcd_gotoxy>:
     148:	61 11       	cpse	r22, r1
     14a:	04 c0       	rjmp	.+8      	; 0x154 <lcd_gotoxy+0xc>
     14c:	80 58       	subi	r24, 0x80	; 128
     14e:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
     152:	08 95       	ret
     154:	80 54       	subi	r24, 0x40	; 64
     156:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
     15a:	08 95       	ret

0000015c <lcd_clrscr>:
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
     162:	08 95       	ret

00000164 <lcd_putc>:
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_write>
     16a:	08 95       	ret

0000016c <lcd_puts>:
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	ec 01       	movw	r28, r24
     172:	21 96       	adiw	r28, 0x01	; 1
     174:	fc 01       	movw	r30, r24
     176:	80 81       	ld	r24, Z
     178:	88 23       	and	r24, r24
     17a:	29 f0       	breq	.+10     	; 0x186 <lcd_puts+0x1a>
     17c:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_putc>
     180:	89 91       	ld	r24, Y+
     182:	81 11       	cpse	r24, r1
     184:	fb cf       	rjmp	.-10     	; 0x17c <lcd_puts+0x10>
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     18c:	cf 93       	push	r28
     18e:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     190:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     192:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     194:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     196:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     198:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     19a:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     19c:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     19e:	8f ef       	ldi	r24, 0xFF	; 255
     1a0:	99 ef       	ldi	r25, 0xF9	; 249
     1a2:	01 97       	sbiw	r24, 0x01	; 1
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x16>
     1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x1c>
     1a8:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
     1aa:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
     1ac:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
     1ae:	0e 94 65 00 	call	0xca	; 0xca <toggle_e>
     1b2:	8f e1       	ldi	r24, 0x1F	; 31
     1b4:	9e e4       	ldi	r25, 0x4E	; 78
     1b6:	01 97       	sbiw	r24, 0x01	; 1
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_init+0x2a>
     1ba:	00 c0       	rjmp	.+0      	; 0x1bc <lcd_init+0x30>
     1bc:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
     1be:	0e 94 65 00 	call	0xca	; 0xca <toggle_e>
     1c2:	8f ef       	ldi	r24, 0xFF	; 255
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	01 97       	sbiw	r24, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_init+0x3a>
     1ca:	00 c0       	rjmp	.+0      	; 0x1cc <lcd_init+0x40>
     1cc:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
     1ce:	0e 94 65 00 	call	0xca	; 0xca <toggle_e>
     1d2:	8f ef       	ldi	r24, 0xFF	; 255
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	01 97       	sbiw	r24, 0x01	; 1
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <lcd_init+0x4a>
     1da:	00 c0       	rjmp	.+0      	; 0x1dc <lcd_init+0x50>
     1dc:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
     1de:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
     1e0:	0e 94 65 00 	call	0xca	; 0xca <toggle_e>
     1e4:	8f ef       	ldi	r24, 0xFF	; 255
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	01 97       	sbiw	r24, 0x01	; 1
     1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcd_init+0x5c>
     1ec:	00 c0       	rjmp	.+0      	; 0x1ee <lcd_init+0x62>
     1ee:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
     1f0:	88 e2       	ldi	r24, 0x28	; 40
     1f2:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
     1f6:	88 e0       	ldi	r24, 0x08	; 8
     1f8:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
    lcd_clrscr();                  /* display clear                */
     1fc:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
     200:	86 e0       	ldi	r24, 0x06	; 6
     202:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
     206:	8c 2f       	mov	r24, r28
     208:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
}/* lcd_init */
     20c:	cf 91       	pop	r28
     20e:	08 95       	ret

00000210 <__vector_16>:


/** @brief  Frame buffer update timer (main sampling clock generator) moves in frame buffer
*/
ISR(TIMER0_OVF_vect)
{
     210:	1f 92       	push	r1
     212:	0f 92       	push	r0
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	0f 92       	push	r0
     218:	11 24       	eor	r1, r1
     21a:	2f 93       	push	r18
     21c:	3f 93       	push	r19
     21e:	8f 93       	push	r24
     220:	9f 93       	push	r25
     222:	ef 93       	push	r30
     224:	ff 93       	push	r31
	static uint16_t index = 0;

	


	if (index < arr_size -1)					//  if at end of active array portion move to start
     226:	20 91 72 04 	lds	r18, 0x0472	; 0x800472 <index.2123>
     22a:	30 91 73 04 	lds	r19, 0x0473	; 0x800473 <index.2123+0x1>
     22e:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <arr_size>
     232:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <arr_size+0x1>
     236:	01 97       	sbiw	r24, 0x01	; 1
     238:	28 17       	cp	r18, r24
     23a:	39 07       	cpc	r19, r25
     23c:	38 f4       	brcc	.+14     	; 0x24c <__vector_16+0x3c>
	{
		
		index++;
     23e:	2f 5f       	subi	r18, 0xFF	; 255
     240:	3f 4f       	sbci	r19, 0xFF	; 255
     242:	30 93 73 04 	sts	0x0473, r19	; 0x800473 <index.2123+0x1>
     246:	20 93 72 04 	sts	0x0472, r18	; 0x800472 <index.2123>
     24a:	08 c0       	rjmp	.+16     	; 0x25c <__vector_16+0x4c>
	}
	else
	{
		
		index=0;								// clear index 2cyc
     24c:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <index.2123+0x1>
     250:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <index.2123>
		
		asm("STS 0x0124,R1");					// balancing branches 2cyc
     254:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <timer_values+0x17>
		asm("STS 0x0124,R1");					// balancing branches 2cyc
     258:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <timer_values+0x17>
		
	}

	PORTB = frame_buffer[index];				// output the data
     25c:	e0 91 72 04 	lds	r30, 0x0472	; 0x800472 <index.2123>
     260:	f0 91 73 04 	lds	r31, 0x0473	; 0x800473 <index.2123+0x1>
     264:	e3 54       	subi	r30, 0x43	; 67
     266:	fb 4f       	sbci	r31, 0xFB	; 251
     268:	80 81       	ld	r24, Z
     26a:	85 b9       	out	0x05, r24	; 5

}
     26c:	ff 91       	pop	r31
     26e:	ef 91       	pop	r30
     270:	9f 91       	pop	r25
     272:	8f 91       	pop	r24
     274:	3f 91       	pop	r19
     276:	2f 91       	pop	r18
     278:	0f 90       	pop	r0
     27a:	0f be       	out	0x3f, r0	; 63
     27c:	0f 90       	pop	r0
     27e:	1f 90       	pop	r1
     280:	18 95       	reti

00000282 <change_size>:




void change_size()													// change the active frame buffer size to contain whole period
{
     282:	cf 92       	push	r12
     284:	df 92       	push	r13
     286:	ef 92       	push	r14
     288:	ff 92       	push	r15
     28a:	cf 93       	push	r28
	static uint8_t timer_index = 0;
	uint8_t stop=0;
	arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);
     28c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <frequency>
     290:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <frequency+0x1>
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 65 09 	call	0x12ca	; 0x12ca <__floatunsisf>
     29c:	9b 01       	movw	r18, r22
     29e:	ac 01       	movw	r20, r24
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	80 e8       	ldi	r24, 0x80	; 128
     2a6:	9f e3       	ldi	r25, 0x3F	; 63
     2a8:	0e 94 c4 08 	call	0x1188	; 0x1188 <__divsf3>
     2ac:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <tim_set>
     2b0:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <tim_set+0x1>
     2b4:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <tim_set+0x2>
     2b8:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <tim_set+0x3>
     2bc:	0e 94 c4 08 	call	0x1188	; 0x1188 <__divsf3>
     2c0:	0e 94 36 09 	call	0x126c	; 0x126c <__fixunssfsi>
     2c4:	70 93 75 04 	sts	0x0475, r23	; 0x800475 <arr_size+0x1>
     2c8:	60 93 74 04 	sts	0x0474, r22	; 0x800474 <arr_size>

	while (arr_size > 1000 && timer_index < 3)						// if the signal does not fit change the timer and try again
     2cc:	69 3e       	cpi	r22, 0xE9	; 233
     2ce:	73 40       	sbci	r23, 0x03	; 3
     2d0:	e8 f1       	brcs	.+122    	; 0x34c <change_size+0xca>
     2d2:	c0 91 6a 04 	lds	r28, 0x046A	; 0x80046a <__data_end>
     2d6:	c3 30       	cpi	r28, 0x03	; 3
     2d8:	d8 f5       	brcc	.+118    	; 0x350 <change_size+0xce>
     2da:	cf 5f       	subi	r28, 0xFF	; 255
     2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <change_size+0x5e>
     2de:	c8 2f       	mov	r28, r24
	{
		tim_set = timer_values[++timer_index];
     2e0:	ec 2f       	mov	r30, r28
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	ee 0f       	add	r30, r30
     2e6:	ff 1f       	adc	r31, r31
     2e8:	ee 0f       	add	r30, r30
     2ea:	ff 1f       	adc	r31, r31
     2ec:	e3 5f       	subi	r30, 0xF3	; 243
     2ee:	fe 4f       	sbci	r31, 0xFE	; 254
     2f0:	c0 80       	ld	r12, Z
     2f2:	d1 80       	ldd	r13, Z+1	; 0x01
     2f4:	e2 80       	ldd	r14, Z+2	; 0x02
     2f6:	f3 80       	ldd	r15, Z+3	; 0x03
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);
     2f8:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <frequency>
     2fc:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <frequency+0x1>
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 65 09 	call	0x12ca	; 0x12ca <__floatunsisf>
     308:	9b 01       	movw	r18, r22
     30a:	ac 01       	movw	r20, r24
     30c:	60 e0       	ldi	r22, 0x00	; 0
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	80 e8       	ldi	r24, 0x80	; 128
     312:	9f e3       	ldi	r25, 0x3F	; 63
     314:	0e 94 c4 08 	call	0x1188	; 0x1188 <__divsf3>
     318:	a7 01       	movw	r20, r14
     31a:	96 01       	movw	r18, r12
     31c:	0e 94 c4 08 	call	0x1188	; 0x1188 <__divsf3>
     320:	0e 94 36 09 	call	0x126c	; 0x126c <__fixunssfsi>
{
	static uint8_t timer_index = 0;
	uint8_t stop=0;
	arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);

	while (arr_size > 1000 && timer_index < 3)						// if the signal does not fit change the timer and try again
     324:	69 3e       	cpi	r22, 0xE9	; 233
     326:	83 e0       	ldi	r24, 0x03	; 3
     328:	78 07       	cpc	r23, r24
     32a:	18 f5       	brcc	.+70     	; 0x372 <change_size+0xf0>
     32c:	c0 93 6a 04 	sts	0x046A, r28	; 0x80046a <__data_end>
     330:	c0 92 01 01 	sts	0x0101, r12	; 0x800101 <tim_set>
     334:	d0 92 02 01 	sts	0x0102, r13	; 0x800102 <tim_set+0x1>
     338:	e0 92 03 01 	sts	0x0103, r14	; 0x800103 <tim_set+0x2>
     33c:	f0 92 04 01 	sts	0x0104, r15	; 0x800104 <tim_set+0x3>
     340:	70 93 75 04 	sts	0x0475, r23	; 0x800475 <arr_size+0x1>
     344:	60 93 74 04 	sts	0x0474, r22	; 0x800474 <arr_size>
	{
		tim_set = timer_values[++timer_index];
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);
		stop=1;
     348:	21 e0       	ldi	r18, 0x01	; 1
     34a:	03 c0       	rjmp	.+6      	; 0x352 <change_size+0xd0>


void change_size()													// change the active frame buffer size to contain whole period
{
	static uint8_t timer_index = 0;
	uint8_t stop=0;
     34c:	20 e0       	ldi	r18, 0x00	; 0
     34e:	01 c0       	rjmp	.+2      	; 0x352 <change_size+0xd0>
     350:	20 e0       	ldi	r18, 0x00	; 0
		tim_set = timer_values[++timer_index];
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);
		stop=1;
	}

	while (arr_size < 255 && timer_index>0 && stop==0)				// if it fits and is small try increasing it by making the sampling frequency larger
     352:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <arr_size>
     356:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <arr_size+0x1>
     35a:	8f 3f       	cpi	r24, 0xFF	; 255
     35c:	91 05       	cpc	r25, r1
     35e:	08 f0       	brcs	.+2      	; 0x362 <change_size+0xe0>
     360:	63 c0       	rjmp	.+198    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     362:	c0 91 6a 04 	lds	r28, 0x046A	; 0x80046a <__data_end>
     366:	cc 23       	and	r28, r28
     368:	09 f4       	brne	.+2      	; 0x36c <change_size+0xea>
     36a:	66 c0       	rjmp	.+204    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     36c:	22 23       	and	r18, r18
     36e:	b1 f0       	breq	.+44     	; 0x39c <change_size+0x11a>
     370:	5b c0       	rjmp	.+182    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	8c 0f       	add	r24, r28
{
	static uint8_t timer_index = 0;
	uint8_t stop=0;
	arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);

	while (arr_size > 1000 && timer_index < 3)						// if the signal does not fit change the timer and try again
     376:	84 30       	cpi	r24, 0x04	; 4
     378:	09 f0       	breq	.+2      	; 0x37c <change_size+0xfa>
     37a:	b1 cf       	rjmp	.-158    	; 0x2de <change_size+0x5c>
     37c:	c0 93 6a 04 	sts	0x046A, r28	; 0x80046a <__data_end>
     380:	c0 92 01 01 	sts	0x0101, r12	; 0x800101 <tim_set>
     384:	d0 92 02 01 	sts	0x0102, r13	; 0x800102 <tim_set+0x1>
     388:	e0 92 03 01 	sts	0x0103, r14	; 0x800103 <tim_set+0x2>
     38c:	f0 92 04 01 	sts	0x0104, r15	; 0x800104 <tim_set+0x3>
     390:	70 93 75 04 	sts	0x0475, r23	; 0x800475 <arr_size+0x1>
     394:	60 93 74 04 	sts	0x0474, r22	; 0x800474 <arr_size>
	{
		tim_set = timer_values[++timer_index];
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);
		stop=1;
     398:	21 e0       	ldi	r18, 0x01	; 1
     39a:	db cf       	rjmp	.-74     	; 0x352 <change_size+0xd0>
	}

	while (arr_size < 255 && timer_index>0 && stop==0)				// if it fits and is small try increasing it by making the sampling frequency larger
	{
		tim_set = timer_values[--timer_index];
     39c:	c1 50       	subi	r28, 0x01	; 1
     39e:	ec 2f       	mov	r30, r28
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	ee 0f       	add	r30, r30
     3a4:	ff 1f       	adc	r31, r31
     3a6:	ee 0f       	add	r30, r30
     3a8:	ff 1f       	adc	r31, r31
     3aa:	e3 5f       	subi	r30, 0xF3	; 243
     3ac:	fe 4f       	sbci	r31, 0xFE	; 254
     3ae:	c0 80       	ld	r12, Z
     3b0:	d1 80       	ldd	r13, Z+1	; 0x01
     3b2:	e2 80       	ldd	r14, Z+2	; 0x02
     3b4:	f3 80       	ldd	r15, Z+3	; 0x03
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);
     3b6:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <frequency>
     3ba:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <frequency+0x1>
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 65 09 	call	0x12ca	; 0x12ca <__floatunsisf>
     3c6:	9b 01       	movw	r18, r22
     3c8:	ac 01       	movw	r20, r24
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	70 e0       	ldi	r23, 0x00	; 0
     3ce:	80 e8       	ldi	r24, 0x80	; 128
     3d0:	9f e3       	ldi	r25, 0x3F	; 63
     3d2:	0e 94 c4 08 	call	0x1188	; 0x1188 <__divsf3>
     3d6:	a7 01       	movw	r20, r14
     3d8:	96 01       	movw	r18, r12
     3da:	0e 94 c4 08 	call	0x1188	; 0x1188 <__divsf3>
     3de:	0e 94 36 09 	call	0x126c	; 0x126c <__fixunssfsi>
		tim_set = timer_values[++timer_index];
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);
		stop=1;
	}

	while (arr_size < 255 && timer_index>0 && stop==0)				// if it fits and is small try increasing it by making the sampling frequency larger
     3e2:	6f 3f       	cpi	r22, 0xFF	; 255
     3e4:	71 05       	cpc	r23, r1
     3e6:	78 f0       	brcs	.+30     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3e8:	c0 93 6a 04 	sts	0x046A, r28	; 0x80046a <__data_end>
     3ec:	c0 92 01 01 	sts	0x0101, r12	; 0x800101 <tim_set>
     3f0:	d0 92 02 01 	sts	0x0102, r13	; 0x800102 <tim_set+0x1>
     3f4:	e0 92 03 01 	sts	0x0103, r14	; 0x800103 <tim_set+0x2>
     3f8:	f0 92 04 01 	sts	0x0104, r15	; 0x800104 <tim_set+0x3>
     3fc:	70 93 75 04 	sts	0x0475, r23	; 0x800475 <arr_size+0x1>
     400:	60 93 74 04 	sts	0x0474, r22	; 0x800474 <arr_size>
     404:	11 c0       	rjmp	.+34     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     406:	c1 11       	cpse	r28, r1
     408:	c9 cf       	rjmp	.-110    	; 0x39c <change_size+0x11a>
     40a:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <__data_end>
     40e:	c0 92 01 01 	sts	0x0101, r12	; 0x800101 <tim_set>
     412:	d0 92 02 01 	sts	0x0102, r13	; 0x800102 <tim_set+0x1>
     416:	e0 92 03 01 	sts	0x0103, r14	; 0x800103 <tim_set+0x2>
     41a:	f0 92 04 01 	sts	0x0104, r15	; 0x800104 <tim_set+0x3>
     41e:	70 93 75 04 	sts	0x0475, r23	; 0x800475 <arr_size+0x1>
     422:	60 93 74 04 	sts	0x0474, r22	; 0x800474 <arr_size>
     426:	08 c0       	rjmp	.+16     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);


	}

	switch (timer_index)// Theoretical: can switch the timer ovf period to update frequency, this however changes sampling frequency, for which will the recon. filters on output not suffice
     428:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <__data_end>
     42c:	81 30       	cpi	r24, 0x01	; 1
     42e:	59 f0       	breq	.+22     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     430:	18 f0       	brcs	.+6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     432:	82 30       	cpi	r24, 0x02	; 2
     434:	79 f0       	breq	.+30     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     436:	14 c0       	rjmp	.+40     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
	{
		case 0:
		TIM0_overflow_16u();
     438:	85 b5       	in	r24, 0x25	; 37
     43a:	89 7f       	andi	r24, 0xF9	; 249
     43c:	85 bd       	out	0x25, r24	; 37
     43e:	85 b5       	in	r24, 0x25	; 37
     440:	81 60       	ori	r24, 0x01	; 1
     442:	85 bd       	out	0x25, r24	; 37
		break;
     444:	0d c0       	rjmp	.+26     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>

		case 1:
		TIM0_overflow_128u();
     446:	85 b5       	in	r24, 0x25	; 37
     448:	8a 7f       	andi	r24, 0xFA	; 250
     44a:	85 bd       	out	0x25, r24	; 37
     44c:	85 b5       	in	r24, 0x25	; 37
     44e:	82 60       	ori	r24, 0x02	; 2
     450:	85 bd       	out	0x25, r24	; 37
		break;
     452:	06 c0       	rjmp	.+12     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		case 2:
		TIM0_overflow_1m();
     454:	85 b5       	in	r24, 0x25	; 37
     456:	8b 7f       	andi	r24, 0xFB	; 251
     458:	85 bd       	out	0x25, r24	; 37
     45a:	85 b5       	in	r24, 0x25	; 37
     45c:	83 60       	ori	r24, 0x03	; 3
     45e:	85 bd       	out	0x25, r24	; 37
		break;
	}


}
     460:	cf 91       	pop	r28
     462:	ff 90       	pop	r15
     464:	ef 90       	pop	r14
     466:	df 90       	pop	r13
     468:	cf 90       	pop	r12
     46a:	08 95       	ret

0000046c <main>:
const float timer_values[] = { 16e-6,128e-6,1e-3 };		// settable timer ovf values

int main(void)
{

	change_size();
     46c:	0e 94 41 01 	call	0x282	; 0x282 <change_size>
	lcd_init(LCD_DISP_ON);
     470:	8c e0       	ldi	r24, 0x0C	; 12
     472:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_init>
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
     476:	87 e6       	ldi	r24, 0x67	; 103
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 1a 08 	call	0x1034	; 0x1034 <uart_init>
	update_disp(11,frequency,multiplier);
     47e:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <multiplier>
     482:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <frequency>
     486:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <frequency+0x1>
     48a:	8b e0       	ldi	r24, 0x0B	; 11
     48c:	0e 94 37 07 	call	0xe6e	; 0xe6e <update_disp>
	DDRD = 0xFF;											// set D as output
     490:	8f ef       	ldi	r24, 0xFF	; 255
     492:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;											// set B as output
     494:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x07;											// set necesary C pins as output
     496:	87 e0       	ldi	r24, 0x07	; 7
     498:	87 b9       	out	0x07, r24	; 7

	generate_signal(frame_buffer, 1, frequency, tim_set,multiplier);	// init frame buffer with sine wave of frequency 1
     49a:	e0 90 05 01 	lds	r14, 0x0105	; 0x800105 <multiplier>
     49e:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <frequency>
     4a2:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <frequency+0x1>
     4a6:	00 91 01 01 	lds	r16, 0x0101	; 0x800101 <tim_set>
     4aa:	10 91 02 01 	lds	r17, 0x0102	; 0x800102 <tim_set+0x1>
     4ae:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <tim_set+0x2>
     4b2:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <tim_set+0x3>
     4b6:	61 e0       	ldi	r22, 0x01	; 1
     4b8:	8d eb       	ldi	r24, 0xBD	; 189
     4ba:	94 e0       	ldi	r25, 0x04	; 4
     4bc:	0e 94 e6 03 	call	0x7cc	; 0x7cc <generate_signal>



	TIM0_overflow_16u();
     4c0:	85 b5       	in	r24, 0x25	; 37
     4c2:	89 7f       	andi	r24, 0xF9	; 249
     4c4:	85 bd       	out	0x25, r24	; 37
     4c6:	85 b5       	in	r24, 0x25	; 37
     4c8:	81 60       	ori	r24, 0x01	; 1
     4ca:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
     4cc:	ee e6       	ldi	r30, 0x6E	; 110
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	80 81       	ld	r24, Z
     4d2:	81 60       	ori	r24, 0x01	; 1
     4d4:	80 83       	st	Z, r24

	TIM2_overflow_1m();
     4d6:	e1 eb       	ldi	r30, 0xB1	; 177
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	80 81       	ld	r24, Z
     4dc:	8c 7f       	andi	r24, 0xFC	; 252
     4de:	80 83       	st	Z, r24
     4e0:	80 81       	ld	r24, Z
     4e2:	84 60       	ori	r24, 0x04	; 4
     4e4:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
     4e6:	e0 e7       	ldi	r30, 0x70	; 112
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	80 81       	ld	r24, Z
     4ec:	81 60       	ori	r24, 0x01	; 1
     4ee:	80 83       	st	Z, r24





	sei();													// Enable interrupt
     4f0:	78 94       	sei
     4f2:	ff cf       	rjmp	.-2      	; 0x4f2 <main+0x86>

000004f4 <decode_button>:

}


void decode_button(void)									// decodes which button has been pressed and updates variables the button changes
{
     4f4:	ef 92       	push	r14
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
	static uint8_t Func =0;
	static uint8_t accum=0;									//accum variable for variable speed setting for frequency
	static uint8_t prev_type=0;								// for locking frequency button
	
	
	if (butt > 0)											// change anything and recalculate signal only when changing params (button was pressed)
     4fc:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <butt>
     500:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <butt+0x1>
     504:	00 97       	sbiw	r24, 0x00	; 0
     506:	09 f4       	brne	.+2      	; 0x50a <decode_button+0x16>
     508:	96 c0       	rjmp	.+300    	; 0x636 <decode_button+0x142>
	{
		

		while ((butt & 0x0001) == 0)						// find the button position
     50a:	80 fd       	sbrc	r24, 0
     50c:	9a c0       	rjmp	.+308    	; 0x642 <decode_button+0x14e>
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	01 c0       	rjmp	.+2      	; 0x514 <decode_button+0x20>
		{
			temp++;
     512:	2c 2f       	mov	r18, r28
     514:	c1 e0       	ldi	r28, 0x01	; 1
     516:	c2 0f       	add	r28, r18
			butt = butt >> 1;
     518:	96 95       	lsr	r25
     51a:	87 95       	ror	r24
	
	if (butt > 0)											// change anything and recalculate signal only when changing params (button was pressed)
	{
		

		while ((butt & 0x0001) == 0)						// find the button position
     51c:	80 ff       	sbrs	r24, 0
     51e:	f9 cf       	rjmp	.-14     	; 0x512 <decode_button+0x1e>
     520:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <butt+0x1>
     524:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <butt>
		{
			temp++;
			butt = butt >> 1;
		}
		
		if (temp == 0 || temp == 8 ||temp==4)
     528:	cc 23       	and	r28, r28
     52a:	09 f4       	brne	.+2      	; 0x52e <decode_button+0x3a>
     52c:	90 c0       	rjmp	.+288    	; 0x64e <decode_button+0x15a>
     52e:	2b 7f       	andi	r18, 0xFB	; 251
     530:	23 30       	cpi	r18, 0x03	; 3
     532:	b1 f5       	brne	.+108    	; 0x5a0 <decode_button+0xac>
     534:	91 c0       	rjmp	.+290    	; 0x658 <decode_button+0x164>
     536:	c0 e0       	ldi	r28, 0x00	; 0
		{
			if(Func==0)										// if func button is not pressed change frequency
			{
				
				if (temp == 0 && frequency < 2000)
     538:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <frequency>
     53c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <frequency+0x1>
     540:	80 3d       	cpi	r24, 0xD0	; 208
     542:	97 40       	sbci	r25, 0x07	; 7
     544:	80 f5       	brcc	.+96     	; 0x5a6 <decode_button+0xb2>
				{
					frequency++;
     546:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <frequency>
     54a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <frequency+0x1>
     54e:	01 96       	adiw	r24, 0x01	; 1
     550:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <frequency+0x1>
     554:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <frequency>
     558:	26 c0       	rjmp	.+76     	; 0x5a6 <decode_button+0xb2>
				}

				if (temp == 8 && frequency > 100)
     55a:	c8 30       	cpi	r28, 0x08	; 8
     55c:	21 f5       	brne	.+72     	; 0x5a6 <decode_button+0xb2>
     55e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <frequency>
     562:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <frequency+0x1>
     566:	85 36       	cpi	r24, 0x65	; 101
     568:	91 05       	cpc	r25, r1
     56a:	50 f1       	brcs	.+84     	; 0x5c0 <decode_button+0xcc>
				{
					frequency--;
     56c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <frequency>
     570:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <frequency+0x1>
     574:	01 97       	sbiw	r24, 0x01	; 1
     576:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <frequency+0x1>
     57a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <frequency>
     57e:	20 c0       	rjmp	.+64     	; 0x5c0 <decode_button+0xcc>
			}
			else
			{
				if (temp == 0 && multiplier < 5)			// if F button has been pressed change the DTMF multiplier
				{
					multiplier++;
     580:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <multiplier>
     584:	8f 5f       	subi	r24, 0xFF	; 255
     586:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <multiplier>
     58a:	6c c0       	rjmp	.+216    	; 0x664 <decode_button+0x170>
				}

				if (temp == 8 && multiplier > 1)
     58c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <multiplier>
     590:	82 30       	cpi	r24, 0x02	; 2
     592:	b0 f0       	brcs	.+44     	; 0x5c0 <decode_button+0xcc>
				{
					multiplier--;
     594:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <multiplier>
     598:	81 50       	subi	r24, 0x01	; 1
     59a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <multiplier>
     59e:	10 c0       	rjmp	.+32     	; 0x5c0 <decode_button+0xcc>
				}
			}
		}
		else
		{
			type = temp;
     5a0:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
     5a4:	0d c0       	rjmp	.+26     	; 0x5c0 <decode_button+0xcc>
		}
		
		
		if(temp==4)											// if F button pressed 
     5a6:	c4 30       	cpi	r28, 0x04	; 4
     5a8:	59 f4       	brne	.+22     	; 0x5c0 <decode_button+0xcc>
		{
			if( prev_type!=4)								// if it is not beeing pushed down
     5aa:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <prev_type.2145>
     5ae:	84 30       	cpi	r24, 0x04	; 4
     5b0:	79 f1       	breq	.+94     	; 0x610 <decode_button+0x11c>
			Func^=0x01;										//flip function 0-1
     5b2:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <Func.2143>
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	89 27       	eor	r24, r25
     5ba:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <Func.2143>
     5be:	28 c0       	rjmp	.+80     	; 0x610 <decode_button+0x11c>
		}
		else
		{
			change_size();
     5c0:	0e 94 41 01 	call	0x282	; 0x282 <change_size>
			
			generate_signal(frame_buffer, type, frequency, tim_set,multiplier); 
     5c4:	e0 90 05 01 	lds	r14, 0x0105	; 0x800105 <multiplier>
     5c8:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <frequency>
     5cc:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <frequency+0x1>
     5d0:	00 91 01 01 	lds	r16, 0x0101	; 0x800101 <tim_set>
     5d4:	10 91 02 01 	lds	r17, 0x0102	; 0x800102 <tim_set+0x1>
     5d8:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <tim_set+0x2>
     5dc:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <tim_set+0x3>
     5e0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     5e4:	8d eb       	ldi	r24, 0xBD	; 189
     5e6:	94 e0       	ldi	r25, 0x04	; 4
     5e8:	0e 94 e6 03 	call	0x7cc	; 0x7cc <generate_signal>
			
			update_disp(type,frequency,multiplier);
     5ec:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <multiplier>
     5f0:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <frequency>
     5f4:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <frequency+0x1>
     5f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     5fc:	0e 94 37 07 	call	0xe6e	; 0xe6e <update_disp>
			
			send_uart(type,frequency);
     600:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <frequency>
     604:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <frequency+0x1>
     608:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     60c:	0e 94 f5 06 	call	0xdea	; 0xdea <send_uart>
		}
		
		if(type==prev_type && accum<200) //
     610:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     614:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <prev_type.2145>
     618:	98 13       	cpse	r25, r24
     61a:	08 c0       	rjmp	.+16     	; 0x62c <decode_button+0x138>
     61c:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <accum.2144>
     620:	88 3c       	cpi	r24, 0xC8	; 200
     622:	20 f4       	brcc	.+8      	; 0x62c <decode_button+0x138>
		{
			accum++;
     624:	8f 5f       	subi	r24, 0xFF	; 255
     626:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <accum.2144>
     62a:	28 c0       	rjmp	.+80     	; 0x67c <decode_button+0x188>
		}
		else
		{
			accum=0;
     62c:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <accum.2144>
			prev_type=temp;
     630:	c0 93 6c 04 	sts	0x046C, r28	; 0x80046c <prev_type.2145>
     634:	23 c0       	rjmp	.+70     	; 0x67c <decode_button+0x188>
		}

	}
	else
	{
		accum=0;
     636:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <accum.2144>
		prev_type=255;
     63a:	8f ef       	ldi	r24, 0xFF	; 255
     63c:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <prev_type.2145>
	}

}
     640:	1d c0       	rjmp	.+58     	; 0x67c <decode_button+0x188>
			butt = butt >> 1;
		}
		
		if (temp == 0 || temp == 8 ||temp==4)
		{
			if(Func==0)										// if func button is not pressed change frequency
     642:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <Func.2143>
     646:	88 23       	and	r24, r24
     648:	09 f4       	brne	.+2      	; 0x64c <decode_button+0x158>
     64a:	75 cf       	rjmp	.-278    	; 0x536 <decode_button+0x42>
     64c:	11 c0       	rjmp	.+34     	; 0x670 <decode_button+0x17c>
     64e:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <Func.2143>
     652:	81 11       	cpse	r24, r1
     654:	0d c0       	rjmp	.+26     	; 0x670 <decode_button+0x17c>
     656:	70 cf       	rjmp	.-288    	; 0x538 <decode_button+0x44>
     658:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <Func.2143>
     65c:	88 23       	and	r24, r24
     65e:	09 f4       	brne	.+2      	; 0x662 <decode_button+0x16e>
     660:	7c cf       	rjmp	.-264    	; 0x55a <decode_button+0x66>
     662:	02 c0       	rjmp	.+4      	; 0x668 <decode_button+0x174>
     664:	c0 e0       	ldi	r28, 0x00	; 0
     666:	ac cf       	rjmp	.-168    	; 0x5c0 <decode_button+0xcc>
				if (temp == 0 && multiplier < 5)			// if F button has been pressed change the DTMF multiplier
				{
					multiplier++;
				}

				if (temp == 8 && multiplier > 1)
     668:	c8 30       	cpi	r28, 0x08	; 8
     66a:	09 f4       	brne	.+2      	; 0x66e <decode_button+0x17a>
     66c:	8f cf       	rjmp	.-226    	; 0x58c <decode_button+0x98>
     66e:	9b cf       	rjmp	.-202    	; 0x5a6 <decode_button+0xb2>
					frequency--;
				}
			}
			else
			{
				if (temp == 0 && multiplier < 5)			// if F button has been pressed change the DTMF multiplier
     670:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <multiplier>
     674:	85 30       	cpi	r24, 0x05	; 5
     676:	08 f4       	brcc	.+2      	; 0x67a <decode_button+0x186>
     678:	83 cf       	rjmp	.-250    	; 0x580 <decode_button+0x8c>
     67a:	f4 cf       	rjmp	.-24     	; 0x664 <decode_button+0x170>
	{
		accum=0;
		prev_type=255;
	}

}
     67c:	cf 91       	pop	r28
     67e:	1f 91       	pop	r17
     680:	0f 91       	pop	r16
     682:	ef 90       	pop	r14
     684:	08 95       	ret

00000686 <__vector_9>:
	PORTB = frame_buffer[index];				// output the data

}

ISR(TIMER2_OVF_vect)
{
     686:	1f 92       	push	r1
     688:	0f 92       	push	r0
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	0f 92       	push	r0
     68e:	11 24       	eor	r1, r1
     690:	2f 93       	push	r18
     692:	3f 93       	push	r19
     694:	4f 93       	push	r20
     696:	5f 93       	push	r21
     698:	6f 93       	push	r22
     69a:	7f 93       	push	r23
     69c:	8f 93       	push	r24
     69e:	9f 93       	push	r25
     6a0:	af 93       	push	r26
     6a2:	bf 93       	push	r27
     6a4:	ef 93       	push	r30
     6a6:	ff 93       	push	r31
	static uint8_t ind = 0;						// indexing variable in columns
	uint16_t temp = 0;							// temporary variable for extracting button pressed
	static uint16_t debounce_reg = 0;			// debouncing register (stores value and outputs after desired period)
	
	static uint8_t ovf = 0;
	uint16_t  debounce_temp = debounce_reg;		// temporary debouncer to check if values have changed
     6a8:	20 91 70 04 	lds	r18, 0x0470	; 0x800470 <debounce_reg.2131>
     6ac:	30 91 71 04 	lds	r19, 0x0471	; 0x800471 <debounce_reg.2131+0x1>

	ind++;
     6b0:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <ind.2129>
     6b4:	8f 5f       	subi	r24, 0xFF	; 255
     6b6:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <ind.2129>

	if (ind < 3)								// sweep through columns
     6ba:	83 30       	cpi	r24, 0x03	; 3
     6bc:	80 f4       	brcc	.+32     	; 0x6de <__vector_9+0x58>
	{

		PORTC &= 0xF8;
     6be:	88 b1       	in	r24, 0x08	; 8
     6c0:	88 7f       	andi	r24, 0xF8	; 248
     6c2:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << ind);
     6c4:	48 b1       	in	r20, 0x08	; 8
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	00 90 6f 04 	lds	r0, 0x046F	; 0x80046f <ind.2129>
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <__vector_9+0x4e>
     6d0:	88 0f       	add	r24, r24
     6d2:	99 1f       	adc	r25, r25
     6d4:	0a 94       	dec	r0
     6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <__vector_9+0x4a>
     6d8:	84 2b       	or	r24, r20
     6da:	88 b9       	out	0x08, r24	; 8
     6dc:	11 c0       	rjmp	.+34     	; 0x700 <__vector_9+0x7a>

	}
	else
	{

		ind = 0;
     6de:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <ind.2129>
		PORTC &= 0xF8;
     6e2:	88 b1       	in	r24, 0x08	; 8
     6e4:	88 7f       	andi	r24, 0xF8	; 248
     6e6:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << ind);
     6e8:	48 b1       	in	r20, 0x08	; 8
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	00 90 6f 04 	lds	r0, 0x046F	; 0x80046f <ind.2129>
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <__vector_9+0x72>
     6f4:	88 0f       	add	r24, r24
     6f6:	99 1f       	adc	r25, r25
     6f8:	0a 94       	dec	r0
     6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <__vector_9+0x6e>
     6fc:	84 2b       	or	r24, r20
     6fe:	88 b9       	out	0x08, r24	; 8
	}

	switch (ind)								// extract button pressed and update debounce register
     700:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <ind.2129>
     704:	81 30       	cpi	r24, 0x01	; 1
     706:	c9 f0       	breq	.+50     	; 0x73a <__vector_9+0xb4>
     708:	18 f0       	brcs	.+6      	; 0x710 <__vector_9+0x8a>
     70a:	82 30       	cpi	r24, 0x02	; 2
     70c:	39 f1       	breq	.+78     	; 0x75c <__vector_9+0xd6>
     70e:	37 c0       	rjmp	.+110    	; 0x77e <__vector_9+0xf8>
	{
		case 0:
		temp = PINC & 0b01111000;				// take the connected pins to 4x3 keypad
     710:	86 b1       	in	r24, 0x06	; 6
     712:	88 77       	andi	r24, 0x78	; 120
     714:	90 e0       	ldi	r25, 0x00	; 0
		temp = temp >> 3;						// shift to the beggining
		debounce_reg &= 0xFFF0;					// update the debounce register (zero out the current nibble)
		debounce_reg |= temp;					// update the current nibble
     716:	40 91 70 04 	lds	r20, 0x0470	; 0x800470 <debounce_reg.2131>
     71a:	50 91 71 04 	lds	r21, 0x0471	; 0x800471 <debounce_reg.2131+0x1>
     71e:	40 7f       	andi	r20, 0xF0	; 240
     720:	96 95       	lsr	r25
     722:	87 95       	ror	r24
     724:	96 95       	lsr	r25
     726:	87 95       	ror	r24
     728:	96 95       	lsr	r25
     72a:	87 95       	ror	r24
     72c:	84 2b       	or	r24, r20
     72e:	95 2b       	or	r25, r21
     730:	90 93 71 04 	sts	0x0471, r25	; 0x800471 <debounce_reg.2131+0x1>
     734:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <debounce_reg.2131>
		break;
     738:	22 c0       	rjmp	.+68     	; 0x77e <__vector_9+0xf8>

		case 1:
		temp = PINC & 0b01111000;
     73a:	86 b1       	in	r24, 0x06	; 6
     73c:	88 77       	andi	r24, 0x78	; 120
     73e:	90 e0       	ldi	r25, 0x00	; 0
		temp = temp << 1;
		debounce_reg &= 0xFF0F;
		debounce_reg |= temp;
     740:	40 91 70 04 	lds	r20, 0x0470	; 0x800470 <debounce_reg.2131>
     744:	50 91 71 04 	lds	r21, 0x0471	; 0x800471 <debounce_reg.2131+0x1>
     748:	4f 70       	andi	r20, 0x0F	; 15
     74a:	88 0f       	add	r24, r24
     74c:	99 1f       	adc	r25, r25
     74e:	84 2b       	or	r24, r20
     750:	95 2b       	or	r25, r21
     752:	90 93 71 04 	sts	0x0471, r25	; 0x800471 <debounce_reg.2131+0x1>
     756:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <debounce_reg.2131>
		break;
     75a:	11 c0       	rjmp	.+34     	; 0x77e <__vector_9+0xf8>

		case 2:
		temp = PINC & 0b01111000;
     75c:	46 b1       	in	r20, 0x06	; 6
     75e:	48 77       	andi	r20, 0x78	; 120
		temp = temp << 5;
		debounce_reg &= 0xF0FF;
		debounce_reg |= temp;
     760:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <debounce_reg.2131>
     764:	90 91 71 04 	lds	r25, 0x0471	; 0x800471 <debounce_reg.2131+0x1>
     768:	90 7f       	andi	r25, 0xF0	; 240
     76a:	60 e2       	ldi	r22, 0x20	; 32
     76c:	46 9f       	mul	r20, r22
     76e:	a0 01       	movw	r20, r0
     770:	11 24       	eor	r1, r1
     772:	84 2b       	or	r24, r20
     774:	95 2b       	or	r25, r21
     776:	90 93 71 04 	sts	0x0471, r25	; 0x800471 <debounce_reg.2131+0x1>
     77a:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <debounce_reg.2131>
		break;


	}

	ovf++;
     77e:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <ovf.2132>
     782:	8f 5f       	subi	r24, 0xFF	; 255
     784:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <ovf.2132>

	if (ovf > 50 && debounce_reg == debounce_temp) // output debounced values if time has come and button values are stable
     788:	83 33       	cpi	r24, 0x33	; 51
     78a:	78 f0       	brcs	.+30     	; 0x7aa <__vector_9+0x124>
     78c:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <debounce_reg.2131>
     790:	90 91 71 04 	lds	r25, 0x0471	; 0x800471 <debounce_reg.2131+0x1>
     794:	28 17       	cp	r18, r24
     796:	39 07       	cpc	r19, r25
     798:	41 f4       	brne	.+16     	; 0x7aa <__vector_9+0x124>
	{
		butt = debounce_reg;
     79a:	30 93 77 04 	sts	0x0477, r19	; 0x800477 <butt+0x1>
     79e:	20 93 76 04 	sts	0x0476, r18	; 0x800476 <butt>
		ovf = 0;
     7a2:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <ovf.2132>
		decode_button();
     7a6:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <decode_button>
	}




}
     7aa:	ff 91       	pop	r31
     7ac:	ef 91       	pop	r30
     7ae:	bf 91       	pop	r27
     7b0:	af 91       	pop	r26
     7b2:	9f 91       	pop	r25
     7b4:	8f 91       	pop	r24
     7b6:	7f 91       	pop	r23
     7b8:	6f 91       	pop	r22
     7ba:	5f 91       	pop	r21
     7bc:	4f 91       	pop	r20
     7be:	3f 91       	pop	r19
     7c0:	2f 91       	pop	r18
     7c2:	0f 90       	pop	r0
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	0f 90       	pop	r0
     7c8:	1f 90       	pop	r1
     7ca:	18 95       	reti

000007cc <generate_signal>:
};



void generate_signal(uint8_t* frame_buffer, uint8_t type, uint16_t freq,float tim_set,uint8_t multiplier)
{
     7cc:	4f 92       	push	r4
     7ce:	5f 92       	push	r5
     7d0:	6f 92       	push	r6
     7d2:	7f 92       	push	r7
     7d4:	8f 92       	push	r8
     7d6:	9f 92       	push	r9
     7d8:	af 92       	push	r10
     7da:	bf 92       	push	r11
     7dc:	cf 92       	push	r12
     7de:	df 92       	push	r13
     7e0:	ef 92       	push	r14
     7e2:	ff 92       	push	r15
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	00 d0       	rcall	.+0      	; 0x7ee <generate_signal+0x22>
     7ee:	00 d0       	rcall	.+0      	; 0x7f0 <generate_signal+0x24>
     7f0:	00 d0       	rcall	.+0      	; 0x7f2 <generate_signal+0x26>
     7f2:	cd b7       	in	r28, 0x3d	; 61
     7f4:	de b7       	in	r29, 0x3e	; 62
     7f6:	9e 83       	std	Y+6, r25	; 0x06
     7f8:	8d 83       	std	Y+5, r24	; 0x05
     7fa:	48 01       	movw	r8, r16
     7fc:	59 01       	movw	r10, r18
	
	
	type=type_map[type-1];										// find which button has been pressed
     7fe:	c6 2e       	mov	r12, r22
     800:	d1 2c       	mov	r13, r1
     802:	61 e0       	ldi	r22, 0x01	; 1
     804:	c6 1a       	sub	r12, r22
     806:	d1 08       	sbc	r13, r1
	
	
	uint16_t arr_length= (uint16_t)(((1/(float)freq))/tim_set);	// calculate required array length to accomodate full period
     808:	ba 01       	movw	r22, r20
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 65 09 	call	0x12ca	; 0x12ca <__floatunsisf>
     812:	9b 01       	movw	r18, r22
     814:	ac 01       	movw	r20, r24
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	80 e8       	ldi	r24, 0x80	; 128
     81c:	9f e3       	ldi	r25, 0x3F	; 63
     81e:	0e 94 c4 08 	call	0x1188	; 0x1188 <__divsf3>
     822:	a5 01       	movw	r20, r10
     824:	94 01       	movw	r18, r8
     826:	0e 94 c4 08 	call	0x1188	; 0x1188 <__divsf3>
     82a:	0e 94 36 09 	call	0x126c	; 0x126c <__fixunssfsi>
     82e:	8b 01       	movw	r16, r22
     830:	09 3e       	cpi	r16, 0xE9	; 233
     832:	73 e0       	ldi	r23, 0x03	; 3
     834:	17 07       	cpc	r17, r23
     836:	10 f0       	brcs	.+4      	; 0x83c <generate_signal+0x70>
     838:	08 ee       	ldi	r16, 0xE8	; 232
     83a:	13 e0       	ldi	r17, 0x03	; 3

void generate_signal(uint8_t* frame_buffer, uint8_t type, uint16_t freq,float tim_set,uint8_t multiplier)
{
	
	
	type=type_map[type-1];										// find which button has been pressed
     83c:	f6 01       	movw	r30, r12
     83e:	e2 5a       	subi	r30, 0xA2	; 162
     840:	fb 4f       	sbci	r31, 0xFB	; 251
	
	if(arr_length>1000)											// in case the array_length would exceed the frame_buffer size cap it, when using this fcn correctly it should not happen though
	arr_length=1000;
	
	
	switch (type)												// which type of function to generate
     842:	e0 81       	ld	r30, Z
     844:	8e 2f       	mov	r24, r30
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	fc 01       	movw	r30, r24
     84a:	31 97       	sbiw	r30, 0x01	; 1
     84c:	e9 30       	cpi	r30, 0x09	; 9
     84e:	f1 05       	cpc	r31, r1
     850:	08 f0       	brcs	.+2      	; 0x854 <generate_signal+0x88>
     852:	21 c2       	rjmp	.+1090   	; 0xc96 <__stack+0x397>
     854:	ec 5c       	subi	r30, 0xCC	; 204
     856:	ff 4f       	sbci	r31, 0xFF	; 255
     858:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__tablejump2__>
		}
		break;
		
		
		case 9: // DTMF
		for(uint16_t i=0; i<arr_length;i++)
     85c:	01 15       	cp	r16, r1
     85e:	11 05       	cpc	r17, r1
     860:	09 f0       	breq	.+2      	; 0x864 <generate_signal+0x98>
     862:	be c1       	rjmp	.+892    	; 0xbe0 <__stack+0x2e1>
     864:	18 c2       	rjmp	.+1072   	; 0xc96 <__stack+0x397>
			frame_buffer++;
		}
		break;
		
		case 8: // Ecg
		for(uint16_t i=0; i<arr_length;i++)
     866:	01 15       	cp	r16, r1
     868:	11 05       	cpc	r17, r1
     86a:	09 f0       	breq	.+2      	; 0x86e <generate_signal+0xa2>
     86c:	8b c1       	rjmp	.+790    	; 0xb84 <__stack+0x285>
     86e:	13 c2       	rjmp	.+1062   	; 0xc96 <__stack+0x397>
			frame_buffer++;
		}
		break;
		
		case 7: // Halfwave Rectified
		for(uint16_t i=0; i<arr_length;i++)
     870:	01 15       	cp	r16, r1
     872:	11 05       	cpc	r17, r1
     874:	09 f0       	breq	.+2      	; 0x878 <generate_signal+0xac>
     876:	4a c1       	rjmp	.+660    	; 0xb0c <__stack+0x20d>
     878:	0e c2       	rjmp	.+1052   	; 0xc96 <__stack+0x397>
			frame_buffer++;
		}
		break;
		
		case 6: //Fullwave Rectified
		for(uint16_t i=0; i<arr_length;i++)
     87a:	01 15       	cp	r16, r1
     87c:	11 05       	cpc	r17, r1
     87e:	09 f0       	breq	.+2      	; 0x882 <generate_signal+0xb6>
     880:	16 c1       	rjmp	.+556    	; 0xaae <__stack+0x1af>
     882:	09 c2       	rjmp	.+1042   	; 0xc96 <__stack+0x397>
			frame_buffer++;
		}
		break;
		
		case 5: // triangle
		for(uint16_t i=0; i<arr_length;i++)
     884:	01 15       	cp	r16, r1
     886:	11 05       	cpc	r17, r1
     888:	09 f0       	breq	.+2      	; 0x88c <generate_signal+0xc0>
     88a:	b7 c0       	rjmp	.+366    	; 0x9fa <__stack+0xfb>
     88c:	04 c2       	rjmp	.+1032   	; 0xc96 <__stack+0x397>
			frame_buffer++;
		}
		break;
		
		case 4: // Square wave
		for(uint16_t i=0; i<arr_length;i++)
     88e:	01 15       	cp	r16, r1
     890:	11 05       	cpc	r17, r1
     892:	09 f0       	breq	.+2      	; 0x896 <generate_signal+0xca>
     894:	98 c0       	rjmp	.+304    	; 0x9c6 <__stack+0xc7>
     896:	ff c1       	rjmp	.+1022   	; 0xc96 <__stack+0x397>
			frame_buffer++;
		}
		break;
		
		case 3: // negative ramp
		for(uint16_t i=0; i<arr_length;i++)
     898:	01 15       	cp	r16, r1
     89a:	11 05       	cpc	r17, r1
     89c:	09 f0       	breq	.+2      	; 0x8a0 <generate_signal+0xd4>
     89e:	61 c0       	rjmp	.+194    	; 0x962 <__stack+0x63>
     8a0:	fa c1       	rjmp	.+1012   	; 0xc96 <__stack+0x397>
		}
		break;
		
		
		case 2: // positive ramp
		for(uint16_t i=0; i<arr_length;i++)
     8a2:	01 15       	cp	r16, r1
     8a4:	11 05       	cpc	r17, r1
     8a6:	99 f5       	brne	.+102    	; 0x90e <__stack+0xf>
     8a8:	f6 c1       	rjmp	.+1004   	; 0xc96 <__stack+0x397>
	
	
	switch (type)												// which type of function to generate
	{
		case 1: // sin function
		for(uint16_t i=0; i<arr_length;i++)
     8aa:	01 15       	cp	r16, r1
     8ac:	11 05       	cpc	r17, r1
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <generate_signal+0xe6>
     8b0:	f2 c1       	rjmp	.+996    	; 0xc96 <__stack+0x397>
     8b2:	e1 2c       	mov	r14, r1
     8b4:	f1 2c       	mov	r15, r1
		{
			*frame_buffer=lookup_sine[(uint16_t)((float)i/(float)arr_length*511.0)];	// put point from LUT at position in frame buffer
     8b6:	48 01       	movw	r8, r16
     8b8:	a1 2c       	mov	r10, r1
     8ba:	b1 2c       	mov	r11, r1
     8bc:	b7 01       	movw	r22, r14
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e 94 65 09 	call	0x12ca	; 0x12ca <__floatunsisf>
     8c6:	2b 01       	movw	r4, r22
     8c8:	3c 01       	movw	r6, r24
     8ca:	c5 01       	movw	r24, r10
     8cc:	b4 01       	movw	r22, r8
     8ce:	0e 94 65 09 	call	0x12ca	; 0x12ca <__floatunsisf>
     8d2:	9b 01       	movw	r18, r22
     8d4:	ac 01       	movw	r20, r24
     8d6:	c3 01       	movw	r24, r6
     8d8:	b2 01       	movw	r22, r4
     8da:	0e 94 c4 08 	call	0x1188	; 0x1188 <__divsf3>
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e8       	ldi	r19, 0x80	; 128
     8e2:	4f ef       	ldi	r20, 0xFF	; 255
     8e4:	53 e4       	ldi	r21, 0x43	; 67
     8e6:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__mulsf3>
     8ea:	0e 94 36 09 	call	0x126c	; 0x126c <__fixunssfsi>
     8ee:	fb 01       	movw	r30, r22
     8f0:	e2 5a       	subi	r30, 0xA2	; 162
     8f2:	fd 4f       	sbci	r31, 0xFD	; 253
     8f4:	80 81       	ld	r24, Z
     8f6:	ad 81       	ldd	r26, Y+5	; 0x05
     8f8:	be 81       	ldd	r27, Y+6	; 0x06
     8fa:	8d 93       	st	X+, r24
     8fc:	be 83       	std	Y+6, r27	; 0x06
     8fe:	ad 83       	std	Y+5, r26	; 0x05
	
	
	switch (type)												// which type of function to generate
	{
		case 1: // sin function
		for(uint16_t i=0; i<arr_length;i++)
     900:	bf ef       	ldi	r27, 0xFF	; 255
     902:	eb 1a       	sub	r14, r27
     904:	fb 0a       	sbc	r15, r27
     906:	e0 16       	cp	r14, r16
     908:	f1 06       	cpc	r15, r17
     90a:	c1 f6       	brne	.-80     	; 0x8bc <generate_signal+0xf0>
     90c:	c4 c1       	rjmp	.+904    	; 0xc96 <__stack+0x397>
		}
		break;
		
		
		case 2: // positive ramp
		for(uint16_t i=0; i<arr_length;i++)
     90e:	e1 2c       	mov	r14, r1
     910:	f1 2c       	mov	r15, r1
		{
			
			*frame_buffer=(uint8_t)((float)i/arr_length*255);
     912:	48 01       	movw	r8, r16
     914:	a1 2c       	mov	r10, r1
     916:	b1 2c       	mov	r11, r1
     918:	b7 01       	movw	r22, r14
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 65 09 	call	0x12ca	; 0x12ca <__floatunsisf>
     922:	2b 01       	movw	r4, r22
     924:	3c 01       	movw	r6, r24
     926:	c5 01       	movw	r24, r10
     928:	b4 01       	movw	r22, r8
     92a:	0e 94 65 09 	call	0x12ca	; 0x12ca <__floatunsisf>
     92e:	9b 01       	movw	r18, r22
     930:	ac 01       	movw	r20, r24
     932:	c3 01       	movw	r24, r6
     934:	b2 01       	movw	r22, r4
     936:	0e 94 c4 08 	call	0x1188	; 0x1188 <__divsf3>
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	4f e7       	ldi	r20, 0x7F	; 127
     940:	53 e4       	ldi	r21, 0x43	; 67
     942:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__mulsf3>
     946:	0e 94 36 09 	call	0x126c	; 0x126c <__fixunssfsi>
     94a:	ed 81       	ldd	r30, Y+5	; 0x05
     94c:	fe 81       	ldd	r31, Y+6	; 0x06
     94e:	61 93       	st	Z+, r22
     950:	fe 83       	std	Y+6, r31	; 0x06
     952:	ed 83       	std	Y+5, r30	; 0x05
		}
		break;
		
		
		case 2: // positive ramp
		for(uint16_t i=0; i<arr_length;i++)
     954:	ff ef       	ldi	r31, 0xFF	; 255
     956:	ef 1a       	sub	r14, r31
     958:	ff 0a       	sbc	r15, r31
     95a:	e0 16       	cp	r14, r16
     95c:	f1 06       	cpc	r15, r17
     95e:	e1 f6       	brne	.-72     	; 0x918 <__stack+0x19>
     960:	9a c1       	rjmp	.+820    	; 0xc96 <__stack+0x397>
			frame_buffer++;
		}
		break;
		
		case 3: // negative ramp
		for(uint16_t i=0; i<arr_length;i++)
     962:	e1 2c       	mov	r14, r1
     964:	f1 2c       	mov	r15, r1
		{
			
			*frame_buffer=(uint8_t)(255-(float)i/arr_length*255);
     966:	48 01       	movw	r8, r16
     968:	a1 2c       	mov	r10, r1
     96a:	b1 2c       	mov	r11, r1
     96c:	b7 01       	movw	r22, r14
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 65 09 	call	0x12ca	; 0x12ca <__floatunsisf>
     976:	2b 01       	movw	r4, r22
     978:	3c 01       	movw	r6, r24
     97a:	c5 01       	movw	r24, r10
     97c:	b4 01       	movw	r22, r8
     97e:	0e 94 65 09 	call	0x12ca	; 0x12ca <__floatunsisf>
     982:	9b 01       	movw	r18, r22
     984:	ac 01       	movw	r20, r24
     986:	c3 01       	movw	r24, r6
     988:	b2 01       	movw	r22, r4
     98a:	0e 94 c4 08 	call	0x1188	; 0x1188 <__divsf3>
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	4f e7       	ldi	r20, 0x7F	; 127
     994:	53 e4       	ldi	r21, 0x43	; 67
     996:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__mulsf3>
     99a:	9b 01       	movw	r18, r22
     99c:	ac 01       	movw	r20, r24
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	8f e7       	ldi	r24, 0x7F	; 127
     9a4:	93 e4       	ldi	r25, 0x43	; 67
     9a6:	0e 94 57 08 	call	0x10ae	; 0x10ae <__subsf3>
     9aa:	0e 94 36 09 	call	0x126c	; 0x126c <__fixunssfsi>
     9ae:	ad 81       	ldd	r26, Y+5	; 0x05
     9b0:	be 81       	ldd	r27, Y+6	; 0x06
     9b2:	6d 93       	st	X+, r22
     9b4:	be 83       	std	Y+6, r27	; 0x06
     9b6:	ad 83       	std	Y+5, r26	; 0x05
			frame_buffer++;
		}
		break;
		
		case 3: // negative ramp
		for(uint16_t i=0; i<arr_length;i++)
     9b8:	bf ef       	ldi	r27, 0xFF	; 255
     9ba:	eb 1a       	sub	r14, r27
     9bc:	fb 0a       	sbc	r15, r27
     9be:	e0 16       	cp	r14, r16
     9c0:	f1 06       	cpc	r15, r17
     9c2:	a1 f6       	brne	.-88     	; 0x96c <__stack+0x6d>
     9c4:	68 c1       	rjmp	.+720    	; 0xc96 <__stack+0x397>
		break;
		
		case 4: // Square wave
		for(uint16_t i=0; i<arr_length;i++)
		{
			if(i<arr_length/2)
     9c6:	98 01       	movw	r18, r16
     9c8:	36 95       	lsr	r19
     9ca:	27 95       	ror	r18
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
			*frame_buffer=0;
			else
			*frame_buffer=255;
     9d0:	4f ef       	ldi	r20, 0xFF	; 255
		break;
		
		case 4: // Square wave
		for(uint16_t i=0; i<arr_length;i++)
		{
			if(i<arr_length/2)
     9d2:	82 17       	cp	r24, r18
     9d4:	93 07       	cpc	r25, r19
     9d6:	20 f4       	brcc	.+8      	; 0x9e0 <__stack+0xe1>
			*frame_buffer=0;
     9d8:	ed 81       	ldd	r30, Y+5	; 0x05
     9da:	fe 81       	ldd	r31, Y+6	; 0x06
     9dc:	10 82       	st	Z, r1
     9de:	03 c0       	rjmp	.+6      	; 0x9e6 <__stack+0xe7>
			else
			*frame_buffer=255;
     9e0:	ad 81       	ldd	r26, Y+5	; 0x05
     9e2:	be 81       	ldd	r27, Y+6	; 0x06
     9e4:	4c 93       	st	X, r20
			
			frame_buffer++;
     9e6:	ed 81       	ldd	r30, Y+5	; 0x05
     9e8:	fe 81       	ldd	r31, Y+6	; 0x06
     9ea:	31 96       	adiw	r30, 0x01	; 1
     9ec:	fe 83       	std	Y+6, r31	; 0x06
     9ee:	ed 83       	std	Y+5, r30	; 0x05
			frame_buffer++;
		}
		break;
		
		case 4: // Square wave
		for(uint16_t i=0; i<arr_length;i++)
     9f0:	01 96       	adiw	r24, 0x01	; 1
     9f2:	80 17       	cp	r24, r16
     9f4:	91 07       	cpc	r25, r17
     9f6:	69 f7       	brne	.-38     	; 0x9d2 <__stack+0xd3>
     9f8:	4e c1       	rjmp	.+668    	; 0xc96 <__stack+0x397>
		break;
		
		case 5: // triangle
		for(uint16_t i=0; i<arr_length;i++)
		{
			if(i<arr_length/2)
     9fa:	68 01       	movw	r12, r16
     9fc:	d6 94       	lsr	r13
     9fe:	c7 94       	ror	r12
     a00:	e1 2c       	mov	r14, r1
     a02:	f1 2c       	mov	r15, r1
			*frame_buffer=(uint8_t)((float)i/arr_length*255);
			else
			*frame_buffer=(uint8_t)(255-(float)i/arr_length*255);;
     a04:	28 01       	movw	r4, r16
     a06:	61 2c       	mov	r6, r1
     a08:	71 2c       	mov	r7, r1
		break;
		
		case 5: // triangle
		for(uint16_t i=0; i<arr_length;i++)
		{
			if(i<arr_length/2)
     a0a:	ec 14       	cp	r14, r12
     a0c:	fd 04       	cpc	r15, r13
     a0e:	e8 f4       	brcc	.+58     	; 0xa4a <__stack+0x14b>
			*frame_buffer=(uint8_t)((float)i/arr_length*255);
     a10:	b7 01       	movw	r22, r14
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0e 94 65 09 	call	0x12ca	; 0x12ca <__floatunsisf>
     a1a:	4b 01       	movw	r8, r22
     a1c:	5c 01       	movw	r10, r24
     a1e:	c3 01       	movw	r24, r6
     a20:	b2 01       	movw	r22, r4
     a22:	0e 94 65 09 	call	0x12ca	; 0x12ca <__floatunsisf>
     a26:	9b 01       	movw	r18, r22
     a28:	ac 01       	movw	r20, r24
     a2a:	c5 01       	movw	r24, r10
     a2c:	b4 01       	movw	r22, r8
     a2e:	0e 94 c4 08 	call	0x1188	; 0x1188 <__divsf3>
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	4f e7       	ldi	r20, 0x7F	; 127
     a38:	53 e4       	ldi	r21, 0x43	; 67
     a3a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__mulsf3>
     a3e:	0e 94 36 09 	call	0x126c	; 0x126c <__fixunssfsi>
     a42:	ad 81       	ldd	r26, Y+5	; 0x05
     a44:	be 81       	ldd	r27, Y+6	; 0x06
     a46:	6c 93       	st	X, r22
     a48:	24 c0       	rjmp	.+72     	; 0xa92 <__stack+0x193>
			else
			*frame_buffer=(uint8_t)(255-(float)i/arr_length*255);;
     a4a:	b7 01       	movw	r22, r14
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 65 09 	call	0x12ca	; 0x12ca <__floatunsisf>
     a54:	4b 01       	movw	r8, r22
     a56:	5c 01       	movw	r10, r24
     a58:	c3 01       	movw	r24, r6
     a5a:	b2 01       	movw	r22, r4
     a5c:	0e 94 65 09 	call	0x12ca	; 0x12ca <__floatunsisf>
     a60:	9b 01       	movw	r18, r22
     a62:	ac 01       	movw	r20, r24
     a64:	c5 01       	movw	r24, r10
     a66:	b4 01       	movw	r22, r8
     a68:	0e 94 c4 08 	call	0x1188	; 0x1188 <__divsf3>
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	4f e7       	ldi	r20, 0x7F	; 127
     a72:	53 e4       	ldi	r21, 0x43	; 67
     a74:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__mulsf3>
     a78:	9b 01       	movw	r18, r22
     a7a:	ac 01       	movw	r20, r24
     a7c:	60 e0       	ldi	r22, 0x00	; 0
     a7e:	70 e0       	ldi	r23, 0x00	; 0
     a80:	8f e7       	ldi	r24, 0x7F	; 127
     a82:	93 e4       	ldi	r25, 0x43	; 67
     a84:	0e 94 57 08 	call	0x10ae	; 0x10ae <__subsf3>
     a88:	0e 94 36 09 	call	0x126c	; 0x126c <__fixunssfsi>
     a8c:	ed 81       	ldd	r30, Y+5	; 0x05
     a8e:	fe 81       	ldd	r31, Y+6	; 0x06
     a90:	60 83       	st	Z, r22
			
			frame_buffer++;
     a92:	6d 81       	ldd	r22, Y+5	; 0x05
     a94:	7e 81       	ldd	r23, Y+6	; 0x06
     a96:	6f 5f       	subi	r22, 0xFF	; 255
     a98:	7f 4f       	sbci	r23, 0xFF	; 255
     a9a:	7e 83       	std	Y+6, r23	; 0x06
     a9c:	6d 83       	std	Y+5, r22	; 0x05
			frame_buffer++;
		}
		break;
		
		case 5: // triangle
		for(uint16_t i=0; i<arr_length;i++)
     a9e:	7f ef       	ldi	r23, 0xFF	; 255
     aa0:	e7 1a       	sub	r14, r23
     aa2:	f7 0a       	sbc	r15, r23
     aa4:	e0 16       	cp	r14, r16
     aa6:	f1 06       	cpc	r15, r17
     aa8:	09 f0       	breq	.+2      	; 0xaac <__stack+0x1ad>
     aaa:	af cf       	rjmp	.-162    	; 0xa0a <__stack+0x10b>
     aac:	f4 c0       	rjmp	.+488    	; 0xc96 <__stack+0x397>
			frame_buffer++;
		}
		break;
		
		case 6: //Fullwave Rectified
		for(uint16_t i=0; i<arr_length;i++)
     aae:	e1 2c       	mov	r14, r1
     ab0:	f1 2c       	mov	r15, r1
		{
			
			//	*frame_buffer=(uint8_t)(127.5*cos((float)(i)*2*M_PI/(float)arr_length)+127.5);
			*frame_buffer=(lookup_sine[(uint16_t)((float)i/(float)arr_length*255.0)]-128)*2;
     ab2:	48 01       	movw	r8, r16
     ab4:	a1 2c       	mov	r10, r1
     ab6:	b1 2c       	mov	r11, r1
     ab8:	b7 01       	movw	r22, r14
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 65 09 	call	0x12ca	; 0x12ca <__floatunsisf>
     ac2:	2b 01       	movw	r4, r22
     ac4:	3c 01       	movw	r6, r24
     ac6:	c5 01       	movw	r24, r10
     ac8:	b4 01       	movw	r22, r8
     aca:	0e 94 65 09 	call	0x12ca	; 0x12ca <__floatunsisf>
     ace:	9b 01       	movw	r18, r22
     ad0:	ac 01       	movw	r20, r24
     ad2:	c3 01       	movw	r24, r6
     ad4:	b2 01       	movw	r22, r4
     ad6:	0e 94 c4 08 	call	0x1188	; 0x1188 <__divsf3>
     ada:	20 e0       	ldi	r18, 0x00	; 0
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	4f e7       	ldi	r20, 0x7F	; 127
     ae0:	53 e4       	ldi	r21, 0x43	; 67
     ae2:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__mulsf3>
     ae6:	0e 94 36 09 	call	0x126c	; 0x126c <__fixunssfsi>
     aea:	fb 01       	movw	r30, r22
     aec:	e2 5a       	subi	r30, 0xA2	; 162
     aee:	fd 4f       	sbci	r31, 0xFD	; 253
     af0:	80 81       	ld	r24, Z
     af2:	88 0f       	add	r24, r24
     af4:	ad 81       	ldd	r26, Y+5	; 0x05
     af6:	be 81       	ldd	r27, Y+6	; 0x06
     af8:	8d 93       	st	X+, r24
     afa:	be 83       	std	Y+6, r27	; 0x06
     afc:	ad 83       	std	Y+5, r26	; 0x05
			frame_buffer++;
		}
		break;
		
		case 6: //Fullwave Rectified
		for(uint16_t i=0; i<arr_length;i++)
     afe:	bf ef       	ldi	r27, 0xFF	; 255
     b00:	eb 1a       	sub	r14, r27
     b02:	fb 0a       	sbc	r15, r27
     b04:	e0 16       	cp	r14, r16
     b06:	f1 06       	cpc	r15, r17
     b08:	b9 f6       	brne	.-82     	; 0xab8 <__stack+0x1b9>
     b0a:	c5 c0       	rjmp	.+394    	; 0xc96 <__stack+0x397>
		case 7: // Halfwave Rectified
		for(uint16_t i=0; i<arr_length;i++)
		{

			index=(uint16_t)((float)i/(float)arr_length*511.0);
			if(i<(arr_length/2))
     b0c:	68 01       	movw	r12, r16
     b0e:	d6 94       	lsr	r13
     b10:	c7 94       	ror	r12
     b12:	e1 2c       	mov	r14, r1
     b14:	f1 2c       	mov	r15, r1
			*frame_buffer=(lookup_sine[index]-128)*2;
     b16:	28 01       	movw	r4, r16
     b18:	61 2c       	mov	r6, r1
     b1a:	71 2c       	mov	r7, r1
		case 7: // Halfwave Rectified
		for(uint16_t i=0; i<arr_length;i++)
		{

			index=(uint16_t)((float)i/(float)arr_length*511.0);
			if(i<(arr_length/2))
     b1c:	ec 14       	cp	r14, r12
     b1e:	fd 04       	cpc	r15, r13
     b20:	10 f5       	brcc	.+68     	; 0xb66 <__stack+0x267>
			*frame_buffer=(lookup_sine[index]-128)*2;
     b22:	b7 01       	movw	r22, r14
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	0e 94 65 09 	call	0x12ca	; 0x12ca <__floatunsisf>
     b2c:	4b 01       	movw	r8, r22
     b2e:	5c 01       	movw	r10, r24
     b30:	c3 01       	movw	r24, r6
     b32:	b2 01       	movw	r22, r4
     b34:	0e 94 65 09 	call	0x12ca	; 0x12ca <__floatunsisf>
     b38:	9b 01       	movw	r18, r22
     b3a:	ac 01       	movw	r20, r24
     b3c:	c5 01       	movw	r24, r10
     b3e:	b4 01       	movw	r22, r8
     b40:	0e 94 c4 08 	call	0x1188	; 0x1188 <__divsf3>
     b44:	20 e0       	ldi	r18, 0x00	; 0
     b46:	30 e8       	ldi	r19, 0x80	; 128
     b48:	4f ef       	ldi	r20, 0xFF	; 255
     b4a:	53 e4       	ldi	r21, 0x43	; 67
     b4c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__mulsf3>
     b50:	0e 94 36 09 	call	0x126c	; 0x126c <__fixunssfsi>
     b54:	fb 01       	movw	r30, r22
     b56:	e2 5a       	subi	r30, 0xA2	; 162
     b58:	fd 4f       	sbci	r31, 0xFD	; 253
     b5a:	80 81       	ld	r24, Z
     b5c:	88 0f       	add	r24, r24
     b5e:	ed 81       	ldd	r30, Y+5	; 0x05
     b60:	fe 81       	ldd	r31, Y+6	; 0x06
     b62:	80 83       	st	Z, r24
     b64:	03 c0       	rjmp	.+6      	; 0xb6c <__stack+0x26d>
			else
			*frame_buffer=0;
     b66:	ad 81       	ldd	r26, Y+5	; 0x05
     b68:	be 81       	ldd	r27, Y+6	; 0x06
     b6a:	1c 92       	st	X, r1
			
			frame_buffer++;
     b6c:	ed 81       	ldd	r30, Y+5	; 0x05
     b6e:	fe 81       	ldd	r31, Y+6	; 0x06
     b70:	31 96       	adiw	r30, 0x01	; 1
     b72:	fe 83       	std	Y+6, r31	; 0x06
     b74:	ed 83       	std	Y+5, r30	; 0x05
			frame_buffer++;
		}
		break;
		
		case 7: // Halfwave Rectified
		for(uint16_t i=0; i<arr_length;i++)
     b76:	ff ef       	ldi	r31, 0xFF	; 255
     b78:	ef 1a       	sub	r14, r31
     b7a:	ff 0a       	sbc	r15, r31
     b7c:	e0 16       	cp	r14, r16
     b7e:	f1 06       	cpc	r15, r17
     b80:	69 f6       	brne	.-102    	; 0xb1c <__stack+0x21d>
     b82:	89 c0       	rjmp	.+274    	; 0xc96 <__stack+0x397>
			frame_buffer++;
		}
		break;
		
		case 8: // Ecg
		for(uint16_t i=0; i<arr_length;i++)
     b84:	e1 2c       	mov	r14, r1
     b86:	f1 2c       	mov	r15, r1
		{
			

			*frame_buffer=ecg_lookup[(uint16_t)((float)i/(float)arr_length*234.0)];
     b88:	48 01       	movw	r8, r16
     b8a:	a1 2c       	mov	r10, r1
     b8c:	b1 2c       	mov	r11, r1
     b8e:	b7 01       	movw	r22, r14
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 65 09 	call	0x12ca	; 0x12ca <__floatunsisf>
     b98:	2b 01       	movw	r4, r22
     b9a:	3c 01       	movw	r6, r24
     b9c:	c5 01       	movw	r24, r10
     b9e:	b4 01       	movw	r22, r8
     ba0:	0e 94 65 09 	call	0x12ca	; 0x12ca <__floatunsisf>
     ba4:	9b 01       	movw	r18, r22
     ba6:	ac 01       	movw	r20, r24
     ba8:	c3 01       	movw	r24, r6
     baa:	b2 01       	movw	r22, r4
     bac:	0e 94 c4 08 	call	0x1188	; 0x1188 <__divsf3>
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	4a e6       	ldi	r20, 0x6A	; 106
     bb6:	53 e4       	ldi	r21, 0x43	; 67
     bb8:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__mulsf3>
     bbc:	0e 94 36 09 	call	0x126c	; 0x126c <__fixunssfsi>
     bc0:	fb 01       	movw	r30, r22
     bc2:	ec 58       	subi	r30, 0x8C	; 140
     bc4:	fe 4f       	sbci	r31, 0xFE	; 254
     bc6:	80 81       	ld	r24, Z
     bc8:	ad 81       	ldd	r26, Y+5	; 0x05
     bca:	be 81       	ldd	r27, Y+6	; 0x06
     bcc:	8d 93       	st	X+, r24
     bce:	be 83       	std	Y+6, r27	; 0x06
     bd0:	ad 83       	std	Y+5, r26	; 0x05
			frame_buffer++;
		}
		break;
		
		case 8: // Ecg
		for(uint16_t i=0; i<arr_length;i++)
     bd2:	bf ef       	ldi	r27, 0xFF	; 255
     bd4:	eb 1a       	sub	r14, r27
     bd6:	fb 0a       	sbc	r15, r27
     bd8:	e0 16       	cp	r14, r16
     bda:	f1 06       	cpc	r15, r17
     bdc:	c1 f6       	brne	.-80     	; 0xb8e <__stack+0x28f>
     bde:	5b c0       	rjmp	.+182    	; 0xc96 <__stack+0x397>
		}
		break;
		
		
		case 9: // DTMF
		for(uint16_t i=0; i<arr_length;i++)
     be0:	c1 2c       	mov	r12, r1
     be2:	d1 2c       	mov	r13, r1
		{
			
			index=(uint16_t)((float)i/(float)arr_length*511.0*multiplier);
     be4:	28 01       	movw	r4, r16
     be6:	61 2c       	mov	r6, r1
     be8:	71 2c       	mov	r7, r1
     bea:	6e 2d       	mov	r22, r14
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	69 83       	std	Y+1, r22	; 0x01
     bf4:	7a 83       	std	Y+2, r23	; 0x02
     bf6:	8b 83       	std	Y+3, r24	; 0x03
     bf8:	9c 83       	std	Y+4, r25	; 0x04
     bfa:	b6 01       	movw	r22, r12
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 65 09 	call	0x12ca	; 0x12ca <__floatunsisf>
     c04:	4b 01       	movw	r8, r22
     c06:	5c 01       	movw	r10, r24
     c08:	c3 01       	movw	r24, r6
     c0a:	b2 01       	movw	r22, r4
     c0c:	0e 94 65 09 	call	0x12ca	; 0x12ca <__floatunsisf>
     c10:	9b 01       	movw	r18, r22
     c12:	ac 01       	movw	r20, r24
     c14:	c5 01       	movw	r24, r10
     c16:	b4 01       	movw	r22, r8
     c18:	0e 94 c4 08 	call	0x1188	; 0x1188 <__divsf3>
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e8       	ldi	r19, 0x80	; 128
     c20:	4f ef       	ldi	r20, 0xFF	; 255
     c22:	53 e4       	ldi	r21, 0x43	; 67
     c24:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__mulsf3>
     c28:	4b 01       	movw	r8, r22
     c2a:	5c 01       	movw	r10, r24
     c2c:	69 81       	ldd	r22, Y+1	; 0x01
     c2e:	7a 81       	ldd	r23, Y+2	; 0x02
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	9c 81       	ldd	r25, Y+4	; 0x04
     c34:	0e 94 67 09 	call	0x12ce	; 0x12ce <__floatsisf>
     c38:	a5 01       	movw	r20, r10
     c3a:	94 01       	movw	r18, r8
     c3c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__mulsf3>
     c40:	0e 94 36 09 	call	0x126c	; 0x126c <__fixunssfsi>
     c44:	7b 01       	movw	r14, r22
			
			while(index>511)																	//if the index is larger than lookup table substract one period
     c46:	e1 14       	cp	r14, r1
     c48:	72 e0       	ldi	r23, 0x02	; 2
     c4a:	f7 06       	cpc	r15, r23
     c4c:	40 f0       	brcs	.+16     	; 0xc5e <__stack+0x35f>
			{
				index=index-511;
     c4e:	8f ef       	ldi	r24, 0xFF	; 255
     c50:	e8 1a       	sub	r14, r24
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	f8 0a       	sbc	r15, r24
		for(uint16_t i=0; i<arr_length;i++)
		{
			
			index=(uint16_t)((float)i/(float)arr_length*511.0*multiplier);
			
			while(index>511)																	//if the index is larger than lookup table substract one period
     c56:	e1 14       	cp	r14, r1
     c58:	92 e0       	ldi	r25, 0x02	; 2
     c5a:	f9 06       	cpc	r15, r25
     c5c:	c0 f7       	brcc	.-16     	; 0xc4e <__stack+0x34f>
			{
				index=index-511;
			}
			
			*frame_buffer=lookup_sine[(uint16_t)((float)i/(float)arr_length*511.0)]/2+lookup_sine[index]/2;
     c5e:	c5 01       	movw	r24, r10
     c60:	b4 01       	movw	r22, r8
     c62:	0e 94 36 09 	call	0x126c	; 0x126c <__fixunssfsi>
     c66:	fb 01       	movw	r30, r22
     c68:	e2 5a       	subi	r30, 0xA2	; 162
     c6a:	fd 4f       	sbci	r31, 0xFD	; 253
     c6c:	80 81       	ld	r24, Z
     c6e:	98 2f       	mov	r25, r24
     c70:	96 95       	lsr	r25
     c72:	f7 01       	movw	r30, r14
     c74:	e2 5a       	subi	r30, 0xA2	; 162
     c76:	fd 4f       	sbci	r31, 0xFD	; 253
     c78:	80 81       	ld	r24, Z
     c7a:	86 95       	lsr	r24
     c7c:	89 0f       	add	r24, r25
     c7e:	ad 81       	ldd	r26, Y+5	; 0x05
     c80:	be 81       	ldd	r27, Y+6	; 0x06
     c82:	8d 93       	st	X+, r24
     c84:	be 83       	std	Y+6, r27	; 0x06
     c86:	ad 83       	std	Y+5, r26	; 0x05
		}
		break;
		
		
		case 9: // DTMF
		for(uint16_t i=0; i<arr_length;i++)
     c88:	bf ef       	ldi	r27, 0xFF	; 255
     c8a:	cb 1a       	sub	r12, r27
     c8c:	db 0a       	sbc	r13, r27
     c8e:	c0 16       	cp	r12, r16
     c90:	d1 06       	cpc	r13, r17
     c92:	09 f0       	breq	.+2      	; 0xc96 <__stack+0x397>
     c94:	b2 cf       	rjmp	.-156    	; 0xbfa <__stack+0x2fb>
	}
	
	
	
	
}
     c96:	26 96       	adiw	r28, 0x06	; 6
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	ff 90       	pop	r15
     cac:	ef 90       	pop	r14
     cae:	df 90       	pop	r13
     cb0:	cf 90       	pop	r12
     cb2:	bf 90       	pop	r11
     cb4:	af 90       	pop	r10
     cb6:	9f 90       	pop	r9
     cb8:	8f 90       	pop	r8
     cba:	7f 90       	pop	r7
     cbc:	6f 90       	pop	r6
     cbe:	5f 90       	pop	r5
     cc0:	4f 90       	pop	r4
     cc2:	08 95       	ret

00000cc4 <return_wvftype>:
}



void return_wvftype(char text[],uint8_t type)
{
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	63 97       	sbiw	r28, 0x13	; 19
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	de bf       	out	0x3e, r29	; 62
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	cd bf       	out	0x3d, r28	; 61
	const char rsin[]="FWRS";
     cd8:	25 e0       	ldi	r18, 0x05	; 5
     cda:	ec e2       	ldi	r30, 0x2C	; 44
     cdc:	f1 e0       	ldi	r31, 0x01	; 1
     cde:	de 01       	movw	r26, r28
     ce0:	11 96       	adiw	r26, 0x01	; 1
     ce2:	01 90       	ld	r0, Z+
     ce4:	0d 92       	st	X+, r0
     ce6:	2a 95       	dec	r18
     ce8:	e1 f7       	brne	.-8      	; 0xce2 <return_wvftype+0x1e>
	const char dtmf[]="DTMF";
     cea:	25 e0       	ldi	r18, 0x05	; 5
     cec:	e1 e3       	ldi	r30, 0x31	; 49
     cee:	f1 e0       	ldi	r31, 0x01	; 1
     cf0:	de 01       	movw	r26, r28
     cf2:	16 96       	adiw	r26, 0x06	; 6
     cf4:	01 90       	ld	r0, Z+
     cf6:	0d 92       	st	X+, r0
     cf8:	2a 95       	dec	r18
     cfa:	e1 f7       	brne	.-8      	; 0xcf4 <return_wvftype+0x30>
	const char triag[]="Triangle";
     cfc:	29 e0       	ldi	r18, 0x09	; 9
     cfe:	e6 e3       	ldi	r30, 0x36	; 54
     d00:	f1 e0       	ldi	r31, 0x01	; 1
     d02:	de 01       	movw	r26, r28
     d04:	1b 96       	adiw	r26, 0x0b	; 11
     d06:	01 90       	ld	r0, Z+
     d08:	0d 92       	st	X+, r0
     d0a:	2a 95       	dec	r18
     d0c:	e1 f7       	brne	.-8      	; 0xd06 <return_wvftype+0x42>
	switch (type_map[type-1])
     d0e:	e6 2f       	mov	r30, r22
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	e3 5a       	subi	r30, 0xA3	; 163
     d14:	fb 4f       	sbci	r31, 0xFB	; 251
     d16:	e0 81       	ld	r30, Z
     d18:	4e 2f       	mov	r20, r30
     d1a:	50 e0       	ldi	r21, 0x00	; 0
     d1c:	fa 01       	movw	r30, r20
     d1e:	31 97       	sbiw	r30, 0x01	; 1
     d20:	e9 30       	cpi	r30, 0x09	; 9
     d22:	f1 05       	cpc	r31, r1
     d24:	08 f0       	brcs	.+2      	; 0xd28 <return_wvftype+0x64>
     d26:	58 c0       	rjmp	.+176    	; 0xdd8 <return_wvftype+0x114>
     d28:	dc 01       	movw	r26, r24
     d2a:	e3 5c       	subi	r30, 0xC3	; 195
     d2c:	ff 4f       	sbci	r31, 0xFF	; 255
     d2e:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__tablejump2__>
	{
		case 1:
		strncpy(text,"Sin",4);
     d32:	23 e5       	ldi	r18, 0x53	; 83
     d34:	39 e6       	ldi	r19, 0x69	; 105
     d36:	11 96       	adiw	r26, 0x01	; 1
     d38:	3c 93       	st	X, r19
     d3a:	2e 93       	st	-X, r18
     d3c:	2e e6       	ldi	r18, 0x6E	; 110
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	13 96       	adiw	r26, 0x03	; 3
     d42:	3c 93       	st	X, r19
     d44:	2e 93       	st	-X, r18
     d46:	12 97       	sbiw	r26, 0x02	; 2
		break;
     d48:	47 c0       	rjmp	.+142    	; 0xdd8 <return_wvftype+0x114>
		
		case 2:
		strncpy(text,"Ramp+",5);
     d4a:	25 e0       	ldi	r18, 0x05	; 5
     d4c:	e9 e1       	ldi	r30, 0x19	; 25
     d4e:	f1 e0       	ldi	r31, 0x01	; 1
     d50:	01 90       	ld	r0, Z+
     d52:	0d 92       	st	X+, r0
     d54:	2a 95       	dec	r18
     d56:	e1 f7       	brne	.-8      	; 0xd50 <return_wvftype+0x8c>
		break;
     d58:	3f c0       	rjmp	.+126    	; 0xdd8 <return_wvftype+0x114>
		
		case 3:
		strncpy(text,"Ramp-",6);
     d5a:	26 e0       	ldi	r18, 0x06	; 6
     d5c:	ef e1       	ldi	r30, 0x1F	; 31
     d5e:	f1 e0       	ldi	r31, 0x01	; 1
     d60:	01 90       	ld	r0, Z+
     d62:	0d 92       	st	X+, r0
     d64:	2a 95       	dec	r18
     d66:	e1 f7       	brne	.-8      	; 0xd60 <return_wvftype+0x9c>
		break;
     d68:	37 c0       	rjmp	.+110    	; 0xdd8 <return_wvftype+0x114>
		
		case 4:
		strncpy(text,"Square",7);
     d6a:	27 e0       	ldi	r18, 0x07	; 7
     d6c:	e5 e2       	ldi	r30, 0x25	; 37
     d6e:	f1 e0       	ldi	r31, 0x01	; 1
     d70:	01 90       	ld	r0, Z+
     d72:	0d 92       	st	X+, r0
     d74:	2a 95       	dec	r18
     d76:	e1 f7       	brne	.-8      	; 0xd70 <return_wvftype+0xac>
		break;
     d78:	2f c0       	rjmp	.+94     	; 0xdd8 <return_wvftype+0x114>
		
		case 5:
		strncpy(text,triag,8);
     d7a:	48 e0       	ldi	r20, 0x08	; 8
     d7c:	50 e0       	ldi	r21, 0x00	; 0
     d7e:	be 01       	movw	r22, r28
     d80:	65 5f       	subi	r22, 0xF5	; 245
     d82:	7f 4f       	sbci	r23, 0xFF	; 255
     d84:	0e 94 66 0a 	call	0x14cc	; 0x14cc <strncpy>
		break;
     d88:	27 c0       	rjmp	.+78     	; 0xdd8 <return_wvftype+0x114>
		
		case 6:
		strncpy(text,rsin,6);
     d8a:	46 e0       	ldi	r20, 0x06	; 6
     d8c:	50 e0       	ldi	r21, 0x00	; 0
     d8e:	be 01       	movw	r22, r28
     d90:	6f 5f       	subi	r22, 0xFF	; 255
     d92:	7f 4f       	sbci	r23, 0xFF	; 255
     d94:	0e 94 66 0a 	call	0x14cc	; 0x14cc <strncpy>
		break;
     d98:	1f c0       	rjmp	.+62     	; 0xdd8 <return_wvftype+0x114>
		
		case 7:
		strncpy(text,"HWRS",4);
     d9a:	28 e4       	ldi	r18, 0x48	; 72
     d9c:	37 e5       	ldi	r19, 0x57	; 87
     d9e:	11 96       	adiw	r26, 0x01	; 1
     da0:	3c 93       	st	X, r19
     da2:	2e 93       	st	-X, r18
     da4:	22 e5       	ldi	r18, 0x52	; 82
     da6:	33 e5       	ldi	r19, 0x53	; 83
     da8:	13 96       	adiw	r26, 0x03	; 3
     daa:	3c 93       	st	X, r19
     dac:	2e 93       	st	-X, r18
     dae:	12 97       	sbiw	r26, 0x02	; 2
		break;
     db0:	13 c0       	rjmp	.+38     	; 0xdd8 <return_wvftype+0x114>
		
		case 8:
		strncpy(text,"ECG",4);
     db2:	25 e4       	ldi	r18, 0x45	; 69
     db4:	33 e4       	ldi	r19, 0x43	; 67
     db6:	11 96       	adiw	r26, 0x01	; 1
     db8:	3c 93       	st	X, r19
     dba:	2e 93       	st	-X, r18
     dbc:	27 e4       	ldi	r18, 0x47	; 71
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	3c 93       	st	X, r19
     dc4:	2e 93       	st	-X, r18
     dc6:	12 97       	sbiw	r26, 0x02	; 2
		break;
     dc8:	07 c0       	rjmp	.+14     	; 0xdd8 <return_wvftype+0x114>
		
		case 9:
		strncpy(text,dtmf,4);
     dca:	44 e0       	ldi	r20, 0x04	; 4
     dcc:	50 e0       	ldi	r21, 0x00	; 0
     dce:	be 01       	movw	r22, r28
     dd0:	6a 5f       	subi	r22, 0xFA	; 250
     dd2:	7f 4f       	sbci	r23, 0xFF	; 255
     dd4:	0e 94 66 0a 	call	0x14cc	; 0x14cc <strncpy>
		type=255;
		break;
		
		
	}
}
     dd8:	63 96       	adiw	r28, 0x13	; 19
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	cd bf       	out	0x3d, r28	; 61
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	08 95       	ret

00000dea <send_uart>:




void send_uart(uint8_t type,uint16_t frequency)
{
     dea:	cf 92       	push	r12
     dec:	df 92       	push	r13
     dee:	ff 92       	push	r15
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	2a 97       	sbiw	r28, 0x0a	; 10
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	de bf       	out	0x3e, r29	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	cd bf       	out	0x3d, r28	; 61
     e08:	f8 2e       	mov	r15, r24
     e0a:	6b 01       	movw	r12, r22
	char text[10]={0};
     e0c:	8e 01       	movw	r16, r28
     e0e:	0f 5f       	subi	r16, 0xFF	; 255
     e10:	1f 4f       	sbci	r17, 0xFF	; 255
     e12:	8a e0       	ldi	r24, 0x0A	; 10
     e14:	f8 01       	movw	r30, r16
     e16:	11 92       	st	Z+, r1
     e18:	8a 95       	dec	r24
     e1a:	e9 f7       	brne	.-6      	; 0xe16 <send_uart+0x2c>
	uart_puts("F: \0");
     e1c:	88 e0       	ldi	r24, 0x08	; 8
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	0e 94 48 08 	call	0x1090	; 0x1090 <uart_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     e24:	4a e0       	ldi	r20, 0x0A	; 10
     e26:	b8 01       	movw	r22, r16
     e28:	c6 01       	movw	r24, r12
     e2a:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__itoa_ncheck>
	itoa(frequency,text,10);
	uart_puts(text);
     e2e:	c8 01       	movw	r24, r16
     e30:	0e 94 48 08 	call	0x1090	; 0x1090 <uart_puts>
	uart_puts(" Hz, Waveform: ");
     e34:	8f e3       	ldi	r24, 0x3F	; 63
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	0e 94 48 08 	call	0x1090	; 0x1090 <uart_puts>
	return_wvftype(text,type);
     e3c:	6f 2d       	mov	r22, r15
     e3e:	c8 01       	movw	r24, r16
     e40:	0e 94 62 06 	call	0xcc4	; 0xcc4 <return_wvftype>
	uart_puts(text);
     e44:	c8 01       	movw	r24, r16
     e46:	0e 94 48 08 	call	0x1090	; 0x1090 <uart_puts>
	uart_puts("\n");
     e4a:	8f e4       	ldi	r24, 0x4F	; 79
     e4c:	91 e0       	ldi	r25, 0x01	; 1
     e4e:	0e 94 48 08 	call	0x1090	; 0x1090 <uart_puts>
	
}
     e52:	2a 96       	adiw	r28, 0x0a	; 10
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	ff 90       	pop	r15
     e68:	df 90       	pop	r13
     e6a:	cf 90       	pop	r12
     e6c:	08 95       	ret

00000e6e <update_disp>:




void update_disp(uint8_t type,uint16_t frequency,uint8_t multiplier)	//updates the LCD with the frequency
{
     e6e:	ef 92       	push	r14
     e70:	ff 92       	push	r15
     e72:	0f 93       	push	r16
     e74:	1f 93       	push	r17
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
     e7e:	64 97       	sbiw	r28, 0x14	; 20
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	18 2f       	mov	r17, r24
     e8c:	7b 01       	movw	r14, r22
     e8e:	04 2f       	mov	r16, r20
	
	char text[10]={0};
     e90:	ce 01       	movw	r24, r28
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	2a e0       	ldi	r18, 0x0A	; 10
     e96:	fc 01       	movw	r30, r24
     e98:	11 92       	st	Z+, r1
     e9a:	2a 95       	dec	r18
     e9c:	e9 f7       	brne	.-6      	; 0xe98 <update_disp+0x2a>
	const char reg[]="Gen.:";
     e9e:	26 e0       	ldi	r18, 0x06	; 6
     ea0:	ee e6       	ldi	r30, 0x6E	; 110
     ea2:	f1 e0       	ldi	r31, 0x01	; 1
     ea4:	de 01       	movw	r26, r28
     ea6:	1b 96       	adiw	r26, 0x0b	; 11
     ea8:	01 90       	ld	r0, Z+
     eaa:	0d 92       	st	X+, r0
     eac:	2a 95       	dec	r18
     eae:	e1 f7       	brne	.-8      	; 0xea8 <update_disp+0x3a>
	const char multiplier_text[]=" M:";
     eb0:	20 e2       	ldi	r18, 0x20	; 32
     eb2:	3d e4       	ldi	r19, 0x4D	; 77
     eb4:	3a 8b       	std	Y+18, r19	; 0x12
     eb6:	29 8b       	std	Y+17, r18	; 0x11
     eb8:	2a e3       	ldi	r18, 0x3A	; 58
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	3c 8b       	std	Y+20, r19	; 0x14
     ebe:	2b 8b       	std	Y+19, r18	; 0x13
	return_wvftype(text,type);
     ec0:	61 2f       	mov	r22, r17
     ec2:	0e 94 62 06 	call	0xcc4	; 0xcc4 <return_wvftype>
	
	
	if(type<255)	// if known type
     ec6:	1f 3f       	cpi	r17, 0xFF	; 255
     ec8:	09 f4       	brne	.+2      	; 0xecc <update_disp+0x5e>
     eca:	4f c0       	rjmp	.+158    	; 0xf6a <update_disp+0xfc>
	{
		
		lcd_gotoxy(0,0);
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_gotoxy>
		
		
		if(type!=8 && type!=0 && type!=4)		// if changed frequency no need to overwrite the generated wvf on lCD
     ed4:	18 30       	cpi	r17, 0x08	; 8
     ed6:	51 f1       	breq	.+84     	; 0xf2c <update_disp+0xbe>
     ed8:	81 2f       	mov	r24, r17
     eda:	8b 7f       	andi	r24, 0xFB	; 251
     edc:	39 f1       	breq	.+78     	; 0xf2c <update_disp+0xbe>
		{
			
			
			lcd_puts(reg);
     ede:	ce 01       	movw	r24, r28
     ee0:	0b 96       	adiw	r24, 0x0b	; 11
     ee2:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
			lcd_puts("                ");		// Clear the appropriate space
     ee6:	81 e5       	ldi	r24, 0x51	; 81
     ee8:	91 e0       	ldi	r25, 0x01	; 1
     eea:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
			lcd_gotoxy(6,0);
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	86 e0       	ldi	r24, 0x06	; 6
     ef2:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_gotoxy>
			lcd_puts(text);
     ef6:	ce 01       	movw	r24, r28
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
			if(type_map[type-1]==9)
     efe:	e1 2f       	mov	r30, r17
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	e3 5a       	subi	r30, 0xA3	; 163
     f04:	fb 4f       	sbci	r31, 0xFB	; 251
     f06:	80 81       	ld	r24, Z
     f08:	89 30       	cpi	r24, 0x09	; 9
     f0a:	81 f4       	brne	.+32     	; 0xf2c <update_disp+0xbe>
			{
				lcd_puts(multiplier_text);
     f0c:	ce 01       	movw	r24, r28
     f0e:	41 96       	adiw	r24, 0x11	; 17
     f10:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
     f14:	4a e0       	ldi	r20, 0x0A	; 10
     f16:	be 01       	movw	r22, r28
     f18:	6f 5f       	subi	r22, 0xFF	; 255
     f1a:	7f 4f       	sbci	r23, 0xFF	; 255
     f1c:	80 2f       	mov	r24, r16
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__itoa_ncheck>
				itoa(multiplier,text,10);
				lcd_puts(text);
     f24:	ce 01       	movw	r24, r28
     f26:	01 96       	adiw	r24, 0x01	; 1
     f28:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
			}
		}
		
		
		
		lcd_gotoxy(0,1);
     f2c:	61 e0       	ldi	r22, 0x01	; 1
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_gotoxy>
		lcd_puts("                ");			// Clear the appropriate space
     f34:	81 e5       	ldi	r24, 0x51	; 81
     f36:	91 e0       	ldi	r25, 0x01	; 1
     f38:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
		
		lcd_gotoxy(0,1);
     f3c:	61 e0       	ldi	r22, 0x01	; 1
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_gotoxy>
		lcd_puts("Freq.: ");
     f44:	82 e6       	ldi	r24, 0x62	; 98
     f46:	91 e0       	ldi	r25, 0x01	; 1
     f48:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
     f4c:	4a e0       	ldi	r20, 0x0A	; 10
     f4e:	be 01       	movw	r22, r28
     f50:	6f 5f       	subi	r22, 0xFF	; 255
     f52:	7f 4f       	sbci	r23, 0xFF	; 255
     f54:	c7 01       	movw	r24, r14
     f56:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__itoa_ncheck>
		itoa(frequency,text,10);
		lcd_puts(text);
     f5a:	ce 01       	movw	r24, r28
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
		lcd_puts(" Hz");
     f62:	8a e6       	ldi	r24, 0x6A	; 106
     f64:	91 e0       	ldi	r25, 0x01	; 1
     f66:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
		
	}
     f6a:	64 96       	adiw	r28, 0x14	; 20
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	ff 90       	pop	r15
     f80:	ef 90       	pop	r14
     f82:	08 95       	ret

00000f84 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
     f84:	1f 92       	push	r1
     f86:	0f 92       	push	r0
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	0f 92       	push	r0
     f8c:	11 24       	eor	r1, r1
     f8e:	2f 93       	push	r18
     f90:	8f 93       	push	r24
     f92:	9f 93       	push	r25
     f94:	ef 93       	push	r30
     f96:	ff 93       	push	r31
     f98:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     f9c:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     fa0:	8c 71       	andi	r24, 0x1C	; 28
     fa2:	e0 91 7a 04 	lds	r30, 0x047A	; 0x80047a <UART_RxHead>
     fa6:	ef 5f       	subi	r30, 0xFF	; 255
     fa8:	ef 71       	andi	r30, 0x1F	; 31
     faa:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <UART_RxTail>
     fae:	e9 17       	cp	r30, r25
     fb0:	39 f0       	breq	.+14     	; 0xfc0 <__vector_18+0x3c>
     fb2:	e0 93 7a 04 	sts	0x047A, r30	; 0x80047a <UART_RxHead>
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	e3 58       	subi	r30, 0x83	; 131
     fba:	fb 4f       	sbci	r31, 0xFB	; 251
     fbc:	20 83       	st	Z, r18
     fbe:	01 c0       	rjmp	.+2      	; 0xfc2 <__vector_18+0x3e>
     fc0:	82 e0       	ldi	r24, 0x02	; 2
     fc2:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <UART_LastRxError>
     fc6:	89 2b       	or	r24, r25
     fc8:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <UART_LastRxError>
     fcc:	ff 91       	pop	r31
     fce:	ef 91       	pop	r30
     fd0:	9f 91       	pop	r25
     fd2:	8f 91       	pop	r24
     fd4:	2f 91       	pop	r18
     fd6:	0f 90       	pop	r0
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	0f 90       	pop	r0
     fdc:	1f 90       	pop	r1
     fde:	18 95       	reti

00000fe0 <__vector_19>:
     fe0:	1f 92       	push	r1
     fe2:	0f 92       	push	r0
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	0f 92       	push	r0
     fe8:	11 24       	eor	r1, r1
     fea:	8f 93       	push	r24
     fec:	9f 93       	push	r25
     fee:	ef 93       	push	r30
     ff0:	ff 93       	push	r31
     ff2:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <UART_TxHead>
     ff6:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <UART_TxTail>
     ffa:	98 17       	cp	r25, r24
     ffc:	69 f0       	breq	.+26     	; 0x1018 <__vector_19+0x38>
     ffe:	e0 91 7b 04 	lds	r30, 0x047B	; 0x80047b <UART_TxTail>
    1002:	ef 5f       	subi	r30, 0xFF	; 255
    1004:	ef 71       	andi	r30, 0x1F	; 31
    1006:	e0 93 7b 04 	sts	0x047B, r30	; 0x80047b <UART_TxTail>
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	e3 56       	subi	r30, 0x63	; 99
    100e:	fb 4f       	sbci	r31, 0xFB	; 251
    1010:	80 81       	ld	r24, Z
    1012:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    1016:	05 c0       	rjmp	.+10     	; 0x1022 <__vector_19+0x42>
    1018:	e1 ec       	ldi	r30, 0xC1	; 193
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	8f 7d       	andi	r24, 0xDF	; 223
    1020:	80 83       	st	Z, r24
    1022:	ff 91       	pop	r31
    1024:	ef 91       	pop	r30
    1026:	9f 91       	pop	r25
    1028:	8f 91       	pop	r24
    102a:	0f 90       	pop	r0
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	0f 90       	pop	r0
    1030:	1f 90       	pop	r1
    1032:	18 95       	reti

00001034 <uart_init>:
    1034:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <UART_TxHead>
    1038:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <UART_TxTail>
    103c:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <UART_RxHead>
    1040:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <UART_RxTail>
    1044:	99 23       	and	r25, r25
    1046:	1c f4       	brge	.+6      	; 0x104e <uart_init+0x1a>
    1048:	22 e0       	ldi	r18, 0x02	; 2
    104a:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    104e:	90 78       	andi	r25, 0x80	; 128
    1050:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    1054:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    1058:	88 e9       	ldi	r24, 0x98	; 152
    105a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    105e:	86 e0       	ldi	r24, 0x06	; 6
    1060:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    1064:	08 95       	ret

00001066 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    1066:	20 91 7c 04 	lds	r18, 0x047C	; 0x80047c <UART_TxHead>
    106a:	2f 5f       	subi	r18, 0xFF	; 255
    106c:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
    106e:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <UART_TxTail>
    1072:	29 17       	cp	r18, r25
    1074:	e1 f3       	breq	.-8      	; 0x106e <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
    1076:	e2 2f       	mov	r30, r18
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	e3 56       	subi	r30, 0x63	; 99
    107c:	fb 4f       	sbci	r31, 0xFB	; 251
    107e:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
    1080:	20 93 7c 04 	sts	0x047C, r18	; 0x80047c <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
    1084:	e1 ec       	ldi	r30, 0xC1	; 193
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	80 62       	ori	r24, 0x20	; 32
    108c:	80 83       	st	Z, r24
    108e:	08 95       	ret

00001090 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	ec 01       	movw	r28, r24
    while (*s)
    1096:	88 81       	ld	r24, Y
    1098:	88 23       	and	r24, r24
    109a:	31 f0       	breq	.+12     	; 0x10a8 <uart_puts+0x18>
    109c:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
    109e:	0e 94 33 08 	call	0x1066	; 0x1066 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
    10a2:	89 91       	ld	r24, Y+
    10a4:	81 11       	cpse	r24, r1
    10a6:	fb cf       	rjmp	.-10     	; 0x109e <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	08 95       	ret

000010ae <__subsf3>:
    10ae:	50 58       	subi	r21, 0x80	; 128

000010b0 <__addsf3>:
    10b0:	bb 27       	eor	r27, r27
    10b2:	aa 27       	eor	r26, r26
    10b4:	0e 94 6f 08 	call	0x10de	; 0x10de <__addsf3x>
    10b8:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__fp_round>
    10bc:	0e 94 ab 09 	call	0x1356	; 0x1356 <__fp_pscA>
    10c0:	38 f0       	brcs	.+14     	; 0x10d0 <__addsf3+0x20>
    10c2:	0e 94 b2 09 	call	0x1364	; 0x1364 <__fp_pscB>
    10c6:	20 f0       	brcs	.+8      	; 0x10d0 <__addsf3+0x20>
    10c8:	39 f4       	brne	.+14     	; 0x10d8 <__addsf3+0x28>
    10ca:	9f 3f       	cpi	r25, 0xFF	; 255
    10cc:	19 f4       	brne	.+6      	; 0x10d4 <__addsf3+0x24>
    10ce:	26 f4       	brtc	.+8      	; 0x10d8 <__addsf3+0x28>
    10d0:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <__fp_nan>
    10d4:	0e f4       	brtc	.+2      	; 0x10d8 <__addsf3+0x28>
    10d6:	e0 95       	com	r30
    10d8:	e7 fb       	bst	r30, 7
    10da:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__fp_inf>

000010de <__addsf3x>:
    10de:	e9 2f       	mov	r30, r25
    10e0:	0e 94 ca 09 	call	0x1394	; 0x1394 <__fp_split3>
    10e4:	58 f3       	brcs	.-42     	; 0x10bc <__addsf3+0xc>
    10e6:	ba 17       	cp	r27, r26
    10e8:	62 07       	cpc	r22, r18
    10ea:	73 07       	cpc	r23, r19
    10ec:	84 07       	cpc	r24, r20
    10ee:	95 07       	cpc	r25, r21
    10f0:	20 f0       	brcs	.+8      	; 0x10fa <__addsf3x+0x1c>
    10f2:	79 f4       	brne	.+30     	; 0x1112 <__addsf3x+0x34>
    10f4:	a6 f5       	brtc	.+104    	; 0x115e <__addsf3x+0x80>
    10f6:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <__fp_zero>
    10fa:	0e f4       	brtc	.+2      	; 0x10fe <__addsf3x+0x20>
    10fc:	e0 95       	com	r30
    10fe:	0b 2e       	mov	r0, r27
    1100:	ba 2f       	mov	r27, r26
    1102:	a0 2d       	mov	r26, r0
    1104:	0b 01       	movw	r0, r22
    1106:	b9 01       	movw	r22, r18
    1108:	90 01       	movw	r18, r0
    110a:	0c 01       	movw	r0, r24
    110c:	ca 01       	movw	r24, r20
    110e:	a0 01       	movw	r20, r0
    1110:	11 24       	eor	r1, r1
    1112:	ff 27       	eor	r31, r31
    1114:	59 1b       	sub	r21, r25
    1116:	99 f0       	breq	.+38     	; 0x113e <__addsf3x+0x60>
    1118:	59 3f       	cpi	r21, 0xF9	; 249
    111a:	50 f4       	brcc	.+20     	; 0x1130 <__addsf3x+0x52>
    111c:	50 3e       	cpi	r21, 0xE0	; 224
    111e:	68 f1       	brcs	.+90     	; 0x117a <__addsf3x+0x9c>
    1120:	1a 16       	cp	r1, r26
    1122:	f0 40       	sbci	r31, 0x00	; 0
    1124:	a2 2f       	mov	r26, r18
    1126:	23 2f       	mov	r18, r19
    1128:	34 2f       	mov	r19, r20
    112a:	44 27       	eor	r20, r20
    112c:	58 5f       	subi	r21, 0xF8	; 248
    112e:	f3 cf       	rjmp	.-26     	; 0x1116 <__addsf3x+0x38>
    1130:	46 95       	lsr	r20
    1132:	37 95       	ror	r19
    1134:	27 95       	ror	r18
    1136:	a7 95       	ror	r26
    1138:	f0 40       	sbci	r31, 0x00	; 0
    113a:	53 95       	inc	r21
    113c:	c9 f7       	brne	.-14     	; 0x1130 <__addsf3x+0x52>
    113e:	7e f4       	brtc	.+30     	; 0x115e <__addsf3x+0x80>
    1140:	1f 16       	cp	r1, r31
    1142:	ba 0b       	sbc	r27, r26
    1144:	62 0b       	sbc	r22, r18
    1146:	73 0b       	sbc	r23, r19
    1148:	84 0b       	sbc	r24, r20
    114a:	ba f0       	brmi	.+46     	; 0x117a <__addsf3x+0x9c>
    114c:	91 50       	subi	r25, 0x01	; 1
    114e:	a1 f0       	breq	.+40     	; 0x1178 <__addsf3x+0x9a>
    1150:	ff 0f       	add	r31, r31
    1152:	bb 1f       	adc	r27, r27
    1154:	66 1f       	adc	r22, r22
    1156:	77 1f       	adc	r23, r23
    1158:	88 1f       	adc	r24, r24
    115a:	c2 f7       	brpl	.-16     	; 0x114c <__addsf3x+0x6e>
    115c:	0e c0       	rjmp	.+28     	; 0x117a <__addsf3x+0x9c>
    115e:	ba 0f       	add	r27, r26
    1160:	62 1f       	adc	r22, r18
    1162:	73 1f       	adc	r23, r19
    1164:	84 1f       	adc	r24, r20
    1166:	48 f4       	brcc	.+18     	; 0x117a <__addsf3x+0x9c>
    1168:	87 95       	ror	r24
    116a:	77 95       	ror	r23
    116c:	67 95       	ror	r22
    116e:	b7 95       	ror	r27
    1170:	f7 95       	ror	r31
    1172:	9e 3f       	cpi	r25, 0xFE	; 254
    1174:	08 f0       	brcs	.+2      	; 0x1178 <__addsf3x+0x9a>
    1176:	b0 cf       	rjmp	.-160    	; 0x10d8 <__addsf3+0x28>
    1178:	93 95       	inc	r25
    117a:	88 0f       	add	r24, r24
    117c:	08 f0       	brcs	.+2      	; 0x1180 <__addsf3x+0xa2>
    117e:	99 27       	eor	r25, r25
    1180:	ee 0f       	add	r30, r30
    1182:	97 95       	ror	r25
    1184:	87 95       	ror	r24
    1186:	08 95       	ret

00001188 <__divsf3>:
    1188:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__divsf3x>
    118c:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__fp_round>
    1190:	0e 94 b2 09 	call	0x1364	; 0x1364 <__fp_pscB>
    1194:	58 f0       	brcs	.+22     	; 0x11ac <__divsf3+0x24>
    1196:	0e 94 ab 09 	call	0x1356	; 0x1356 <__fp_pscA>
    119a:	40 f0       	brcs	.+16     	; 0x11ac <__divsf3+0x24>
    119c:	29 f4       	brne	.+10     	; 0x11a8 <__divsf3+0x20>
    119e:	5f 3f       	cpi	r21, 0xFF	; 255
    11a0:	29 f0       	breq	.+10     	; 0x11ac <__divsf3+0x24>
    11a2:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__fp_inf>
    11a6:	51 11       	cpse	r21, r1
    11a8:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__fp_szero>
    11ac:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <__fp_nan>

000011b0 <__divsf3x>:
    11b0:	0e 94 ca 09 	call	0x1394	; 0x1394 <__fp_split3>
    11b4:	68 f3       	brcs	.-38     	; 0x1190 <__divsf3+0x8>

000011b6 <__divsf3_pse>:
    11b6:	99 23       	and	r25, r25
    11b8:	b1 f3       	breq	.-20     	; 0x11a6 <__divsf3+0x1e>
    11ba:	55 23       	and	r21, r21
    11bc:	91 f3       	breq	.-28     	; 0x11a2 <__divsf3+0x1a>
    11be:	95 1b       	sub	r25, r21
    11c0:	55 0b       	sbc	r21, r21
    11c2:	bb 27       	eor	r27, r27
    11c4:	aa 27       	eor	r26, r26
    11c6:	62 17       	cp	r22, r18
    11c8:	73 07       	cpc	r23, r19
    11ca:	84 07       	cpc	r24, r20
    11cc:	38 f0       	brcs	.+14     	; 0x11dc <__divsf3_pse+0x26>
    11ce:	9f 5f       	subi	r25, 0xFF	; 255
    11d0:	5f 4f       	sbci	r21, 0xFF	; 255
    11d2:	22 0f       	add	r18, r18
    11d4:	33 1f       	adc	r19, r19
    11d6:	44 1f       	adc	r20, r20
    11d8:	aa 1f       	adc	r26, r26
    11da:	a9 f3       	breq	.-22     	; 0x11c6 <__divsf3_pse+0x10>
    11dc:	35 d0       	rcall	.+106    	; 0x1248 <__divsf3_pse+0x92>
    11de:	0e 2e       	mov	r0, r30
    11e0:	3a f0       	brmi	.+14     	; 0x11f0 <__divsf3_pse+0x3a>
    11e2:	e0 e8       	ldi	r30, 0x80	; 128
    11e4:	32 d0       	rcall	.+100    	; 0x124a <__divsf3_pse+0x94>
    11e6:	91 50       	subi	r25, 0x01	; 1
    11e8:	50 40       	sbci	r21, 0x00	; 0
    11ea:	e6 95       	lsr	r30
    11ec:	00 1c       	adc	r0, r0
    11ee:	ca f7       	brpl	.-14     	; 0x11e2 <__divsf3_pse+0x2c>
    11f0:	2b d0       	rcall	.+86     	; 0x1248 <__divsf3_pse+0x92>
    11f2:	fe 2f       	mov	r31, r30
    11f4:	29 d0       	rcall	.+82     	; 0x1248 <__divsf3_pse+0x92>
    11f6:	66 0f       	add	r22, r22
    11f8:	77 1f       	adc	r23, r23
    11fa:	88 1f       	adc	r24, r24
    11fc:	bb 1f       	adc	r27, r27
    11fe:	26 17       	cp	r18, r22
    1200:	37 07       	cpc	r19, r23
    1202:	48 07       	cpc	r20, r24
    1204:	ab 07       	cpc	r26, r27
    1206:	b0 e8       	ldi	r27, 0x80	; 128
    1208:	09 f0       	breq	.+2      	; 0x120c <__divsf3_pse+0x56>
    120a:	bb 0b       	sbc	r27, r27
    120c:	80 2d       	mov	r24, r0
    120e:	bf 01       	movw	r22, r30
    1210:	ff 27       	eor	r31, r31
    1212:	93 58       	subi	r25, 0x83	; 131
    1214:	5f 4f       	sbci	r21, 0xFF	; 255
    1216:	3a f0       	brmi	.+14     	; 0x1226 <__divsf3_pse+0x70>
    1218:	9e 3f       	cpi	r25, 0xFE	; 254
    121a:	51 05       	cpc	r21, r1
    121c:	78 f0       	brcs	.+30     	; 0x123c <__divsf3_pse+0x86>
    121e:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__fp_inf>
    1222:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__fp_szero>
    1226:	5f 3f       	cpi	r21, 0xFF	; 255
    1228:	e4 f3       	brlt	.-8      	; 0x1222 <__divsf3_pse+0x6c>
    122a:	98 3e       	cpi	r25, 0xE8	; 232
    122c:	d4 f3       	brlt	.-12     	; 0x1222 <__divsf3_pse+0x6c>
    122e:	86 95       	lsr	r24
    1230:	77 95       	ror	r23
    1232:	67 95       	ror	r22
    1234:	b7 95       	ror	r27
    1236:	f7 95       	ror	r31
    1238:	9f 5f       	subi	r25, 0xFF	; 255
    123a:	c9 f7       	brne	.-14     	; 0x122e <__divsf3_pse+0x78>
    123c:	88 0f       	add	r24, r24
    123e:	91 1d       	adc	r25, r1
    1240:	96 95       	lsr	r25
    1242:	87 95       	ror	r24
    1244:	97 f9       	bld	r25, 7
    1246:	08 95       	ret
    1248:	e1 e0       	ldi	r30, 0x01	; 1
    124a:	66 0f       	add	r22, r22
    124c:	77 1f       	adc	r23, r23
    124e:	88 1f       	adc	r24, r24
    1250:	bb 1f       	adc	r27, r27
    1252:	62 17       	cp	r22, r18
    1254:	73 07       	cpc	r23, r19
    1256:	84 07       	cpc	r24, r20
    1258:	ba 07       	cpc	r27, r26
    125a:	20 f0       	brcs	.+8      	; 0x1264 <__divsf3_pse+0xae>
    125c:	62 1b       	sub	r22, r18
    125e:	73 0b       	sbc	r23, r19
    1260:	84 0b       	sbc	r24, r20
    1262:	ba 0b       	sbc	r27, r26
    1264:	ee 1f       	adc	r30, r30
    1266:	88 f7       	brcc	.-30     	; 0x124a <__divsf3_pse+0x94>
    1268:	e0 95       	com	r30
    126a:	08 95       	ret

0000126c <__fixunssfsi>:
    126c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <__fp_splitA>
    1270:	88 f0       	brcs	.+34     	; 0x1294 <__fixunssfsi+0x28>
    1272:	9f 57       	subi	r25, 0x7F	; 127
    1274:	98 f0       	brcs	.+38     	; 0x129c <__fixunssfsi+0x30>
    1276:	b9 2f       	mov	r27, r25
    1278:	99 27       	eor	r25, r25
    127a:	b7 51       	subi	r27, 0x17	; 23
    127c:	b0 f0       	brcs	.+44     	; 0x12aa <__fixunssfsi+0x3e>
    127e:	e1 f0       	breq	.+56     	; 0x12b8 <__fixunssfsi+0x4c>
    1280:	66 0f       	add	r22, r22
    1282:	77 1f       	adc	r23, r23
    1284:	88 1f       	adc	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	1a f0       	brmi	.+6      	; 0x1290 <__fixunssfsi+0x24>
    128a:	ba 95       	dec	r27
    128c:	c9 f7       	brne	.-14     	; 0x1280 <__fixunssfsi+0x14>
    128e:	14 c0       	rjmp	.+40     	; 0x12b8 <__fixunssfsi+0x4c>
    1290:	b1 30       	cpi	r27, 0x01	; 1
    1292:	91 f0       	breq	.+36     	; 0x12b8 <__fixunssfsi+0x4c>
    1294:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__fp_zero>
    1298:	b1 e0       	ldi	r27, 0x01	; 1
    129a:	08 95       	ret
    129c:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <__fp_zero>
    12a0:	67 2f       	mov	r22, r23
    12a2:	78 2f       	mov	r23, r24
    12a4:	88 27       	eor	r24, r24
    12a6:	b8 5f       	subi	r27, 0xF8	; 248
    12a8:	39 f0       	breq	.+14     	; 0x12b8 <__fixunssfsi+0x4c>
    12aa:	b9 3f       	cpi	r27, 0xF9	; 249
    12ac:	cc f3       	brlt	.-14     	; 0x12a0 <__fixunssfsi+0x34>
    12ae:	86 95       	lsr	r24
    12b0:	77 95       	ror	r23
    12b2:	67 95       	ror	r22
    12b4:	b3 95       	inc	r27
    12b6:	d9 f7       	brne	.-10     	; 0x12ae <__fixunssfsi+0x42>
    12b8:	3e f4       	brtc	.+14     	; 0x12c8 <__fixunssfsi+0x5c>
    12ba:	90 95       	com	r25
    12bc:	80 95       	com	r24
    12be:	70 95       	com	r23
    12c0:	61 95       	neg	r22
    12c2:	7f 4f       	sbci	r23, 0xFF	; 255
    12c4:	8f 4f       	sbci	r24, 0xFF	; 255
    12c6:	9f 4f       	sbci	r25, 0xFF	; 255
    12c8:	08 95       	ret

000012ca <__floatunsisf>:
    12ca:	e8 94       	clt
    12cc:	09 c0       	rjmp	.+18     	; 0x12e0 <__floatsisf+0x12>

000012ce <__floatsisf>:
    12ce:	97 fb       	bst	r25, 7
    12d0:	3e f4       	brtc	.+14     	; 0x12e0 <__floatsisf+0x12>
    12d2:	90 95       	com	r25
    12d4:	80 95       	com	r24
    12d6:	70 95       	com	r23
    12d8:	61 95       	neg	r22
    12da:	7f 4f       	sbci	r23, 0xFF	; 255
    12dc:	8f 4f       	sbci	r24, 0xFF	; 255
    12de:	9f 4f       	sbci	r25, 0xFF	; 255
    12e0:	99 23       	and	r25, r25
    12e2:	a9 f0       	breq	.+42     	; 0x130e <__floatsisf+0x40>
    12e4:	f9 2f       	mov	r31, r25
    12e6:	96 e9       	ldi	r25, 0x96	; 150
    12e8:	bb 27       	eor	r27, r27
    12ea:	93 95       	inc	r25
    12ec:	f6 95       	lsr	r31
    12ee:	87 95       	ror	r24
    12f0:	77 95       	ror	r23
    12f2:	67 95       	ror	r22
    12f4:	b7 95       	ror	r27
    12f6:	f1 11       	cpse	r31, r1
    12f8:	f8 cf       	rjmp	.-16     	; 0x12ea <__floatsisf+0x1c>
    12fa:	fa f4       	brpl	.+62     	; 0x133a <__floatsisf+0x6c>
    12fc:	bb 0f       	add	r27, r27
    12fe:	11 f4       	brne	.+4      	; 0x1304 <__floatsisf+0x36>
    1300:	60 ff       	sbrs	r22, 0
    1302:	1b c0       	rjmp	.+54     	; 0x133a <__floatsisf+0x6c>
    1304:	6f 5f       	subi	r22, 0xFF	; 255
    1306:	7f 4f       	sbci	r23, 0xFF	; 255
    1308:	8f 4f       	sbci	r24, 0xFF	; 255
    130a:	9f 4f       	sbci	r25, 0xFF	; 255
    130c:	16 c0       	rjmp	.+44     	; 0x133a <__floatsisf+0x6c>
    130e:	88 23       	and	r24, r24
    1310:	11 f0       	breq	.+4      	; 0x1316 <__floatsisf+0x48>
    1312:	96 e9       	ldi	r25, 0x96	; 150
    1314:	11 c0       	rjmp	.+34     	; 0x1338 <__floatsisf+0x6a>
    1316:	77 23       	and	r23, r23
    1318:	21 f0       	breq	.+8      	; 0x1322 <__floatsisf+0x54>
    131a:	9e e8       	ldi	r25, 0x8E	; 142
    131c:	87 2f       	mov	r24, r23
    131e:	76 2f       	mov	r23, r22
    1320:	05 c0       	rjmp	.+10     	; 0x132c <__floatsisf+0x5e>
    1322:	66 23       	and	r22, r22
    1324:	71 f0       	breq	.+28     	; 0x1342 <__floatsisf+0x74>
    1326:	96 e8       	ldi	r25, 0x86	; 134
    1328:	86 2f       	mov	r24, r22
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	60 e0       	ldi	r22, 0x00	; 0
    132e:	2a f0       	brmi	.+10     	; 0x133a <__floatsisf+0x6c>
    1330:	9a 95       	dec	r25
    1332:	66 0f       	add	r22, r22
    1334:	77 1f       	adc	r23, r23
    1336:	88 1f       	adc	r24, r24
    1338:	da f7       	brpl	.-10     	; 0x1330 <__floatsisf+0x62>
    133a:	88 0f       	add	r24, r24
    133c:	96 95       	lsr	r25
    133e:	87 95       	ror	r24
    1340:	97 f9       	bld	r25, 7
    1342:	08 95       	ret

00001344 <__fp_inf>:
    1344:	97 f9       	bld	r25, 7
    1346:	9f 67       	ori	r25, 0x7F	; 127
    1348:	80 e8       	ldi	r24, 0x80	; 128
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	08 95       	ret

00001350 <__fp_nan>:
    1350:	9f ef       	ldi	r25, 0xFF	; 255
    1352:	80 ec       	ldi	r24, 0xC0	; 192
    1354:	08 95       	ret

00001356 <__fp_pscA>:
    1356:	00 24       	eor	r0, r0
    1358:	0a 94       	dec	r0
    135a:	16 16       	cp	r1, r22
    135c:	17 06       	cpc	r1, r23
    135e:	18 06       	cpc	r1, r24
    1360:	09 06       	cpc	r0, r25
    1362:	08 95       	ret

00001364 <__fp_pscB>:
    1364:	00 24       	eor	r0, r0
    1366:	0a 94       	dec	r0
    1368:	12 16       	cp	r1, r18
    136a:	13 06       	cpc	r1, r19
    136c:	14 06       	cpc	r1, r20
    136e:	05 06       	cpc	r0, r21
    1370:	08 95       	ret

00001372 <__fp_round>:
    1372:	09 2e       	mov	r0, r25
    1374:	03 94       	inc	r0
    1376:	00 0c       	add	r0, r0
    1378:	11 f4       	brne	.+4      	; 0x137e <__fp_round+0xc>
    137a:	88 23       	and	r24, r24
    137c:	52 f0       	brmi	.+20     	; 0x1392 <__fp_round+0x20>
    137e:	bb 0f       	add	r27, r27
    1380:	40 f4       	brcc	.+16     	; 0x1392 <__fp_round+0x20>
    1382:	bf 2b       	or	r27, r31
    1384:	11 f4       	brne	.+4      	; 0x138a <__fp_round+0x18>
    1386:	60 ff       	sbrs	r22, 0
    1388:	04 c0       	rjmp	.+8      	; 0x1392 <__fp_round+0x20>
    138a:	6f 5f       	subi	r22, 0xFF	; 255
    138c:	7f 4f       	sbci	r23, 0xFF	; 255
    138e:	8f 4f       	sbci	r24, 0xFF	; 255
    1390:	9f 4f       	sbci	r25, 0xFF	; 255
    1392:	08 95       	ret

00001394 <__fp_split3>:
    1394:	57 fd       	sbrc	r21, 7
    1396:	90 58       	subi	r25, 0x80	; 128
    1398:	44 0f       	add	r20, r20
    139a:	55 1f       	adc	r21, r21
    139c:	59 f0       	breq	.+22     	; 0x13b4 <__fp_splitA+0x10>
    139e:	5f 3f       	cpi	r21, 0xFF	; 255
    13a0:	71 f0       	breq	.+28     	; 0x13be <__fp_splitA+0x1a>
    13a2:	47 95       	ror	r20

000013a4 <__fp_splitA>:
    13a4:	88 0f       	add	r24, r24
    13a6:	97 fb       	bst	r25, 7
    13a8:	99 1f       	adc	r25, r25
    13aa:	61 f0       	breq	.+24     	; 0x13c4 <__fp_splitA+0x20>
    13ac:	9f 3f       	cpi	r25, 0xFF	; 255
    13ae:	79 f0       	breq	.+30     	; 0x13ce <__fp_splitA+0x2a>
    13b0:	87 95       	ror	r24
    13b2:	08 95       	ret
    13b4:	12 16       	cp	r1, r18
    13b6:	13 06       	cpc	r1, r19
    13b8:	14 06       	cpc	r1, r20
    13ba:	55 1f       	adc	r21, r21
    13bc:	f2 cf       	rjmp	.-28     	; 0x13a2 <__fp_split3+0xe>
    13be:	46 95       	lsr	r20
    13c0:	f1 df       	rcall	.-30     	; 0x13a4 <__fp_splitA>
    13c2:	08 c0       	rjmp	.+16     	; 0x13d4 <__fp_splitA+0x30>
    13c4:	16 16       	cp	r1, r22
    13c6:	17 06       	cpc	r1, r23
    13c8:	18 06       	cpc	r1, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	f1 cf       	rjmp	.-30     	; 0x13b0 <__fp_splitA+0xc>
    13ce:	86 95       	lsr	r24
    13d0:	71 05       	cpc	r23, r1
    13d2:	61 05       	cpc	r22, r1
    13d4:	08 94       	sec
    13d6:	08 95       	ret

000013d8 <__fp_zero>:
    13d8:	e8 94       	clt

000013da <__fp_szero>:
    13da:	bb 27       	eor	r27, r27
    13dc:	66 27       	eor	r22, r22
    13de:	77 27       	eor	r23, r23
    13e0:	cb 01       	movw	r24, r22
    13e2:	97 f9       	bld	r25, 7
    13e4:	08 95       	ret

000013e6 <__mulsf3>:
    13e6:	0e 94 06 0a 	call	0x140c	; 0x140c <__mulsf3x>
    13ea:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__fp_round>
    13ee:	0e 94 ab 09 	call	0x1356	; 0x1356 <__fp_pscA>
    13f2:	38 f0       	brcs	.+14     	; 0x1402 <__mulsf3+0x1c>
    13f4:	0e 94 b2 09 	call	0x1364	; 0x1364 <__fp_pscB>
    13f8:	20 f0       	brcs	.+8      	; 0x1402 <__mulsf3+0x1c>
    13fa:	95 23       	and	r25, r21
    13fc:	11 f0       	breq	.+4      	; 0x1402 <__mulsf3+0x1c>
    13fe:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__fp_inf>
    1402:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <__fp_nan>
    1406:	11 24       	eor	r1, r1
    1408:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__fp_szero>

0000140c <__mulsf3x>:
    140c:	0e 94 ca 09 	call	0x1394	; 0x1394 <__fp_split3>
    1410:	70 f3       	brcs	.-36     	; 0x13ee <__mulsf3+0x8>

00001412 <__mulsf3_pse>:
    1412:	95 9f       	mul	r25, r21
    1414:	c1 f3       	breq	.-16     	; 0x1406 <__mulsf3+0x20>
    1416:	95 0f       	add	r25, r21
    1418:	50 e0       	ldi	r21, 0x00	; 0
    141a:	55 1f       	adc	r21, r21
    141c:	62 9f       	mul	r22, r18
    141e:	f0 01       	movw	r30, r0
    1420:	72 9f       	mul	r23, r18
    1422:	bb 27       	eor	r27, r27
    1424:	f0 0d       	add	r31, r0
    1426:	b1 1d       	adc	r27, r1
    1428:	63 9f       	mul	r22, r19
    142a:	aa 27       	eor	r26, r26
    142c:	f0 0d       	add	r31, r0
    142e:	b1 1d       	adc	r27, r1
    1430:	aa 1f       	adc	r26, r26
    1432:	64 9f       	mul	r22, r20
    1434:	66 27       	eor	r22, r22
    1436:	b0 0d       	add	r27, r0
    1438:	a1 1d       	adc	r26, r1
    143a:	66 1f       	adc	r22, r22
    143c:	82 9f       	mul	r24, r18
    143e:	22 27       	eor	r18, r18
    1440:	b0 0d       	add	r27, r0
    1442:	a1 1d       	adc	r26, r1
    1444:	62 1f       	adc	r22, r18
    1446:	73 9f       	mul	r23, r19
    1448:	b0 0d       	add	r27, r0
    144a:	a1 1d       	adc	r26, r1
    144c:	62 1f       	adc	r22, r18
    144e:	83 9f       	mul	r24, r19
    1450:	a0 0d       	add	r26, r0
    1452:	61 1d       	adc	r22, r1
    1454:	22 1f       	adc	r18, r18
    1456:	74 9f       	mul	r23, r20
    1458:	33 27       	eor	r19, r19
    145a:	a0 0d       	add	r26, r0
    145c:	61 1d       	adc	r22, r1
    145e:	23 1f       	adc	r18, r19
    1460:	84 9f       	mul	r24, r20
    1462:	60 0d       	add	r22, r0
    1464:	21 1d       	adc	r18, r1
    1466:	82 2f       	mov	r24, r18
    1468:	76 2f       	mov	r23, r22
    146a:	6a 2f       	mov	r22, r26
    146c:	11 24       	eor	r1, r1
    146e:	9f 57       	subi	r25, 0x7F	; 127
    1470:	50 40       	sbci	r21, 0x00	; 0
    1472:	9a f0       	brmi	.+38     	; 0x149a <__mulsf3_pse+0x88>
    1474:	f1 f0       	breq	.+60     	; 0x14b2 <__mulsf3_pse+0xa0>
    1476:	88 23       	and	r24, r24
    1478:	4a f0       	brmi	.+18     	; 0x148c <__mulsf3_pse+0x7a>
    147a:	ee 0f       	add	r30, r30
    147c:	ff 1f       	adc	r31, r31
    147e:	bb 1f       	adc	r27, r27
    1480:	66 1f       	adc	r22, r22
    1482:	77 1f       	adc	r23, r23
    1484:	88 1f       	adc	r24, r24
    1486:	91 50       	subi	r25, 0x01	; 1
    1488:	50 40       	sbci	r21, 0x00	; 0
    148a:	a9 f7       	brne	.-22     	; 0x1476 <__mulsf3_pse+0x64>
    148c:	9e 3f       	cpi	r25, 0xFE	; 254
    148e:	51 05       	cpc	r21, r1
    1490:	80 f0       	brcs	.+32     	; 0x14b2 <__mulsf3_pse+0xa0>
    1492:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__fp_inf>
    1496:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__fp_szero>
    149a:	5f 3f       	cpi	r21, 0xFF	; 255
    149c:	e4 f3       	brlt	.-8      	; 0x1496 <__mulsf3_pse+0x84>
    149e:	98 3e       	cpi	r25, 0xE8	; 232
    14a0:	d4 f3       	brlt	.-12     	; 0x1496 <__mulsf3_pse+0x84>
    14a2:	86 95       	lsr	r24
    14a4:	77 95       	ror	r23
    14a6:	67 95       	ror	r22
    14a8:	b7 95       	ror	r27
    14aa:	f7 95       	ror	r31
    14ac:	e7 95       	ror	r30
    14ae:	9f 5f       	subi	r25, 0xFF	; 255
    14b0:	c1 f7       	brne	.-16     	; 0x14a2 <__mulsf3_pse+0x90>
    14b2:	fe 2b       	or	r31, r30
    14b4:	88 0f       	add	r24, r24
    14b6:	91 1d       	adc	r25, r1
    14b8:	96 95       	lsr	r25
    14ba:	87 95       	ror	r24
    14bc:	97 f9       	bld	r25, 7
    14be:	08 95       	ret

000014c0 <__tablejump2__>:
    14c0:	ee 0f       	add	r30, r30
    14c2:	ff 1f       	adc	r31, r31
    14c4:	05 90       	lpm	r0, Z+
    14c6:	f4 91       	lpm	r31, Z
    14c8:	e0 2d       	mov	r30, r0
    14ca:	09 94       	ijmp

000014cc <strncpy>:
    14cc:	fb 01       	movw	r30, r22
    14ce:	dc 01       	movw	r26, r24
    14d0:	41 50       	subi	r20, 0x01	; 1
    14d2:	50 40       	sbci	r21, 0x00	; 0
    14d4:	48 f0       	brcs	.+18     	; 0x14e8 <strncpy+0x1c>
    14d6:	01 90       	ld	r0, Z+
    14d8:	0d 92       	st	X+, r0
    14da:	00 20       	and	r0, r0
    14dc:	c9 f7       	brne	.-14     	; 0x14d0 <strncpy+0x4>
    14de:	01 c0       	rjmp	.+2      	; 0x14e2 <strncpy+0x16>
    14e0:	1d 92       	st	X+, r1
    14e2:	41 50       	subi	r20, 0x01	; 1
    14e4:	50 40       	sbci	r21, 0x00	; 0
    14e6:	e0 f7       	brcc	.-8      	; 0x14e0 <strncpy+0x14>
    14e8:	08 95       	ret

000014ea <__itoa_ncheck>:
    14ea:	bb 27       	eor	r27, r27
    14ec:	4a 30       	cpi	r20, 0x0A	; 10
    14ee:	31 f4       	brne	.+12     	; 0x14fc <__itoa_ncheck+0x12>
    14f0:	99 23       	and	r25, r25
    14f2:	22 f4       	brpl	.+8      	; 0x14fc <__itoa_ncheck+0x12>
    14f4:	bd e2       	ldi	r27, 0x2D	; 45
    14f6:	90 95       	com	r25
    14f8:	81 95       	neg	r24
    14fa:	9f 4f       	sbci	r25, 0xFF	; 255
    14fc:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__utoa_common>

00001500 <__utoa_ncheck>:
    1500:	bb 27       	eor	r27, r27

00001502 <__utoa_common>:
    1502:	fb 01       	movw	r30, r22
    1504:	55 27       	eor	r21, r21
    1506:	aa 27       	eor	r26, r26
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	aa 1f       	adc	r26, r26
    150e:	a4 17       	cp	r26, r20
    1510:	10 f0       	brcs	.+4      	; 0x1516 <__utoa_common+0x14>
    1512:	a4 1b       	sub	r26, r20
    1514:	83 95       	inc	r24
    1516:	50 51       	subi	r21, 0x10	; 16
    1518:	b9 f7       	brne	.-18     	; 0x1508 <__utoa_common+0x6>
    151a:	a0 5d       	subi	r26, 0xD0	; 208
    151c:	aa 33       	cpi	r26, 0x3A	; 58
    151e:	08 f0       	brcs	.+2      	; 0x1522 <__utoa_common+0x20>
    1520:	a9 5d       	subi	r26, 0xD9	; 217
    1522:	a1 93       	st	Z+, r26
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	79 f7       	brne	.-34     	; 0x1506 <__utoa_common+0x4>
    1528:	b1 11       	cpse	r27, r1
    152a:	b1 93       	st	Z+, r27
    152c:	11 92       	st	Z+, r1
    152e:	cb 01       	movw	r24, r22
    1530:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <strrev>

00001534 <strrev>:
    1534:	dc 01       	movw	r26, r24
    1536:	fc 01       	movw	r30, r24
    1538:	67 2f       	mov	r22, r23
    153a:	71 91       	ld	r23, Z+
    153c:	77 23       	and	r23, r23
    153e:	e1 f7       	brne	.-8      	; 0x1538 <strrev+0x4>
    1540:	32 97       	sbiw	r30, 0x02	; 2
    1542:	04 c0       	rjmp	.+8      	; 0x154c <strrev+0x18>
    1544:	7c 91       	ld	r23, X
    1546:	6d 93       	st	X+, r22
    1548:	70 83       	st	Z, r23
    154a:	62 91       	ld	r22, -Z
    154c:	ae 17       	cp	r26, r30
    154e:	bf 07       	cpc	r27, r31
    1550:	c8 f3       	brcs	.-14     	; 0x1544 <strrev+0x10>
    1552:	08 95       	ret

00001554 <_exit>:
    1554:	f8 94       	cli

00001556 <__stop_program>:
    1556:	ff cf       	rjmp	.-2      	; 0x1556 <__stop_program>
