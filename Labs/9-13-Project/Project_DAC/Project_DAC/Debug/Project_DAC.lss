
Project_DAC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  0000100c  000010a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000100c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003f3  0080015e  0080015e  000010fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001130  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000142a  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa1  00000000  00000000  00002682  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb2  00000000  00000000  00003123  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  00003cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057d  00000000  00000000  00003f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d74  00000000  00000000  0000450d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00005281  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
       4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      24:	0c 94 44 03 	jmp	0x688	; 0x688 <__vector_9>
      28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      40:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_16>
      44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      68:	05 a8       	ldd	r0, Z+53	; 0x35
      6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
      6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__stack+0xd3>
      6e:	4e b9       	out	0x0e, r20	; 14
      70:	38 36       	cpi	r19, 0x68	; 104
      72:	a9 02       	muls	r26, r25
      74:	0c 50       	subi	r16, 0x0C	; 12
      76:	b9 91       	ld	r27, Y+
      78:	86 88       	ldd	r8, Z+22	; 0x16
      7a:	08 3c       	cpi	r16, 0xC8	; 200
      7c:	a6 aa       	std	Z+54, r10	; 0x36
      7e:	aa 2a       	or	r10, r26
      80:	be 00       	.word	0x00be	; ????
      82:	00 00       	nop
      84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
      86:	11 24       	eor	r1, r1
      88:	1f be       	out	0x3f, r1	; 63
      8a:	cf ef       	ldi	r28, 0xFF	; 255
      8c:	d8 e0       	ldi	r29, 0x08	; 8
      8e:	de bf       	out	0x3e, r29	; 62
      90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
      92:	11 e0       	ldi	r17, 0x01	; 1
      94:	a0 e0       	ldi	r26, 0x00	; 0
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	ec e0       	ldi	r30, 0x0C	; 12
      9a:	f0 e1       	ldi	r31, 0x10	; 16
      9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
      9e:	05 90       	lpm	r0, Z+
      a0:	0d 92       	st	X+, r0
      a2:	ae 35       	cpi	r26, 0x5E	; 94
      a4:	b1 07       	cpc	r27, r17
      a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
      a8:	25 e0       	ldi	r18, 0x05	; 5
      aa:	ae e5       	ldi	r26, 0x5E	; 94
      ac:	b1 e0       	ldi	r27, 0x01	; 1
      ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
      b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
      b2:	a1 35       	cpi	r26, 0x51	; 81
      b4:	b2 07       	cpc	r27, r18
      b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
      b8:	0e 94 b6 02 	call	0x56c	; 0x56c <main>
      bc:	0c 94 04 08 	jmp	0x1008	; 0x1008 <_exit>

000000c0 <__bad_interrupt>:
      c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
      c4:	5b 9a       	sbi	0x0b, 3	; 11
      c6:	85 e0       	ldi	r24, 0x05	; 5
      c8:	8a 95       	dec	r24
      ca:	f1 f7       	brne	.-4      	; 0xc8 <toggle_e+0x4>
      cc:	00 00       	nop
      ce:	5b 98       	cbi	0x0b, 3	; 11
      d0:	08 95       	ret

000000d2 <lcd_write>:
      d2:	cf 93       	push	r28
      d4:	c8 2f       	mov	r28, r24
      d6:	66 23       	and	r22, r22
      d8:	11 f0       	breq	.+4      	; 0xde <lcd_write+0xc>
      da:	5a 9a       	sbi	0x0b, 2	; 11
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <lcd_write+0xe>
      de:	5a 98       	cbi	0x0b, 2	; 11
      e0:	54 9a       	sbi	0x0a, 4	; 10
      e2:	55 9a       	sbi	0x0a, 5	; 10
      e4:	56 9a       	sbi	0x0a, 6	; 10
      e6:	57 9a       	sbi	0x0a, 7	; 10
      e8:	5f 98       	cbi	0x0b, 7	; 11
      ea:	5e 98       	cbi	0x0b, 6	; 11
      ec:	5d 98       	cbi	0x0b, 5	; 11
      ee:	5c 98       	cbi	0x0b, 4	; 11
      f0:	cc 23       	and	r28, r28
      f2:	0c f4       	brge	.+2      	; 0xf6 <lcd_write+0x24>
      f4:	5f 9a       	sbi	0x0b, 7	; 11
      f6:	c6 fd       	sbrc	r28, 6
      f8:	5e 9a       	sbi	0x0b, 6	; 11
      fa:	c5 fd       	sbrc	r28, 5
      fc:	5d 9a       	sbi	0x0b, 5	; 11
      fe:	c4 fd       	sbrc	r28, 4
     100:	5c 9a       	sbi	0x0b, 4	; 11
     102:	0e 94 62 00 	call	0xc4	; 0xc4 <toggle_e>
     106:	5f 98       	cbi	0x0b, 7	; 11
     108:	5e 98       	cbi	0x0b, 6	; 11
     10a:	5d 98       	cbi	0x0b, 5	; 11
     10c:	5c 98       	cbi	0x0b, 4	; 11
     10e:	c3 fd       	sbrc	r28, 3
     110:	5f 9a       	sbi	0x0b, 7	; 11
     112:	c2 fd       	sbrc	r28, 2
     114:	5e 9a       	sbi	0x0b, 6	; 11
     116:	c1 fd       	sbrc	r28, 1
     118:	5d 9a       	sbi	0x0b, 5	; 11
     11a:	c0 fd       	sbrc	r28, 0
     11c:	5c 9a       	sbi	0x0b, 4	; 11
     11e:	0e 94 62 00 	call	0xc4	; 0xc4 <toggle_e>
     122:	5c 9a       	sbi	0x0b, 4	; 11
     124:	5d 9a       	sbi	0x0b, 5	; 11
     126:	5e 9a       	sbi	0x0b, 6	; 11
     128:	5f 9a       	sbi	0x0b, 7	; 11
     12a:	87 eb       	ldi	r24, 0xB7	; 183
     12c:	9b e0       	ldi	r25, 0x0B	; 11
     12e:	01 97       	sbiw	r24, 0x01	; 1
     130:	f1 f7       	brne	.-4      	; 0x12e <lcd_write+0x5c>
     132:	00 c0       	rjmp	.+0      	; 0x134 <lcd_write+0x62>
     134:	00 00       	nop
     136:	cf 91       	pop	r28
     138:	08 95       	ret

0000013a <lcd_command>:
     13a:	60 e0       	ldi	r22, 0x00	; 0
     13c:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_write>
     140:	08 95       	ret

00000142 <lcd_gotoxy>:
     142:	61 11       	cpse	r22, r1
     144:	04 c0       	rjmp	.+8      	; 0x14e <lcd_gotoxy+0xc>
     146:	80 58       	subi	r24, 0x80	; 128
     148:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
     14c:	08 95       	ret
     14e:	80 54       	subi	r24, 0x40	; 64
     150:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
     154:	08 95       	ret

00000156 <lcd_clrscr>:
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
     15c:	08 95       	ret

0000015e <lcd_putc>:
     15e:	61 e0       	ldi	r22, 0x01	; 1
     160:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_write>
     164:	08 95       	ret

00000166 <lcd_puts>:
     166:	cf 93       	push	r28
     168:	df 93       	push	r29
     16a:	ec 01       	movw	r28, r24
     16c:	21 96       	adiw	r28, 0x01	; 1
     16e:	fc 01       	movw	r30, r24
     170:	80 81       	ld	r24, Z
     172:	88 23       	and	r24, r24
     174:	29 f0       	breq	.+10     	; 0x180 <lcd_puts+0x1a>
     176:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_putc>
     17a:	89 91       	ld	r24, Y+
     17c:	81 11       	cpse	r24, r1
     17e:	fb cf       	rjmp	.-10     	; 0x176 <lcd_puts+0x10>
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	08 95       	ret

00000186 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     186:	cf 93       	push	r28
     188:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     18a:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     18c:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     18e:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     190:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     192:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     194:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     196:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     198:	8f ef       	ldi	r24, 0xFF	; 255
     19a:	99 ef       	ldi	r25, 0xF9	; 249
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_init+0x16>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <lcd_init+0x1c>
     1a2:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
     1a4:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
     1a6:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
     1a8:	0e 94 62 00 	call	0xc4	; 0xc4 <toggle_e>
     1ac:	8f e1       	ldi	r24, 0x1F	; 31
     1ae:	9e e4       	ldi	r25, 0x4E	; 78
     1b0:	01 97       	sbiw	r24, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_init+0x2a>
     1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <lcd_init+0x30>
     1b6:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
     1b8:	0e 94 62 00 	call	0xc4	; 0xc4 <toggle_e>
     1bc:	8f ef       	ldi	r24, 0xFF	; 255
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	01 97       	sbiw	r24, 0x01	; 1
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_init+0x3a>
     1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <lcd_init+0x40>
     1c6:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
     1c8:	0e 94 62 00 	call	0xc4	; 0xc4 <toggle_e>
     1cc:	8f ef       	ldi	r24, 0xFF	; 255
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	01 97       	sbiw	r24, 0x01	; 1
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_init+0x4a>
     1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcd_init+0x50>
     1d6:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
     1d8:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
     1da:	0e 94 62 00 	call	0xc4	; 0xc4 <toggle_e>
     1de:	8f ef       	ldi	r24, 0xFF	; 255
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	01 97       	sbiw	r24, 0x01	; 1
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_init+0x5c>
     1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <lcd_init+0x62>
     1e8:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
     1ea:	88 e2       	ldi	r24, 0x28	; 40
     1ec:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
     1f0:	88 e0       	ldi	r24, 0x08	; 8
     1f2:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
    lcd_clrscr();                  /* display clear                */
     1f6:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
     1fa:	86 e0       	ldi	r24, 0x06	; 6
     1fc:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
     200:	8c 2f       	mov	r24, r28
     202:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
}/* lcd_init */
     206:	cf 91       	pop	r28
     208:	08 95       	ret

0000020a <__vector_16>:
	}
}


ISR(TIMER0_OVF_vect)
{
     20a:	1f 92       	push	r1
     20c:	0f 92       	push	r0
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	0f 92       	push	r0
     212:	11 24       	eor	r1, r1
     214:	2f 93       	push	r18
     216:	3f 93       	push	r19
     218:	8f 93       	push	r24
     21a:	9f 93       	push	r25
     21c:	ef 93       	push	r30
     21e:	ff 93       	push	r31
	static uint16_t index = 0;

	


	if (index < arr_size -1)
     220:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <index.2191>
     224:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <index.2191+0x1>
     228:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <arr_size>
     22c:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <arr_size+0x1>
     230:	01 97       	sbiw	r24, 0x01	; 1
     232:	28 17       	cp	r18, r24
     234:	39 07       	cpc	r19, r25
     236:	38 f4       	brcc	.+14     	; 0x246 <__vector_16+0x3c>
	{
		
		index++;
     238:	2f 5f       	subi	r18, 0xFF	; 255
     23a:	3f 4f       	sbci	r19, 0xFF	; 255
     23c:	30 93 64 01 	sts	0x0164, r19	; 0x800164 <index.2191+0x1>
     240:	20 93 63 01 	sts	0x0163, r18	; 0x800163 <index.2191>
     244:	08 c0       	rjmp	.+16     	; 0x256 <__vector_16+0x4c>
	}
	else
	{
		
		index=0;				// clear index 2cyc
     246:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <index.2191+0x1>
     24a:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <index.2191>
		
		asm("STS 0x0124,R1");	// balancing branches 2cyc	
     24e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <frequency+0x1f>
		asm("STS 0x0124,R1");	// balancing branches 2cyc
     252:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <frequency+0x1f>
		
	}

	PORTB = frame_buffer[index];
     256:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <index.2191>
     25a:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <index.2191+0x1>
     25e:	e7 59       	subi	r30, 0x97	; 151
     260:	fe 4f       	sbci	r31, 0xFE	; 254
     262:	80 81       	ld	r24, Z
     264:	85 b9       	out	0x05, r24	; 5

}
     266:	ff 91       	pop	r31
     268:	ef 91       	pop	r30
     26a:	9f 91       	pop	r25
     26c:	8f 91       	pop	r24
     26e:	3f 91       	pop	r19
     270:	2f 91       	pop	r18
     272:	0f 90       	pop	r0
     274:	0f be       	out	0x3f, r0	; 63
     276:	0f 90       	pop	r0
     278:	1f 90       	pop	r1
     27a:	18 95       	reti

0000027c <change_size>:




void change_size()													// change the active frame buffer size to contain whole period
{
     27c:	8f 92       	push	r8
     27e:	9f 92       	push	r9
     280:	af 92       	push	r10
     282:	bf 92       	push	r11
     284:	cf 92       	push	r12
     286:	df 92       	push	r13
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	cf 93       	push	r28
	static uint8_t timer_index = 0;
	arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set)-1;
     28e:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <frequency>
     292:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <frequency+0x1>
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 4c 06 	call	0xc98	; 0xc98 <__floatunsisf>
     29e:	9b 01       	movw	r18, r22
     2a0:	ac 01       	movw	r20, r24
     2a2:	60 e0       	ldi	r22, 0x00	; 0
     2a4:	70 e0       	ldi	r23, 0x00	; 0
     2a6:	80 e8       	ldi	r24, 0x80	; 128
     2a8:	9f e3       	ldi	r25, 0x3F	; 63
     2aa:	0e 94 ab 05 	call	0xb56	; 0xb56 <__divsf3>
     2ae:	6b 01       	movw	r12, r22
     2b0:	7c 01       	movw	r14, r24
     2b2:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <tim_set>
     2b6:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <tim_set+0x1>
     2ba:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <tim_set+0x2>
     2be:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <tim_set+0x3>
     2c2:	0e 94 ab 05 	call	0xb56	; 0xb56 <__divsf3>
     2c6:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__fixunssfsi>
     2ca:	61 50       	subi	r22, 0x01	; 1
     2cc:	71 09       	sbc	r23, r1
     2ce:	70 93 66 01 	sts	0x0166, r23	; 0x800166 <arr_size+0x1>
     2d2:	60 93 65 01 	sts	0x0165, r22	; 0x800165 <arr_size>

	while (arr_size > 1000 && timer_index < 3)
     2d6:	69 3e       	cpi	r22, 0xE9	; 233
     2d8:	73 40       	sbci	r23, 0x03	; 3
     2da:	78 f1       	brcs	.+94     	; 0x33a <change_size+0xbe>
     2dc:	c0 91 5e 01 	lds	r28, 0x015E	; 0x80015e <__data_end>
     2e0:	c3 30       	cpi	r28, 0x03	; 3
     2e2:	58 f5       	brcc	.+86     	; 0x33a <change_size+0xbe>
     2e4:	cf 5f       	subi	r28, 0xFF	; 255
     2e6:	01 c0       	rjmp	.+2      	; 0x2ea <change_size+0x6e>
     2e8:	c8 2f       	mov	r28, r24
	{
		tim_set = timer_values[++timer_index];
     2ea:	ec 2f       	mov	r30, r28
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	ee 0f       	add	r30, r30
     2f0:	ff 1f       	adc	r31, r31
     2f2:	ee 0f       	add	r30, r30
     2f4:	ff 1f       	adc	r31, r31
     2f6:	ee 5a       	subi	r30, 0xAE	; 174
     2f8:	fe 4f       	sbci	r31, 0xFE	; 254
     2fa:	80 80       	ld	r8, Z
     2fc:	91 80       	ldd	r9, Z+1	; 0x01
     2fe:	a2 80       	ldd	r10, Z+2	; 0x02
     300:	b3 80       	ldd	r11, Z+3	; 0x03
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set)-1;
     302:	a5 01       	movw	r20, r10
     304:	94 01       	movw	r18, r8
     306:	c7 01       	movw	r24, r14
     308:	b6 01       	movw	r22, r12
     30a:	0e 94 ab 05 	call	0xb56	; 0xb56 <__divsf3>
     30e:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__fixunssfsi>
     312:	61 50       	subi	r22, 0x01	; 1
     314:	71 09       	sbc	r23, r1
void change_size()													// change the active frame buffer size to contain whole period
{
	static uint8_t timer_index = 0;
	arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set)-1;

	while (arr_size > 1000 && timer_index < 3)
     316:	69 3e       	cpi	r22, 0xE9	; 233
     318:	83 e0       	ldi	r24, 0x03	; 3
     31a:	78 07       	cpc	r23, r24
     31c:	d8 f4       	brcc	.+54     	; 0x354 <change_size+0xd8>
     31e:	c0 93 5e 01 	sts	0x015E, r28	; 0x80015e <__data_end>
     322:	80 92 01 01 	sts	0x0101, r8	; 0x800101 <tim_set>
     326:	90 92 02 01 	sts	0x0102, r9	; 0x800102 <tim_set+0x1>
     32a:	a0 92 03 01 	sts	0x0103, r10	; 0x800103 <tim_set+0x2>
     32e:	b0 92 04 01 	sts	0x0104, r11	; 0x800104 <tim_set+0x3>
     332:	70 93 66 01 	sts	0x0166, r23	; 0x800166 <arr_size+0x1>
     336:	60 93 65 01 	sts	0x0165, r22	; 0x800165 <arr_size>
		tim_set = timer_values[++timer_index];
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set)-1;

	}

	while (arr_size < 255 && timer_index>0)
     33a:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <arr_size>
     33e:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <arr_size+0x1>
     342:	8f 3f       	cpi	r24, 0xFF	; 255
     344:	91 05       	cpc	r25, r1
     346:	08 f0       	brcs	.+2      	; 0x34a <change_size+0xce>
     348:	52 c0       	rjmp	.+164    	; 0x3ee <change_size+0x172>
     34a:	c0 91 5e 01 	lds	r28, 0x015E	; 0x80015e <__data_end>
     34e:	c1 11       	cpse	r28, r1
     350:	14 c0       	rjmp	.+40     	; 0x37a <change_size+0xfe>
     352:	55 c0       	rjmp	.+170    	; 0x3fe <change_size+0x182>
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	8c 0f       	add	r24, r28
void change_size()													// change the active frame buffer size to contain whole period
{
	static uint8_t timer_index = 0;
	arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set)-1;

	while (arr_size > 1000 && timer_index < 3)
     358:	84 30       	cpi	r24, 0x04	; 4
     35a:	31 f6       	brne	.-116    	; 0x2e8 <change_size+0x6c>
     35c:	c0 93 5e 01 	sts	0x015E, r28	; 0x80015e <__data_end>
     360:	80 92 01 01 	sts	0x0101, r8	; 0x800101 <tim_set>
     364:	90 92 02 01 	sts	0x0102, r9	; 0x800102 <tim_set+0x1>
     368:	a0 92 03 01 	sts	0x0103, r10	; 0x800103 <tim_set+0x2>
     36c:	b0 92 04 01 	sts	0x0104, r11	; 0x800104 <tim_set+0x3>
     370:	70 93 66 01 	sts	0x0166, r23	; 0x800166 <arr_size+0x1>
     374:	60 93 65 01 	sts	0x0165, r22	; 0x800165 <arr_size>
     378:	e0 cf       	rjmp	.-64     	; 0x33a <change_size+0xbe>

	}

	while (arr_size < 255 && timer_index>0)
	{
		tim_set = timer_values[--timer_index];
     37a:	c1 50       	subi	r28, 0x01	; 1
     37c:	ec 2f       	mov	r30, r28
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	ee 0f       	add	r30, r30
     382:	ff 1f       	adc	r31, r31
     384:	ee 0f       	add	r30, r30
     386:	ff 1f       	adc	r31, r31
     388:	ee 5a       	subi	r30, 0xAE	; 174
     38a:	fe 4f       	sbci	r31, 0xFE	; 254
     38c:	80 80       	ld	r8, Z
     38e:	91 80       	ldd	r9, Z+1	; 0x01
     390:	a2 80       	ldd	r10, Z+2	; 0x02
     392:	b3 80       	ldd	r11, Z+3	; 0x03
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set)-1;
     394:	a5 01       	movw	r20, r10
     396:	94 01       	movw	r18, r8
     398:	c7 01       	movw	r24, r14
     39a:	b6 01       	movw	r22, r12
     39c:	0e 94 ab 05 	call	0xb56	; 0xb56 <__divsf3>
     3a0:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__fixunssfsi>
     3a4:	61 50       	subi	r22, 0x01	; 1
     3a6:	71 09       	sbc	r23, r1
		tim_set = timer_values[++timer_index];
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set)-1;

	}

	while (arr_size < 255 && timer_index>0)
     3a8:	6f 3f       	cpi	r22, 0xFF	; 255
     3aa:	71 05       	cpc	r23, r1
     3ac:	78 f0       	brcs	.+30     	; 0x3cc <change_size+0x150>
     3ae:	c0 93 5e 01 	sts	0x015E, r28	; 0x80015e <__data_end>
     3b2:	80 92 01 01 	sts	0x0101, r8	; 0x800101 <tim_set>
     3b6:	90 92 02 01 	sts	0x0102, r9	; 0x800102 <tim_set+0x1>
     3ba:	a0 92 03 01 	sts	0x0103, r10	; 0x800103 <tim_set+0x2>
     3be:	b0 92 04 01 	sts	0x0104, r11	; 0x800104 <tim_set+0x3>
     3c2:	70 93 66 01 	sts	0x0166, r23	; 0x800166 <arr_size+0x1>
     3c6:	60 93 65 01 	sts	0x0165, r22	; 0x800165 <arr_size>
     3ca:	11 c0       	rjmp	.+34     	; 0x3ee <change_size+0x172>
     3cc:	c1 11       	cpse	r28, r1
     3ce:	d5 cf       	rjmp	.-86     	; 0x37a <change_size+0xfe>
     3d0:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <__data_end>
     3d4:	80 92 01 01 	sts	0x0101, r8	; 0x800101 <tim_set>
     3d8:	90 92 02 01 	sts	0x0102, r9	; 0x800102 <tim_set+0x1>
     3dc:	a0 92 03 01 	sts	0x0103, r10	; 0x800103 <tim_set+0x2>
     3e0:	b0 92 04 01 	sts	0x0104, r11	; 0x800104 <tim_set+0x3>
     3e4:	70 93 66 01 	sts	0x0166, r23	; 0x800166 <arr_size+0x1>
     3e8:	60 93 65 01 	sts	0x0165, r22	; 0x800165 <arr_size>
     3ec:	08 c0       	rjmp	.+16     	; 0x3fe <change_size+0x182>
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set)-1;


	}

	switch (timer_index)	// Theoretical: can switch the timer ovf period to update frequency, this however changes sampling frequency for which will the recon. filters not suffice										
     3ee:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
     3f2:	81 30       	cpi	r24, 0x01	; 1
     3f4:	59 f0       	breq	.+22     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3f6:	18 f0       	brcs	.+6      	; 0x3fe <change_size+0x182>
     3f8:	82 30       	cpi	r24, 0x02	; 2
     3fa:	79 f0       	breq	.+30     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     3fc:	14 c0       	rjmp	.+40     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	{
		case 0:
		TIM0_overflow_16u();
     3fe:	85 b5       	in	r24, 0x25	; 37
     400:	89 7f       	andi	r24, 0xF9	; 249
     402:	85 bd       	out	0x25, r24	; 37
     404:	85 b5       	in	r24, 0x25	; 37
     406:	81 60       	ori	r24, 0x01	; 1
     408:	85 bd       	out	0x25, r24	; 37
		break;
     40a:	0d c0       	rjmp	.+26     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>

		case 1:
		TIM0_overflow_128u();
     40c:	85 b5       	in	r24, 0x25	; 37
     40e:	8a 7f       	andi	r24, 0xFA	; 250
     410:	85 bd       	out	0x25, r24	; 37
     412:	85 b5       	in	r24, 0x25	; 37
     414:	82 60       	ori	r24, 0x02	; 2
     416:	85 bd       	out	0x25, r24	; 37
		break;
     418:	06 c0       	rjmp	.+12     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		case 2:
		TIM0_overflow_1m();
     41a:	85 b5       	in	r24, 0x25	; 37
     41c:	8b 7f       	andi	r24, 0xFB	; 251
     41e:	85 bd       	out	0x25, r24	; 37
     420:	85 b5       	in	r24, 0x25	; 37
     422:	83 60       	ori	r24, 0x03	; 3
     424:	85 bd       	out	0x25, r24	; 37
		break;
	}


}
     426:	cf 91       	pop	r28
     428:	ff 90       	pop	r15
     42a:	ef 90       	pop	r14
     42c:	df 90       	pop	r13
     42e:	cf 90       	pop	r12
     430:	bf 90       	pop	r11
     432:	af 90       	pop	r10
     434:	9f 90       	pop	r9
     436:	8f 90       	pop	r8
     438:	08 95       	ret

0000043a <update_disp>:


void update_disp(uint8_t type)	//updates the LCD with the frequency
{
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	2a 97       	sbiw	r28, 0x0a	; 10
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
     450:	18 2f       	mov	r17, r24
	lcd_gotoxy(0,0);
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	lcd_puts("                ");
     45a:	87 e0       	ldi	r24, 0x07	; 7
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_puts>
	lcd_gotoxy(0,0);
     462:	60 e0       	ldi	r22, 0x00	; 0
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	lcd_puts("Gen.: ");
     46a:	88 e1       	ldi	r24, 0x18	; 24
     46c:	91 e0       	ldi	r25, 0x01	; 1
     46e:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_puts>
	char text[10];
	switch (type_map[type-1])
     472:	e1 2f       	mov	r30, r17
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	ea 5b       	subi	r30, 0xBA	; 186
     478:	fe 4f       	sbci	r31, 0xFE	; 254
     47a:	80 81       	ld	r24, Z
     47c:	83 30       	cpi	r24, 0x03	; 3
     47e:	f9 f0       	breq	.+62     	; 0x4be <update_disp+0x84>
     480:	28 f4       	brcc	.+10     	; 0x48c <update_disp+0x52>
     482:	81 30       	cpi	r24, 0x01	; 1
     484:	49 f0       	breq	.+18     	; 0x498 <update_disp+0x5e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	81 f0       	breq	.+32     	; 0x4aa <update_disp+0x70>
     48a:	40 c0       	rjmp	.+128    	; 0x50c <update_disp+0xd2>
     48c:	85 30       	cpi	r24, 0x05	; 5
     48e:	59 f1       	breq	.+86     	; 0x4e6 <update_disp+0xac>
     490:	00 f1       	brcs	.+64     	; 0x4d2 <update_disp+0x98>
     492:	86 30       	cpi	r24, 0x06	; 6
     494:	91 f1       	breq	.+100    	; 0x4fa <update_disp+0xc0>
     496:	3a c0       	rjmp	.+116    	; 0x50c <update_disp+0xd2>
	{
		case 1:
		strcpy(text,"Sin");
     498:	83 e5       	ldi	r24, 0x53	; 83
     49a:	99 e6       	ldi	r25, 0x69	; 105
     49c:	9a 83       	std	Y+2, r25	; 0x02
     49e:	89 83       	std	Y+1, r24	; 0x01
     4a0:	8e e6       	ldi	r24, 0x6E	; 110
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	9c 83       	std	Y+4, r25	; 0x04
     4a6:	8b 83       	std	Y+3, r24	; 0x03
		break;
     4a8:	31 c0       	rjmp	.+98     	; 0x50c <update_disp+0xd2>
		
		case 2:
		strcpy(text,"Ramp+");
     4aa:	86 e0       	ldi	r24, 0x06	; 6
     4ac:	ef e1       	ldi	r30, 0x1F	; 31
     4ae:	f1 e0       	ldi	r31, 0x01	; 1
     4b0:	de 01       	movw	r26, r28
     4b2:	11 96       	adiw	r26, 0x01	; 1
     4b4:	01 90       	ld	r0, Z+
     4b6:	0d 92       	st	X+, r0
     4b8:	8a 95       	dec	r24
     4ba:	e1 f7       	brne	.-8      	; 0x4b4 <update_disp+0x7a>
		break;
     4bc:	27 c0       	rjmp	.+78     	; 0x50c <update_disp+0xd2>
		
		case 3:
		strcpy(text,"Ramp-");
     4be:	86 e0       	ldi	r24, 0x06	; 6
     4c0:	e5 e2       	ldi	r30, 0x25	; 37
     4c2:	f1 e0       	ldi	r31, 0x01	; 1
     4c4:	de 01       	movw	r26, r28
     4c6:	11 96       	adiw	r26, 0x01	; 1
     4c8:	01 90       	ld	r0, Z+
     4ca:	0d 92       	st	X+, r0
     4cc:	8a 95       	dec	r24
     4ce:	e1 f7       	brne	.-8      	; 0x4c8 <update_disp+0x8e>
		break;
     4d0:	1d c0       	rjmp	.+58     	; 0x50c <update_disp+0xd2>
		
		case 4:
		strcpy(text,"Square");
     4d2:	87 e0       	ldi	r24, 0x07	; 7
     4d4:	eb e2       	ldi	r30, 0x2B	; 43
     4d6:	f1 e0       	ldi	r31, 0x01	; 1
     4d8:	de 01       	movw	r26, r28
     4da:	11 96       	adiw	r26, 0x01	; 1
     4dc:	01 90       	ld	r0, Z+
     4de:	0d 92       	st	X+, r0
     4e0:	8a 95       	dec	r24
     4e2:	e1 f7       	brne	.-8      	; 0x4dc <update_disp+0xa2>
		break;
     4e4:	13 c0       	rjmp	.+38     	; 0x50c <update_disp+0xd2>
		
		case 5:
		strcpy(text,"Triangle");
     4e6:	89 e0       	ldi	r24, 0x09	; 9
     4e8:	e2 e3       	ldi	r30, 0x32	; 50
     4ea:	f1 e0       	ldi	r31, 0x01	; 1
     4ec:	de 01       	movw	r26, r28
     4ee:	11 96       	adiw	r26, 0x01	; 1
     4f0:	01 90       	ld	r0, Z+
     4f2:	0d 92       	st	X+, r0
     4f4:	8a 95       	dec	r24
     4f6:	e1 f7       	brne	.-8      	; 0x4f0 <update_disp+0xb6>
		break;
     4f8:	09 c0       	rjmp	.+18     	; 0x50c <update_disp+0xd2>
		
		case 6:
		strcpy(text,"Ramp+");
     4fa:	86 e0       	ldi	r24, 0x06	; 6
     4fc:	ef e1       	ldi	r30, 0x1F	; 31
     4fe:	f1 e0       	ldi	r31, 0x01	; 1
     500:	de 01       	movw	r26, r28
     502:	11 96       	adiw	r26, 0x01	; 1
     504:	01 90       	ld	r0, Z+
     506:	0d 92       	st	X+, r0
     508:	8a 95       	dec	r24
     50a:	e1 f7       	brne	.-8      	; 0x504 <update_disp+0xca>
		default:
		break;
	}
	
	
	lcd_puts(text);
     50c:	ce 01       	movw	r24, r28
     50e:	01 96       	adiw	r24, 0x01	; 1
     510:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_puts>
	
	lcd_gotoxy(0,1);
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	lcd_puts("                ");
     51c:	87 e0       	ldi	r24, 0x07	; 7
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_puts>
	lcd_gotoxy(0,1);
     524:	61 e0       	ldi	r22, 0x01	; 1
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_gotoxy>
	lcd_puts("Freq.: ");
     52c:	8b e3       	ldi	r24, 0x3B	; 59
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     534:	4a e0       	ldi	r20, 0x0A	; 10
     536:	be 01       	movw	r22, r28
     538:	6f 5f       	subi	r22, 0xFF	; 255
     53a:	7f 4f       	sbci	r23, 0xFF	; 255
     53c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <frequency>
     540:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <frequency+0x1>
     544:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__itoa_ncheck>
	itoa(frequency,text,10);
	lcd_puts(text);
     548:	ce 01       	movw	r24, r28
     54a:	01 96       	adiw	r24, 0x01	; 1
     54c:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_puts>
	lcd_puts(" Hz");
     550:	83 e4       	ldi	r24, 0x43	; 67
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_puts>
	
	
	
	
	
     558:	2a 96       	adiw	r28, 0x0a	; 10
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	f8 94       	cli
     55e:	de bf       	out	0x3e, r29	; 62
     560:	0f be       	out	0x3f, r0	; 63
     562:	cd bf       	out	0x3d, r28	; 61
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	08 95       	ret

0000056c <main>:
const uint8_t type_map[]={9,6,3,10,8,5,2,10,7,4,1};

int main(void)
{

	change_size();
     56c:	0e 94 3e 01 	call	0x27c	; 0x27c <change_size>
	lcd_init(LCD_DISP_ON);
     570:	8c e0       	ldi	r24, 0x0C	; 12
     572:	0e 94 c3 00 	call	0x186	; 0x186 <lcd_init>
	
	update_disp(11);
     576:	8b e0       	ldi	r24, 0x0B	; 11
     578:	0e 94 1d 02 	call	0x43a	; 0x43a <update_disp>
	DDRD = 0xFF;											// set D as output
     57c:	8f ef       	ldi	r24, 0xFF	; 255
     57e:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;											// set B as output
     580:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x07;											// set necesary C pins as output
     582:	87 e0       	ldi	r24, 0x07	; 7
     584:	87 b9       	out	0x07, r24	; 7

	generate_signal(frame_buffer, 1, frequency, tim_set);	// init frame buffer with sine wave of frequency 1
     586:	00 91 01 01 	lds	r16, 0x0101	; 0x800101 <tim_set>
     58a:	10 91 02 01 	lds	r17, 0x0102	; 0x800102 <tim_set+0x1>
     58e:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <tim_set+0x2>
     592:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <tim_set+0x3>
     596:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <frequency>
     59a:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <frequency+0x1>
     59e:	61 e0       	ldi	r22, 0x01	; 1
     5a0:	89 e6       	ldi	r24, 0x69	; 105
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	0e 94 e7 03 	call	0x7ce	; 0x7ce <generate_signal>



	TIM0_overflow_16u();
     5a8:	85 b5       	in	r24, 0x25	; 37
     5aa:	89 7f       	andi	r24, 0xF9	; 249
     5ac:	85 bd       	out	0x25, r24	; 37
     5ae:	85 b5       	in	r24, 0x25	; 37
     5b0:	81 60       	ori	r24, 0x01	; 1
     5b2:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
     5b4:	ee e6       	ldi	r30, 0x6E	; 110
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	80 81       	ld	r24, Z
     5ba:	81 60       	ori	r24, 0x01	; 1
     5bc:	80 83       	st	Z, r24

	TIM2_overflow_1m();
     5be:	e1 eb       	ldi	r30, 0xB1	; 177
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	80 81       	ld	r24, Z
     5c4:	8c 7f       	andi	r24, 0xFC	; 252
     5c6:	80 83       	st	Z, r24
     5c8:	80 81       	ld	r24, Z
     5ca:	84 60       	ori	r24, 0x04	; 4
     5cc:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
     5ce:	e0 e7       	ldi	r30, 0x70	; 112
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	80 81       	ld	r24, Z
     5d4:	81 60       	ori	r24, 0x01	; 1
     5d6:	80 83       	st	Z, r24


	sei();								// Enable interrupt
     5d8:	78 94       	sei
     5da:	ff cf       	rjmp	.-2      	; 0x5da <main+0x6e>

000005dc <decode_button>:

}


void decode_button(void) // decodes which button has been pressed and updates variables the button changes
{
     5dc:	0f 93       	push	r16
     5de:	1f 93       	push	r17
	uint8_t temp = 0;
	static uint8_t type = 11;
	if (butt > 0)
     5e0:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <butt>
     5e4:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <butt+0x1>
     5e8:	00 97       	sbiw	r24, 0x00	; 0
     5ea:	09 f4       	brne	.+2      	; 0x5ee <decode_button+0x12>
     5ec:	4a c0       	rjmp	.+148    	; 0x682 <decode_button+0xa6>
	{

		while ((butt & 0x0001) == 0)
     5ee:	80 fd       	sbrc	r24, 0
     5f0:	0f c0       	rjmp	.+30     	; 0x610 <decode_button+0x34>
     5f2:	20 e0       	ldi	r18, 0x00	; 0
		{
			temp++;
     5f4:	2f 5f       	subi	r18, 0xFF	; 255
			butt = butt >> 1;
     5f6:	96 95       	lsr	r25
     5f8:	87 95       	ror	r24
	uint8_t temp = 0;
	static uint8_t type = 11;
	if (butt > 0)
	{

		while ((butt & 0x0001) == 0)
     5fa:	80 ff       	sbrs	r24, 0
     5fc:	fb cf       	rjmp	.-10     	; 0x5f4 <decode_button+0x18>
     5fe:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <butt+0x1>
     602:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <butt>
		{
			temp++;
			butt = butt >> 1;
		}

		if (temp == 0 || temp == 8)
     606:	22 23       	and	r18, r18
     608:	19 f0       	breq	.+6      	; 0x610 <decode_button+0x34>
     60a:	28 30       	cpi	r18, 0x08	; 8
     60c:	e1 f4       	brne	.+56     	; 0x646 <decode_button+0x6a>
     60e:	0e c0       	rjmp	.+28     	; 0x62c <decode_button+0x50>
		{
			if (temp == 0 && frequency < 2000)
     610:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <frequency>
     614:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <frequency+0x1>
     618:	80 3d       	cpi	r24, 0xD0	; 208
     61a:	27 e0       	ldi	r18, 0x07	; 7
     61c:	92 07       	cpc	r25, r18
     61e:	a8 f4       	brcc	.+42     	; 0x64a <decode_button+0x6e>
			{
				frequency++;
     620:	01 96       	adiw	r24, 0x01	; 1
     622:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <frequency+0x1>
     626:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <frequency>
     62a:	0f c0       	rjmp	.+30     	; 0x64a <decode_button+0x6e>
			}

			if (temp == 8 && frequency > 100)
     62c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <frequency>
     630:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <frequency+0x1>
     634:	85 36       	cpi	r24, 0x65	; 101
     636:	91 05       	cpc	r25, r1
     638:	40 f0       	brcs	.+16     	; 0x64a <decode_button+0x6e>
			{
				frequency--;
     63a:	01 97       	sbiw	r24, 0x01	; 1
     63c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <frequency+0x1>
     640:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <frequency>
     644:	02 c0       	rjmp	.+4      	; 0x64a <decode_button+0x6e>
			}
		}
		else
		{
			type = temp;
     646:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
		}
		
		
		change_size();
     64a:	0e 94 3e 01 	call	0x27c	; 0x27c <change_size>
		generate_signal(frame_buffer, type_map[type-1], frequency, tim_set); // fill the frame buffer with required data (function)
     64e:	00 91 01 01 	lds	r16, 0x0101	; 0x800101 <tim_set>
     652:	10 91 02 01 	lds	r17, 0x0102	; 0x800102 <tim_set+0x1>
     656:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <tim_set+0x2>
     65a:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <tim_set+0x3>
     65e:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <frequency>
     662:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <frequency+0x1>
     666:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	ea 5b       	subi	r30, 0xBA	; 186
     66e:	fe 4f       	sbci	r31, 0xFE	; 254
     670:	60 81       	ld	r22, Z
     672:	89 e6       	ldi	r24, 0x69	; 105
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	0e 94 e7 03 	call	0x7ce	; 0x7ce <generate_signal>
		update_disp(type);
     67a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     67e:	0e 94 1d 02 	call	0x43a	; 0x43a <update_disp>

	}

}
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	08 95       	ret

00000688 <__vector_9>:
	PORTB = frame_buffer[index];

}

ISR(TIMER2_OVF_vect)
{
     688:	1f 92       	push	r1
     68a:	0f 92       	push	r0
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	0f 92       	push	r0
     690:	11 24       	eor	r1, r1
     692:	2f 93       	push	r18
     694:	3f 93       	push	r19
     696:	4f 93       	push	r20
     698:	5f 93       	push	r21
     69a:	6f 93       	push	r22
     69c:	7f 93       	push	r23
     69e:	8f 93       	push	r24
     6a0:	9f 93       	push	r25
     6a2:	af 93       	push	r26
     6a4:	bf 93       	push	r27
     6a6:	ef 93       	push	r30
     6a8:	ff 93       	push	r31
	static uint8_t ind = 0;						// indexing variable in columns
	uint16_t temp = 0;							// temporary variable for extracting button pressed
	static uint16_t debounce_reg = 0;			// debouncing register (stores value and outputs after desired period)

	static uint8_t ovf = 0;
	uint16_t  debounce_temp = debounce_reg;		// temporary debouncer to check if values have changed
     6aa:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <debounce_reg.2199>
     6ae:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <debounce_reg.2199+0x1>

	ind++;
     6b2:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <ind.2197>
     6b6:	8f 5f       	subi	r24, 0xFF	; 255
     6b8:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <ind.2197>

	if (ind < 3)								// sweep through columns
     6bc:	83 30       	cpi	r24, 0x03	; 3
     6be:	80 f4       	brcc	.+32     	; 0x6e0 <__vector_9+0x58>
	{

		PORTC &= 0xF8;
     6c0:	88 b1       	in	r24, 0x08	; 8
     6c2:	88 7f       	andi	r24, 0xF8	; 248
     6c4:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << ind);
     6c6:	48 b1       	in	r20, 0x08	; 8
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	00 90 60 01 	lds	r0, 0x0160	; 0x800160 <ind.2197>
     6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <__vector_9+0x4e>
     6d2:	88 0f       	add	r24, r24
     6d4:	99 1f       	adc	r25, r25
     6d6:	0a 94       	dec	r0
     6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <__vector_9+0x4a>
     6da:	84 2b       	or	r24, r20
     6dc:	88 b9       	out	0x08, r24	; 8
     6de:	11 c0       	rjmp	.+34     	; 0x702 <__vector_9+0x7a>

	}
	else
	{

		ind = 0;
     6e0:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <ind.2197>
		PORTC &= 0xF8;
     6e4:	88 b1       	in	r24, 0x08	; 8
     6e6:	88 7f       	andi	r24, 0xF8	; 248
     6e8:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << ind);
     6ea:	48 b1       	in	r20, 0x08	; 8
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	00 90 60 01 	lds	r0, 0x0160	; 0x800160 <ind.2197>
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <__vector_9+0x72>
     6f6:	88 0f       	add	r24, r24
     6f8:	99 1f       	adc	r25, r25
     6fa:	0a 94       	dec	r0
     6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <__vector_9+0x6e>
     6fe:	84 2b       	or	r24, r20
     700:	88 b9       	out	0x08, r24	; 8
	}

	switch (ind)								// extract button pressed and update debounce register
     702:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <ind.2197>
     706:	81 30       	cpi	r24, 0x01	; 1
     708:	c9 f0       	breq	.+50     	; 0x73c <__vector_9+0xb4>
     70a:	18 f0       	brcs	.+6      	; 0x712 <__vector_9+0x8a>
     70c:	82 30       	cpi	r24, 0x02	; 2
     70e:	39 f1       	breq	.+78     	; 0x75e <__vector_9+0xd6>
     710:	37 c0       	rjmp	.+110    	; 0x780 <__vector_9+0xf8>
	{
		case 0:
		temp = PINC & 0b01111000;
     712:	86 b1       	in	r24, 0x06	; 6
     714:	88 77       	andi	r24, 0x78	; 120
     716:	90 e0       	ldi	r25, 0x00	; 0
		temp = temp >> 3;
		debounce_reg &= 0xFFF0;
		debounce_reg |= temp;
     718:	40 91 61 01 	lds	r20, 0x0161	; 0x800161 <debounce_reg.2199>
     71c:	50 91 62 01 	lds	r21, 0x0162	; 0x800162 <debounce_reg.2199+0x1>
     720:	40 7f       	andi	r20, 0xF0	; 240
     722:	96 95       	lsr	r25
     724:	87 95       	ror	r24
     726:	96 95       	lsr	r25
     728:	87 95       	ror	r24
     72a:	96 95       	lsr	r25
     72c:	87 95       	ror	r24
     72e:	84 2b       	or	r24, r20
     730:	95 2b       	or	r25, r21
     732:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <debounce_reg.2199+0x1>
     736:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <debounce_reg.2199>
		break;
     73a:	22 c0       	rjmp	.+68     	; 0x780 <__vector_9+0xf8>

		case 1:
		temp = PINC & 0b01111000;
     73c:	86 b1       	in	r24, 0x06	; 6
     73e:	88 77       	andi	r24, 0x78	; 120
     740:	90 e0       	ldi	r25, 0x00	; 0
		temp = temp << 1;
		debounce_reg &= 0xFF0F;
		debounce_reg |= temp;
     742:	40 91 61 01 	lds	r20, 0x0161	; 0x800161 <debounce_reg.2199>
     746:	50 91 62 01 	lds	r21, 0x0162	; 0x800162 <debounce_reg.2199+0x1>
     74a:	4f 70       	andi	r20, 0x0F	; 15
     74c:	88 0f       	add	r24, r24
     74e:	99 1f       	adc	r25, r25
     750:	84 2b       	or	r24, r20
     752:	95 2b       	or	r25, r21
     754:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <debounce_reg.2199+0x1>
     758:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <debounce_reg.2199>
		break;
     75c:	11 c0       	rjmp	.+34     	; 0x780 <__vector_9+0xf8>

		case 2:
		temp = PINC & 0b01111000;
     75e:	46 b1       	in	r20, 0x06	; 6
     760:	48 77       	andi	r20, 0x78	; 120
		temp = temp << 5;
		debounce_reg &= 0xF0FF;
		debounce_reg |= temp;
     762:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <debounce_reg.2199>
     766:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <debounce_reg.2199+0x1>
     76a:	90 7f       	andi	r25, 0xF0	; 240
     76c:	60 e2       	ldi	r22, 0x20	; 32
     76e:	46 9f       	mul	r20, r22
     770:	a0 01       	movw	r20, r0
     772:	11 24       	eor	r1, r1
     774:	84 2b       	or	r24, r20
     776:	95 2b       	or	r25, r21
     778:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <debounce_reg.2199+0x1>
     77c:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <debounce_reg.2199>
		break;


	}

	ovf++;
     780:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <ovf.2200>
     784:	8f 5f       	subi	r24, 0xFF	; 255
     786:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <ovf.2200>

	if (ovf > 10 && debounce_reg == debounce_temp) // output debounced values if time has come and button values are stable
     78a:	8b 30       	cpi	r24, 0x0B	; 11
     78c:	78 f0       	brcs	.+30     	; 0x7ac <__vector_9+0x124>
     78e:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <debounce_reg.2199>
     792:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <debounce_reg.2199+0x1>
     796:	28 17       	cp	r18, r24
     798:	39 07       	cpc	r19, r25
     79a:	41 f4       	brne	.+16     	; 0x7ac <__vector_9+0x124>
	{
		butt = debounce_reg;
     79c:	30 93 68 01 	sts	0x0168, r19	; 0x800168 <butt+0x1>
     7a0:	20 93 67 01 	sts	0x0167, r18	; 0x800167 <butt>
		ovf = 0;
     7a4:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <ovf.2200>
		decode_button();
     7a8:	0e 94 ee 02 	call	0x5dc	; 0x5dc <decode_button>
	}




}
     7ac:	ff 91       	pop	r31
     7ae:	ef 91       	pop	r30
     7b0:	bf 91       	pop	r27
     7b2:	af 91       	pop	r26
     7b4:	9f 91       	pop	r25
     7b6:	8f 91       	pop	r24
     7b8:	7f 91       	pop	r23
     7ba:	6f 91       	pop	r22
     7bc:	5f 91       	pop	r21
     7be:	4f 91       	pop	r20
     7c0:	3f 91       	pop	r19
     7c2:	2f 91       	pop	r18
     7c4:	0f 90       	pop	r0
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	0f 90       	pop	r0
     7ca:	1f 90       	pop	r1
     7cc:	18 95       	reti

000007ce <generate_signal>:
 */ 
#include <avr/io.h>			// include IO operation setting
#include <math.h>			// Include math library for signal generation

void generate_signal(uint8_t* frame_buffer, uint8_t type, uint16_t freq,float tim_set)
{
     7ce:	4f 92       	push	r4
     7d0:	5f 92       	push	r5
     7d2:	6f 92       	push	r6
     7d4:	7f 92       	push	r7
     7d6:	8f 92       	push	r8
     7d8:	9f 92       	push	r9
     7da:	af 92       	push	r10
     7dc:	bf 92       	push	r11
     7de:	cf 92       	push	r12
     7e0:	df 92       	push	r13
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	ec 01       	movw	r28, r24
     7f0:	f6 2e       	mov	r15, r22
     7f2:	48 01       	movw	r8, r16
     7f4:	59 01       	movw	r10, r18
	
	
	
	
	
	uint16_t arr_length= (uint16_t)(((1/(float)freq))/tim_set)-1;	
     7f6:	ba 01       	movw	r22, r20
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 4c 06 	call	0xc98	; 0xc98 <__floatunsisf>
     800:	9b 01       	movw	r18, r22
     802:	ac 01       	movw	r20, r24
     804:	60 e0       	ldi	r22, 0x00	; 0
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	80 e8       	ldi	r24, 0x80	; 128
     80a:	9f e3       	ldi	r25, 0x3F	; 63
     80c:	0e 94 ab 05 	call	0xb56	; 0xb56 <__divsf3>
     810:	a5 01       	movw	r20, r10
     812:	94 01       	movw	r18, r8
     814:	0e 94 ab 05 	call	0xb56	; 0xb56 <__divsf3>
     818:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__fixunssfsi>
     81c:	8b 01       	movw	r16, r22
     81e:	01 50       	subi	r16, 0x01	; 1
     820:	11 09       	sbc	r17, r1
	
	
	 
	
	switch (type)
     822:	83 e0       	ldi	r24, 0x03	; 3
     824:	f8 16       	cp	r15, r24
     826:	c9 f0       	breq	.+50     	; 0x85a <generate_signal+0x8c>
     828:	8f 15       	cp	r24, r15
     82a:	38 f0       	brcs	.+14     	; 0x83a <generate_signal+0x6c>
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	f8 16       	cp	r15, r24
     830:	e9 f0       	breq	.+58     	; 0x86c <generate_signal+0x9e>
     832:	82 e0       	ldi	r24, 0x02	; 2
     834:	f8 16       	cp	r15, r24
     836:	b1 f0       	breq	.+44     	; 0x864 <generate_signal+0x96>
     838:	0b c1       	rjmp	.+534    	; 0xa50 <__stack+0x151>
     83a:	84 e0       	ldi	r24, 0x04	; 4
     83c:	f8 16       	cp	r15, r24
     83e:	41 f0       	breq	.+16     	; 0x850 <generate_signal+0x82>
     840:	85 e0       	ldi	r24, 0x05	; 5
     842:	f8 12       	cpse	r15, r24
     844:	05 c1       	rjmp	.+522    	; 0xa50 <__stack+0x151>
			frame_buffer++;
		}
		break;
		
		case 5: // triangle
		for(uint16_t i=0; i<arr_length;i++)
     846:	01 15       	cp	r16, r1
     848:	11 05       	cpc	r17, r1
     84a:	09 f0       	breq	.+2      	; 0x84e <generate_signal+0x80>
     84c:	b1 c0       	rjmp	.+354    	; 0x9b0 <__stack+0xb1>
     84e:	00 c1       	rjmp	.+512    	; 0xa50 <__stack+0x151>
			frame_buffer++;
		}
		break;
		
		case 4: // Square wave
		for(uint16_t i=0; i<arr_length;i++)
     850:	01 15       	cp	r16, r1
     852:	11 05       	cpc	r17, r1
     854:	09 f0       	breq	.+2      	; 0x858 <generate_signal+0x8a>
     856:	9a c0       	rjmp	.+308    	; 0x98c <__stack+0x8d>
     858:	fb c0       	rjmp	.+502    	; 0xa50 <__stack+0x151>
			frame_buffer++;
		}
		break;
		
		case 3: // negative ramp
		for(uint16_t i=0; i<arr_length;i++)
     85a:	01 15       	cp	r16, r1
     85c:	11 05       	cpc	r17, r1
     85e:	09 f0       	breq	.+2      	; 0x862 <generate_signal+0x94>
     860:	67 c0       	rjmp	.+206    	; 0x930 <__stack+0x31>
     862:	f6 c0       	rjmp	.+492    	; 0xa50 <__stack+0x151>
		}
		break;
		
		
		case 2: // positive ramp
		for(uint16_t i=0; i<arr_length;i++)
     864:	01 15       	cp	r16, r1
     866:	11 05       	cpc	r17, r1
     868:	e9 f5       	brne	.+122    	; 0x8e4 <generate_signal+0x116>
     86a:	f2 c0       	rjmp	.+484    	; 0xa50 <__stack+0x151>
	 
	
	switch (type)
	{
		case 1: // sin function
		for(uint16_t i=0; i<arr_length;i++)
     86c:	01 15       	cp	r16, r1
     86e:	11 05       	cpc	r17, r1
     870:	09 f4       	brne	.+2      	; 0x874 <generate_signal+0xa6>
     872:	ee c0       	rjmp	.+476    	; 0xa50 <__stack+0x151>
     874:	e1 2c       	mov	r14, r1
     876:	f1 2c       	mov	r15, r1
		{
			
			*frame_buffer=(uint8_t)(127.5*cos((float)(i)*2*M_PI/(float)arr_length)+127.5);
     878:	48 01       	movw	r8, r16
     87a:	a1 2c       	mov	r10, r1
     87c:	b1 2c       	mov	r11, r1
     87e:	b7 01       	movw	r22, r14
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 4c 06 	call	0xc98	; 0xc98 <__floatunsisf>
     888:	9b 01       	movw	r18, r22
     88a:	ac 01       	movw	r20, r24
     88c:	0e 94 3a 05 	call	0xa74	; 0xa74 <__addsf3>
     890:	2b ed       	ldi	r18, 0xDB	; 219
     892:	3f e0       	ldi	r19, 0x0F	; 15
     894:	49 e4       	ldi	r20, 0x49	; 73
     896:	50 e4       	ldi	r21, 0x40	; 64
     898:	0e 94 19 07 	call	0xe32	; 0xe32 <__mulsf3>
     89c:	2b 01       	movw	r4, r22
     89e:	3c 01       	movw	r6, r24
     8a0:	c5 01       	movw	r24, r10
     8a2:	b4 01       	movw	r22, r8
     8a4:	0e 94 4c 06 	call	0xc98	; 0xc98 <__floatunsisf>
     8a8:	9b 01       	movw	r18, r22
     8aa:	ac 01       	movw	r20, r24
     8ac:	c3 01       	movw	r24, r6
     8ae:	b2 01       	movw	r22, r4
     8b0:	0e 94 ab 05 	call	0xb56	; 0xb56 <__divsf3>
     8b4:	0e 94 a6 05 	call	0xb4c	; 0xb4c <cos>
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	4f ef       	ldi	r20, 0xFF	; 255
     8be:	52 e4       	ldi	r21, 0x42	; 66
     8c0:	0e 94 19 07 	call	0xe32	; 0xe32 <__mulsf3>
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	4f ef       	ldi	r20, 0xFF	; 255
     8ca:	52 e4       	ldi	r21, 0x42	; 66
     8cc:	0e 94 3a 05 	call	0xa74	; 0xa74 <__addsf3>
     8d0:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__fixunssfsi>
     8d4:	69 93       	st	Y+, r22
	 
	
	switch (type)
	{
		case 1: // sin function
		for(uint16_t i=0; i<arr_length;i++)
     8d6:	8f ef       	ldi	r24, 0xFF	; 255
     8d8:	e8 1a       	sub	r14, r24
     8da:	f8 0a       	sbc	r15, r24
     8dc:	e0 16       	cp	r14, r16
     8de:	f1 06       	cpc	r15, r17
     8e0:	70 f2       	brcs	.-100    	; 0x87e <generate_signal+0xb0>
     8e2:	b6 c0       	rjmp	.+364    	; 0xa50 <__stack+0x151>
		}
		break;
		
		
		case 2: // positive ramp
		for(uint16_t i=0; i<arr_length;i++)
     8e4:	e1 2c       	mov	r14, r1
     8e6:	f1 2c       	mov	r15, r1
		{
			
			*frame_buffer=(uint8_t)((float)i/arr_length*255);
     8e8:	48 01       	movw	r8, r16
     8ea:	a1 2c       	mov	r10, r1
     8ec:	b1 2c       	mov	r11, r1
     8ee:	b7 01       	movw	r22, r14
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 4c 06 	call	0xc98	; 0xc98 <__floatunsisf>
     8f8:	2b 01       	movw	r4, r22
     8fa:	3c 01       	movw	r6, r24
     8fc:	c5 01       	movw	r24, r10
     8fe:	b4 01       	movw	r22, r8
     900:	0e 94 4c 06 	call	0xc98	; 0xc98 <__floatunsisf>
     904:	9b 01       	movw	r18, r22
     906:	ac 01       	movw	r20, r24
     908:	c3 01       	movw	r24, r6
     90a:	b2 01       	movw	r22, r4
     90c:	0e 94 ab 05 	call	0xb56	; 0xb56 <__divsf3>
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	4f e7       	ldi	r20, 0x7F	; 127
     916:	53 e4       	ldi	r21, 0x43	; 67
     918:	0e 94 19 07 	call	0xe32	; 0xe32 <__mulsf3>
     91c:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__fixunssfsi>
     920:	69 93       	st	Y+, r22
		}
		break;
		
		
		case 2: // positive ramp
		for(uint16_t i=0; i<arr_length;i++)
     922:	8f ef       	ldi	r24, 0xFF	; 255
     924:	e8 1a       	sub	r14, r24
     926:	f8 0a       	sbc	r15, r24
     928:	e0 16       	cp	r14, r16
     92a:	f1 06       	cpc	r15, r17
     92c:	00 f3       	brcs	.-64     	; 0x8ee <generate_signal+0x120>
     92e:	90 c0       	rjmp	.+288    	; 0xa50 <__stack+0x151>
			frame_buffer++;
		}
		break;
		
		case 3: // negative ramp
		for(uint16_t i=0; i<arr_length;i++)
     930:	e1 2c       	mov	r14, r1
     932:	f1 2c       	mov	r15, r1
		{
			
			*frame_buffer=(uint8_t)(255-(float)i/arr_length*255);
     934:	48 01       	movw	r8, r16
     936:	a1 2c       	mov	r10, r1
     938:	b1 2c       	mov	r11, r1
     93a:	b7 01       	movw	r22, r14
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	0e 94 4c 06 	call	0xc98	; 0xc98 <__floatunsisf>
     944:	2b 01       	movw	r4, r22
     946:	3c 01       	movw	r6, r24
     948:	c5 01       	movw	r24, r10
     94a:	b4 01       	movw	r22, r8
     94c:	0e 94 4c 06 	call	0xc98	; 0xc98 <__floatunsisf>
     950:	9b 01       	movw	r18, r22
     952:	ac 01       	movw	r20, r24
     954:	c3 01       	movw	r24, r6
     956:	b2 01       	movw	r22, r4
     958:	0e 94 ab 05 	call	0xb56	; 0xb56 <__divsf3>
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	4f e7       	ldi	r20, 0x7F	; 127
     962:	53 e4       	ldi	r21, 0x43	; 67
     964:	0e 94 19 07 	call	0xe32	; 0xe32 <__mulsf3>
     968:	9b 01       	movw	r18, r22
     96a:	ac 01       	movw	r20, r24
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	8f e7       	ldi	r24, 0x7F	; 127
     972:	93 e4       	ldi	r25, 0x43	; 67
     974:	0e 94 39 05 	call	0xa72	; 0xa72 <__subsf3>
     978:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__fixunssfsi>
     97c:	69 93       	st	Y+, r22
			frame_buffer++;
		}
		break;
		
		case 3: // negative ramp
		for(uint16_t i=0; i<arr_length;i++)
     97e:	8f ef       	ldi	r24, 0xFF	; 255
     980:	e8 1a       	sub	r14, r24
     982:	f8 0a       	sbc	r15, r24
     984:	e0 16       	cp	r14, r16
     986:	f1 06       	cpc	r15, r17
     988:	c0 f2       	brcs	.-80     	; 0x93a <__stack+0x3b>
     98a:	62 c0       	rjmp	.+196    	; 0xa50 <__stack+0x151>
		break;
		
		case 4: // Square wave
		for(uint16_t i=0; i<arr_length;i++)
		{
			if(i<arr_length/2)
     98c:	98 01       	movw	r18, r16
     98e:	36 95       	lsr	r19
     990:	27 95       	ror	r18
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	90 e0       	ldi	r25, 0x00	; 0
			*frame_buffer=0;
			else
			*frame_buffer=255;
     996:	4f ef       	ldi	r20, 0xFF	; 255
		break;
		
		case 4: // Square wave
		for(uint16_t i=0; i<arr_length;i++)
		{
			if(i<arr_length/2)
     998:	82 17       	cp	r24, r18
     99a:	93 07       	cpc	r25, r19
     99c:	10 f4       	brcc	.+4      	; 0x9a2 <__stack+0xa3>
			*frame_buffer=0;
     99e:	18 82       	st	Y, r1
     9a0:	01 c0       	rjmp	.+2      	; 0x9a4 <__stack+0xa5>
			else
			*frame_buffer=255;
     9a2:	48 83       	st	Y, r20
			
			frame_buffer++;
     9a4:	21 96       	adiw	r28, 0x01	; 1
			frame_buffer++;
		}
		break;
		
		case 4: // Square wave
		for(uint16_t i=0; i<arr_length;i++)
     9a6:	01 96       	adiw	r24, 0x01	; 1
     9a8:	80 17       	cp	r24, r16
     9aa:	91 07       	cpc	r25, r17
     9ac:	a8 f3       	brcs	.-22     	; 0x998 <__stack+0x99>
     9ae:	50 c0       	rjmp	.+160    	; 0xa50 <__stack+0x151>
		break;
		
		case 5: // triangle
		for(uint16_t i=0; i<arr_length;i++)
		{
			if(i<arr_length/2)
     9b0:	68 01       	movw	r12, r16
     9b2:	d6 94       	lsr	r13
     9b4:	c7 94       	ror	r12
     9b6:	e1 2c       	mov	r14, r1
     9b8:	f1 2c       	mov	r15, r1
			*frame_buffer=(uint8_t)((float)i/arr_length*255);
			else
			*frame_buffer=(uint8_t)(255-(float)i/arr_length*255);;
     9ba:	28 01       	movw	r4, r16
     9bc:	61 2c       	mov	r6, r1
     9be:	71 2c       	mov	r7, r1
		break;
		
		case 5: // triangle
		for(uint16_t i=0; i<arr_length;i++)
		{
			if(i<arr_length/2)
     9c0:	ec 14       	cp	r14, r12
     9c2:	fd 04       	cpc	r15, r13
     9c4:	d8 f4       	brcc	.+54     	; 0x9fc <__stack+0xfd>
			*frame_buffer=(uint8_t)((float)i/arr_length*255);
     9c6:	b7 01       	movw	r22, r14
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 4c 06 	call	0xc98	; 0xc98 <__floatunsisf>
     9d0:	4b 01       	movw	r8, r22
     9d2:	5c 01       	movw	r10, r24
     9d4:	c3 01       	movw	r24, r6
     9d6:	b2 01       	movw	r22, r4
     9d8:	0e 94 4c 06 	call	0xc98	; 0xc98 <__floatunsisf>
     9dc:	9b 01       	movw	r18, r22
     9de:	ac 01       	movw	r20, r24
     9e0:	c5 01       	movw	r24, r10
     9e2:	b4 01       	movw	r22, r8
     9e4:	0e 94 ab 05 	call	0xb56	; 0xb56 <__divsf3>
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	4f e7       	ldi	r20, 0x7F	; 127
     9ee:	53 e4       	ldi	r21, 0x43	; 67
     9f0:	0e 94 19 07 	call	0xe32	; 0xe32 <__mulsf3>
     9f4:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__fixunssfsi>
     9f8:	68 83       	st	Y, r22
     9fa:	22 c0       	rjmp	.+68     	; 0xa40 <__stack+0x141>
			else
			*frame_buffer=(uint8_t)(255-(float)i/arr_length*255);;
     9fc:	b7 01       	movw	r22, r14
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 4c 06 	call	0xc98	; 0xc98 <__floatunsisf>
     a06:	4b 01       	movw	r8, r22
     a08:	5c 01       	movw	r10, r24
     a0a:	c3 01       	movw	r24, r6
     a0c:	b2 01       	movw	r22, r4
     a0e:	0e 94 4c 06 	call	0xc98	; 0xc98 <__floatunsisf>
     a12:	9b 01       	movw	r18, r22
     a14:	ac 01       	movw	r20, r24
     a16:	c5 01       	movw	r24, r10
     a18:	b4 01       	movw	r22, r8
     a1a:	0e 94 ab 05 	call	0xb56	; 0xb56 <__divsf3>
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	4f e7       	ldi	r20, 0x7F	; 127
     a24:	53 e4       	ldi	r21, 0x43	; 67
     a26:	0e 94 19 07 	call	0xe32	; 0xe32 <__mulsf3>
     a2a:	9b 01       	movw	r18, r22
     a2c:	ac 01       	movw	r20, r24
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	8f e7       	ldi	r24, 0x7F	; 127
     a34:	93 e4       	ldi	r25, 0x43	; 67
     a36:	0e 94 39 05 	call	0xa72	; 0xa72 <__subsf3>
     a3a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__fixunssfsi>
     a3e:	68 83       	st	Y, r22
			
			frame_buffer++;
     a40:	21 96       	adiw	r28, 0x01	; 1
			frame_buffer++;
		}
		break;
		
		case 5: // triangle
		for(uint16_t i=0; i<arr_length;i++)
     a42:	8f ef       	ldi	r24, 0xFF	; 255
     a44:	e8 1a       	sub	r14, r24
     a46:	f8 0a       	sbc	r15, r24
     a48:	e0 16       	cp	r14, r16
     a4a:	f1 06       	cpc	r15, r17
     a4c:	08 f4       	brcc	.+2      	; 0xa50 <__stack+0x151>
     a4e:	b8 cf       	rjmp	.-144    	; 0x9c0 <__stack+0xc1>
	}
	
	
	
	
}
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	ff 90       	pop	r15
     a5a:	ef 90       	pop	r14
     a5c:	df 90       	pop	r13
     a5e:	cf 90       	pop	r12
     a60:	bf 90       	pop	r11
     a62:	af 90       	pop	r10
     a64:	9f 90       	pop	r9
     a66:	8f 90       	pop	r8
     a68:	7f 90       	pop	r7
     a6a:	6f 90       	pop	r6
     a6c:	5f 90       	pop	r5
     a6e:	4f 90       	pop	r4
     a70:	08 95       	ret

00000a72 <__subsf3>:
     a72:	50 58       	subi	r21, 0x80	; 128

00000a74 <__addsf3>:
     a74:	bb 27       	eor	r27, r27
     a76:	aa 27       	eor	r26, r26
     a78:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__addsf3x>
     a7c:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <__fp_round>
     a80:	0e 94 92 06 	call	0xd24	; 0xd24 <__fp_pscA>
     a84:	38 f0       	brcs	.+14     	; 0xa94 <__addsf3+0x20>
     a86:	0e 94 99 06 	call	0xd32	; 0xd32 <__fp_pscB>
     a8a:	20 f0       	brcs	.+8      	; 0xa94 <__addsf3+0x20>
     a8c:	39 f4       	brne	.+14     	; 0xa9c <__addsf3+0x28>
     a8e:	9f 3f       	cpi	r25, 0xFF	; 255
     a90:	19 f4       	brne	.+6      	; 0xa98 <__addsf3+0x24>
     a92:	26 f4       	brtc	.+8      	; 0xa9c <__addsf3+0x28>
     a94:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <__fp_nan>
     a98:	0e f4       	brtc	.+2      	; 0xa9c <__addsf3+0x28>
     a9a:	e0 95       	com	r30
     a9c:	e7 fb       	bst	r30, 7
     a9e:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__fp_inf>

00000aa2 <__addsf3x>:
     aa2:	e9 2f       	mov	r30, r25
     aa4:	0e 94 f0 06 	call	0xde0	; 0xde0 <__fp_split3>
     aa8:	58 f3       	brcs	.-42     	; 0xa80 <__addsf3+0xc>
     aaa:	ba 17       	cp	r27, r26
     aac:	62 07       	cpc	r22, r18
     aae:	73 07       	cpc	r23, r19
     ab0:	84 07       	cpc	r24, r20
     ab2:	95 07       	cpc	r25, r21
     ab4:	20 f0       	brcs	.+8      	; 0xabe <__addsf3x+0x1c>
     ab6:	79 f4       	brne	.+30     	; 0xad6 <__addsf3x+0x34>
     ab8:	a6 f5       	brtc	.+104    	; 0xb22 <__addsf3x+0x80>
     aba:	0c 94 12 07 	jmp	0xe24	; 0xe24 <__fp_zero>
     abe:	0e f4       	brtc	.+2      	; 0xac2 <__addsf3x+0x20>
     ac0:	e0 95       	com	r30
     ac2:	0b 2e       	mov	r0, r27
     ac4:	ba 2f       	mov	r27, r26
     ac6:	a0 2d       	mov	r26, r0
     ac8:	0b 01       	movw	r0, r22
     aca:	b9 01       	movw	r22, r18
     acc:	90 01       	movw	r18, r0
     ace:	0c 01       	movw	r0, r24
     ad0:	ca 01       	movw	r24, r20
     ad2:	a0 01       	movw	r20, r0
     ad4:	11 24       	eor	r1, r1
     ad6:	ff 27       	eor	r31, r31
     ad8:	59 1b       	sub	r21, r25
     ada:	99 f0       	breq	.+38     	; 0xb02 <__addsf3x+0x60>
     adc:	59 3f       	cpi	r21, 0xF9	; 249
     ade:	50 f4       	brcc	.+20     	; 0xaf4 <__addsf3x+0x52>
     ae0:	50 3e       	cpi	r21, 0xE0	; 224
     ae2:	68 f1       	brcs	.+90     	; 0xb3e <__addsf3x+0x9c>
     ae4:	1a 16       	cp	r1, r26
     ae6:	f0 40       	sbci	r31, 0x00	; 0
     ae8:	a2 2f       	mov	r26, r18
     aea:	23 2f       	mov	r18, r19
     aec:	34 2f       	mov	r19, r20
     aee:	44 27       	eor	r20, r20
     af0:	58 5f       	subi	r21, 0xF8	; 248
     af2:	f3 cf       	rjmp	.-26     	; 0xada <__addsf3x+0x38>
     af4:	46 95       	lsr	r20
     af6:	37 95       	ror	r19
     af8:	27 95       	ror	r18
     afa:	a7 95       	ror	r26
     afc:	f0 40       	sbci	r31, 0x00	; 0
     afe:	53 95       	inc	r21
     b00:	c9 f7       	brne	.-14     	; 0xaf4 <__addsf3x+0x52>
     b02:	7e f4       	brtc	.+30     	; 0xb22 <__addsf3x+0x80>
     b04:	1f 16       	cp	r1, r31
     b06:	ba 0b       	sbc	r27, r26
     b08:	62 0b       	sbc	r22, r18
     b0a:	73 0b       	sbc	r23, r19
     b0c:	84 0b       	sbc	r24, r20
     b0e:	ba f0       	brmi	.+46     	; 0xb3e <__addsf3x+0x9c>
     b10:	91 50       	subi	r25, 0x01	; 1
     b12:	a1 f0       	breq	.+40     	; 0xb3c <__addsf3x+0x9a>
     b14:	ff 0f       	add	r31, r31
     b16:	bb 1f       	adc	r27, r27
     b18:	66 1f       	adc	r22, r22
     b1a:	77 1f       	adc	r23, r23
     b1c:	88 1f       	adc	r24, r24
     b1e:	c2 f7       	brpl	.-16     	; 0xb10 <__addsf3x+0x6e>
     b20:	0e c0       	rjmp	.+28     	; 0xb3e <__addsf3x+0x9c>
     b22:	ba 0f       	add	r27, r26
     b24:	62 1f       	adc	r22, r18
     b26:	73 1f       	adc	r23, r19
     b28:	84 1f       	adc	r24, r20
     b2a:	48 f4       	brcc	.+18     	; 0xb3e <__addsf3x+0x9c>
     b2c:	87 95       	ror	r24
     b2e:	77 95       	ror	r23
     b30:	67 95       	ror	r22
     b32:	b7 95       	ror	r27
     b34:	f7 95       	ror	r31
     b36:	9e 3f       	cpi	r25, 0xFE	; 254
     b38:	08 f0       	brcs	.+2      	; 0xb3c <__addsf3x+0x9a>
     b3a:	b0 cf       	rjmp	.-160    	; 0xa9c <__addsf3+0x28>
     b3c:	93 95       	inc	r25
     b3e:	88 0f       	add	r24, r24
     b40:	08 f0       	brcs	.+2      	; 0xb44 <__addsf3x+0xa2>
     b42:	99 27       	eor	r25, r25
     b44:	ee 0f       	add	r30, r30
     b46:	97 95       	ror	r25
     b48:	87 95       	ror	r24
     b4a:	08 95       	ret

00000b4c <cos>:
     b4c:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fp_rempio2>
     b50:	e3 95       	inc	r30
     b52:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__fp_sinus>

00000b56 <__divsf3>:
     b56:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__divsf3x>
     b5a:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <__fp_round>
     b5e:	0e 94 99 06 	call	0xd32	; 0xd32 <__fp_pscB>
     b62:	58 f0       	brcs	.+22     	; 0xb7a <__divsf3+0x24>
     b64:	0e 94 92 06 	call	0xd24	; 0xd24 <__fp_pscA>
     b68:	40 f0       	brcs	.+16     	; 0xb7a <__divsf3+0x24>
     b6a:	29 f4       	brne	.+10     	; 0xb76 <__divsf3+0x20>
     b6c:	5f 3f       	cpi	r21, 0xFF	; 255
     b6e:	29 f0       	breq	.+10     	; 0xb7a <__divsf3+0x24>
     b70:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__fp_inf>
     b74:	51 11       	cpse	r21, r1
     b76:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__fp_szero>
     b7a:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <__fp_nan>

00000b7e <__divsf3x>:
     b7e:	0e 94 f0 06 	call	0xde0	; 0xde0 <__fp_split3>
     b82:	68 f3       	brcs	.-38     	; 0xb5e <__divsf3+0x8>

00000b84 <__divsf3_pse>:
     b84:	99 23       	and	r25, r25
     b86:	b1 f3       	breq	.-20     	; 0xb74 <__divsf3+0x1e>
     b88:	55 23       	and	r21, r21
     b8a:	91 f3       	breq	.-28     	; 0xb70 <__divsf3+0x1a>
     b8c:	95 1b       	sub	r25, r21
     b8e:	55 0b       	sbc	r21, r21
     b90:	bb 27       	eor	r27, r27
     b92:	aa 27       	eor	r26, r26
     b94:	62 17       	cp	r22, r18
     b96:	73 07       	cpc	r23, r19
     b98:	84 07       	cpc	r24, r20
     b9a:	38 f0       	brcs	.+14     	; 0xbaa <__divsf3_pse+0x26>
     b9c:	9f 5f       	subi	r25, 0xFF	; 255
     b9e:	5f 4f       	sbci	r21, 0xFF	; 255
     ba0:	22 0f       	add	r18, r18
     ba2:	33 1f       	adc	r19, r19
     ba4:	44 1f       	adc	r20, r20
     ba6:	aa 1f       	adc	r26, r26
     ba8:	a9 f3       	breq	.-22     	; 0xb94 <__divsf3_pse+0x10>
     baa:	35 d0       	rcall	.+106    	; 0xc16 <__divsf3_pse+0x92>
     bac:	0e 2e       	mov	r0, r30
     bae:	3a f0       	brmi	.+14     	; 0xbbe <__divsf3_pse+0x3a>
     bb0:	e0 e8       	ldi	r30, 0x80	; 128
     bb2:	32 d0       	rcall	.+100    	; 0xc18 <__divsf3_pse+0x94>
     bb4:	91 50       	subi	r25, 0x01	; 1
     bb6:	50 40       	sbci	r21, 0x00	; 0
     bb8:	e6 95       	lsr	r30
     bba:	00 1c       	adc	r0, r0
     bbc:	ca f7       	brpl	.-14     	; 0xbb0 <__divsf3_pse+0x2c>
     bbe:	2b d0       	rcall	.+86     	; 0xc16 <__divsf3_pse+0x92>
     bc0:	fe 2f       	mov	r31, r30
     bc2:	29 d0       	rcall	.+82     	; 0xc16 <__divsf3_pse+0x92>
     bc4:	66 0f       	add	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	88 1f       	adc	r24, r24
     bca:	bb 1f       	adc	r27, r27
     bcc:	26 17       	cp	r18, r22
     bce:	37 07       	cpc	r19, r23
     bd0:	48 07       	cpc	r20, r24
     bd2:	ab 07       	cpc	r26, r27
     bd4:	b0 e8       	ldi	r27, 0x80	; 128
     bd6:	09 f0       	breq	.+2      	; 0xbda <__divsf3_pse+0x56>
     bd8:	bb 0b       	sbc	r27, r27
     bda:	80 2d       	mov	r24, r0
     bdc:	bf 01       	movw	r22, r30
     bde:	ff 27       	eor	r31, r31
     be0:	93 58       	subi	r25, 0x83	; 131
     be2:	5f 4f       	sbci	r21, 0xFF	; 255
     be4:	3a f0       	brmi	.+14     	; 0xbf4 <__divsf3_pse+0x70>
     be6:	9e 3f       	cpi	r25, 0xFE	; 254
     be8:	51 05       	cpc	r21, r1
     bea:	78 f0       	brcs	.+30     	; 0xc0a <__divsf3_pse+0x86>
     bec:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__fp_inf>
     bf0:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__fp_szero>
     bf4:	5f 3f       	cpi	r21, 0xFF	; 255
     bf6:	e4 f3       	brlt	.-8      	; 0xbf0 <__divsf3_pse+0x6c>
     bf8:	98 3e       	cpi	r25, 0xE8	; 232
     bfa:	d4 f3       	brlt	.-12     	; 0xbf0 <__divsf3_pse+0x6c>
     bfc:	86 95       	lsr	r24
     bfe:	77 95       	ror	r23
     c00:	67 95       	ror	r22
     c02:	b7 95       	ror	r27
     c04:	f7 95       	ror	r31
     c06:	9f 5f       	subi	r25, 0xFF	; 255
     c08:	c9 f7       	brne	.-14     	; 0xbfc <__divsf3_pse+0x78>
     c0a:	88 0f       	add	r24, r24
     c0c:	91 1d       	adc	r25, r1
     c0e:	96 95       	lsr	r25
     c10:	87 95       	ror	r24
     c12:	97 f9       	bld	r25, 7
     c14:	08 95       	ret
     c16:	e1 e0       	ldi	r30, 0x01	; 1
     c18:	66 0f       	add	r22, r22
     c1a:	77 1f       	adc	r23, r23
     c1c:	88 1f       	adc	r24, r24
     c1e:	bb 1f       	adc	r27, r27
     c20:	62 17       	cp	r22, r18
     c22:	73 07       	cpc	r23, r19
     c24:	84 07       	cpc	r24, r20
     c26:	ba 07       	cpc	r27, r26
     c28:	20 f0       	brcs	.+8      	; 0xc32 <__divsf3_pse+0xae>
     c2a:	62 1b       	sub	r22, r18
     c2c:	73 0b       	sbc	r23, r19
     c2e:	84 0b       	sbc	r24, r20
     c30:	ba 0b       	sbc	r27, r26
     c32:	ee 1f       	adc	r30, r30
     c34:	88 f7       	brcc	.-30     	; 0xc18 <__divsf3_pse+0x94>
     c36:	e0 95       	com	r30
     c38:	08 95       	ret

00000c3a <__fixunssfsi>:
     c3a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__fp_splitA>
     c3e:	88 f0       	brcs	.+34     	; 0xc62 <__fixunssfsi+0x28>
     c40:	9f 57       	subi	r25, 0x7F	; 127
     c42:	98 f0       	brcs	.+38     	; 0xc6a <__fixunssfsi+0x30>
     c44:	b9 2f       	mov	r27, r25
     c46:	99 27       	eor	r25, r25
     c48:	b7 51       	subi	r27, 0x17	; 23
     c4a:	b0 f0       	brcs	.+44     	; 0xc78 <__fixunssfsi+0x3e>
     c4c:	e1 f0       	breq	.+56     	; 0xc86 <__fixunssfsi+0x4c>
     c4e:	66 0f       	add	r22, r22
     c50:	77 1f       	adc	r23, r23
     c52:	88 1f       	adc	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	1a f0       	brmi	.+6      	; 0xc5e <__fixunssfsi+0x24>
     c58:	ba 95       	dec	r27
     c5a:	c9 f7       	brne	.-14     	; 0xc4e <__fixunssfsi+0x14>
     c5c:	14 c0       	rjmp	.+40     	; 0xc86 <__fixunssfsi+0x4c>
     c5e:	b1 30       	cpi	r27, 0x01	; 1
     c60:	91 f0       	breq	.+36     	; 0xc86 <__fixunssfsi+0x4c>
     c62:	0e 94 12 07 	call	0xe24	; 0xe24 <__fp_zero>
     c66:	b1 e0       	ldi	r27, 0x01	; 1
     c68:	08 95       	ret
     c6a:	0c 94 12 07 	jmp	0xe24	; 0xe24 <__fp_zero>
     c6e:	67 2f       	mov	r22, r23
     c70:	78 2f       	mov	r23, r24
     c72:	88 27       	eor	r24, r24
     c74:	b8 5f       	subi	r27, 0xF8	; 248
     c76:	39 f0       	breq	.+14     	; 0xc86 <__fixunssfsi+0x4c>
     c78:	b9 3f       	cpi	r27, 0xF9	; 249
     c7a:	cc f3       	brlt	.-14     	; 0xc6e <__fixunssfsi+0x34>
     c7c:	86 95       	lsr	r24
     c7e:	77 95       	ror	r23
     c80:	67 95       	ror	r22
     c82:	b3 95       	inc	r27
     c84:	d9 f7       	brne	.-10     	; 0xc7c <__fixunssfsi+0x42>
     c86:	3e f4       	brtc	.+14     	; 0xc96 <__fixunssfsi+0x5c>
     c88:	90 95       	com	r25
     c8a:	80 95       	com	r24
     c8c:	70 95       	com	r23
     c8e:	61 95       	neg	r22
     c90:	7f 4f       	sbci	r23, 0xFF	; 255
     c92:	8f 4f       	sbci	r24, 0xFF	; 255
     c94:	9f 4f       	sbci	r25, 0xFF	; 255
     c96:	08 95       	ret

00000c98 <__floatunsisf>:
     c98:	e8 94       	clt
     c9a:	09 c0       	rjmp	.+18     	; 0xcae <__floatsisf+0x12>

00000c9c <__floatsisf>:
     c9c:	97 fb       	bst	r25, 7
     c9e:	3e f4       	brtc	.+14     	; 0xcae <__floatsisf+0x12>
     ca0:	90 95       	com	r25
     ca2:	80 95       	com	r24
     ca4:	70 95       	com	r23
     ca6:	61 95       	neg	r22
     ca8:	7f 4f       	sbci	r23, 0xFF	; 255
     caa:	8f 4f       	sbci	r24, 0xFF	; 255
     cac:	9f 4f       	sbci	r25, 0xFF	; 255
     cae:	99 23       	and	r25, r25
     cb0:	a9 f0       	breq	.+42     	; 0xcdc <__floatsisf+0x40>
     cb2:	f9 2f       	mov	r31, r25
     cb4:	96 e9       	ldi	r25, 0x96	; 150
     cb6:	bb 27       	eor	r27, r27
     cb8:	93 95       	inc	r25
     cba:	f6 95       	lsr	r31
     cbc:	87 95       	ror	r24
     cbe:	77 95       	ror	r23
     cc0:	67 95       	ror	r22
     cc2:	b7 95       	ror	r27
     cc4:	f1 11       	cpse	r31, r1
     cc6:	f8 cf       	rjmp	.-16     	; 0xcb8 <__floatsisf+0x1c>
     cc8:	fa f4       	brpl	.+62     	; 0xd08 <__floatsisf+0x6c>
     cca:	bb 0f       	add	r27, r27
     ccc:	11 f4       	brne	.+4      	; 0xcd2 <__floatsisf+0x36>
     cce:	60 ff       	sbrs	r22, 0
     cd0:	1b c0       	rjmp	.+54     	; 0xd08 <__floatsisf+0x6c>
     cd2:	6f 5f       	subi	r22, 0xFF	; 255
     cd4:	7f 4f       	sbci	r23, 0xFF	; 255
     cd6:	8f 4f       	sbci	r24, 0xFF	; 255
     cd8:	9f 4f       	sbci	r25, 0xFF	; 255
     cda:	16 c0       	rjmp	.+44     	; 0xd08 <__floatsisf+0x6c>
     cdc:	88 23       	and	r24, r24
     cde:	11 f0       	breq	.+4      	; 0xce4 <__floatsisf+0x48>
     ce0:	96 e9       	ldi	r25, 0x96	; 150
     ce2:	11 c0       	rjmp	.+34     	; 0xd06 <__floatsisf+0x6a>
     ce4:	77 23       	and	r23, r23
     ce6:	21 f0       	breq	.+8      	; 0xcf0 <__floatsisf+0x54>
     ce8:	9e e8       	ldi	r25, 0x8E	; 142
     cea:	87 2f       	mov	r24, r23
     cec:	76 2f       	mov	r23, r22
     cee:	05 c0       	rjmp	.+10     	; 0xcfa <__floatsisf+0x5e>
     cf0:	66 23       	and	r22, r22
     cf2:	71 f0       	breq	.+28     	; 0xd10 <__floatsisf+0x74>
     cf4:	96 e8       	ldi	r25, 0x86	; 134
     cf6:	86 2f       	mov	r24, r22
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	2a f0       	brmi	.+10     	; 0xd08 <__floatsisf+0x6c>
     cfe:	9a 95       	dec	r25
     d00:	66 0f       	add	r22, r22
     d02:	77 1f       	adc	r23, r23
     d04:	88 1f       	adc	r24, r24
     d06:	da f7       	brpl	.-10     	; 0xcfe <__floatsisf+0x62>
     d08:	88 0f       	add	r24, r24
     d0a:	96 95       	lsr	r25
     d0c:	87 95       	ror	r24
     d0e:	97 f9       	bld	r25, 7
     d10:	08 95       	ret

00000d12 <__fp_inf>:
     d12:	97 f9       	bld	r25, 7
     d14:	9f 67       	ori	r25, 0x7F	; 127
     d16:	80 e8       	ldi	r24, 0x80	; 128
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	08 95       	ret

00000d1e <__fp_nan>:
     d1e:	9f ef       	ldi	r25, 0xFF	; 255
     d20:	80 ec       	ldi	r24, 0xC0	; 192
     d22:	08 95       	ret

00000d24 <__fp_pscA>:
     d24:	00 24       	eor	r0, r0
     d26:	0a 94       	dec	r0
     d28:	16 16       	cp	r1, r22
     d2a:	17 06       	cpc	r1, r23
     d2c:	18 06       	cpc	r1, r24
     d2e:	09 06       	cpc	r0, r25
     d30:	08 95       	ret

00000d32 <__fp_pscB>:
     d32:	00 24       	eor	r0, r0
     d34:	0a 94       	dec	r0
     d36:	12 16       	cp	r1, r18
     d38:	13 06       	cpc	r1, r19
     d3a:	14 06       	cpc	r1, r20
     d3c:	05 06       	cpc	r0, r21
     d3e:	08 95       	ret
     d40:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <__fp_nan>

00000d44 <__fp_rempio2>:
     d44:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__fp_splitA>
     d48:	d8 f3       	brcs	.-10     	; 0xd40 <__fp_pscB+0xe>
     d4a:	e8 94       	clt
     d4c:	e0 e0       	ldi	r30, 0x00	; 0
     d4e:	bb 27       	eor	r27, r27
     d50:	9f 57       	subi	r25, 0x7F	; 127
     d52:	f0 f0       	brcs	.+60     	; 0xd90 <__fp_rempio2+0x4c>
     d54:	2a ed       	ldi	r18, 0xDA	; 218
     d56:	3f e0       	ldi	r19, 0x0F	; 15
     d58:	49 ec       	ldi	r20, 0xC9	; 201
     d5a:	06 c0       	rjmp	.+12     	; 0xd68 <__fp_rempio2+0x24>
     d5c:	ee 0f       	add	r30, r30
     d5e:	bb 0f       	add	r27, r27
     d60:	66 1f       	adc	r22, r22
     d62:	77 1f       	adc	r23, r23
     d64:	88 1f       	adc	r24, r24
     d66:	28 f0       	brcs	.+10     	; 0xd72 <__fp_rempio2+0x2e>
     d68:	b2 3a       	cpi	r27, 0xA2	; 162
     d6a:	62 07       	cpc	r22, r18
     d6c:	73 07       	cpc	r23, r19
     d6e:	84 07       	cpc	r24, r20
     d70:	28 f0       	brcs	.+10     	; 0xd7c <__fp_rempio2+0x38>
     d72:	b2 5a       	subi	r27, 0xA2	; 162
     d74:	62 0b       	sbc	r22, r18
     d76:	73 0b       	sbc	r23, r19
     d78:	84 0b       	sbc	r24, r20
     d7a:	e3 95       	inc	r30
     d7c:	9a 95       	dec	r25
     d7e:	72 f7       	brpl	.-36     	; 0xd5c <__fp_rempio2+0x18>
     d80:	80 38       	cpi	r24, 0x80	; 128
     d82:	30 f4       	brcc	.+12     	; 0xd90 <__fp_rempio2+0x4c>
     d84:	9a 95       	dec	r25
     d86:	bb 0f       	add	r27, r27
     d88:	66 1f       	adc	r22, r22
     d8a:	77 1f       	adc	r23, r23
     d8c:	88 1f       	adc	r24, r24
     d8e:	d2 f7       	brpl	.-12     	; 0xd84 <__fp_rempio2+0x40>
     d90:	90 48       	sbci	r25, 0x80	; 128
     d92:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__fp_mpack_finite>

00000d96 <__fp_round>:
     d96:	09 2e       	mov	r0, r25
     d98:	03 94       	inc	r0
     d9a:	00 0c       	add	r0, r0
     d9c:	11 f4       	brne	.+4      	; 0xda2 <__fp_round+0xc>
     d9e:	88 23       	and	r24, r24
     da0:	52 f0       	brmi	.+20     	; 0xdb6 <__fp_round+0x20>
     da2:	bb 0f       	add	r27, r27
     da4:	40 f4       	brcc	.+16     	; 0xdb6 <__fp_round+0x20>
     da6:	bf 2b       	or	r27, r31
     da8:	11 f4       	brne	.+4      	; 0xdae <__fp_round+0x18>
     daa:	60 ff       	sbrs	r22, 0
     dac:	04 c0       	rjmp	.+8      	; 0xdb6 <__fp_round+0x20>
     dae:	6f 5f       	subi	r22, 0xFF	; 255
     db0:	7f 4f       	sbci	r23, 0xFF	; 255
     db2:	8f 4f       	sbci	r24, 0xFF	; 255
     db4:	9f 4f       	sbci	r25, 0xFF	; 255
     db6:	08 95       	ret

00000db8 <__fp_sinus>:
     db8:	ef 93       	push	r30
     dba:	e0 ff       	sbrs	r30, 0
     dbc:	07 c0       	rjmp	.+14     	; 0xdcc <__fp_sinus+0x14>
     dbe:	a2 ea       	ldi	r26, 0xA2	; 162
     dc0:	2a ed       	ldi	r18, 0xDA	; 218
     dc2:	3f e0       	ldi	r19, 0x0F	; 15
     dc4:	49 ec       	ldi	r20, 0xC9	; 201
     dc6:	5f eb       	ldi	r21, 0xBF	; 191
     dc8:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__addsf3x>
     dcc:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fp_round>
     dd0:	0f 90       	pop	r0
     dd2:	03 94       	inc	r0
     dd4:	01 fc       	sbrc	r0, 1
     dd6:	90 58       	subi	r25, 0x80	; 128
     dd8:	e8 e6       	ldi	r30, 0x68	; 104
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__fp_powsodd>

00000de0 <__fp_split3>:
     de0:	57 fd       	sbrc	r21, 7
     de2:	90 58       	subi	r25, 0x80	; 128
     de4:	44 0f       	add	r20, r20
     de6:	55 1f       	adc	r21, r21
     de8:	59 f0       	breq	.+22     	; 0xe00 <__fp_splitA+0x10>
     dea:	5f 3f       	cpi	r21, 0xFF	; 255
     dec:	71 f0       	breq	.+28     	; 0xe0a <__fp_splitA+0x1a>
     dee:	47 95       	ror	r20

00000df0 <__fp_splitA>:
     df0:	88 0f       	add	r24, r24
     df2:	97 fb       	bst	r25, 7
     df4:	99 1f       	adc	r25, r25
     df6:	61 f0       	breq	.+24     	; 0xe10 <__fp_splitA+0x20>
     df8:	9f 3f       	cpi	r25, 0xFF	; 255
     dfa:	79 f0       	breq	.+30     	; 0xe1a <__fp_splitA+0x2a>
     dfc:	87 95       	ror	r24
     dfe:	08 95       	ret
     e00:	12 16       	cp	r1, r18
     e02:	13 06       	cpc	r1, r19
     e04:	14 06       	cpc	r1, r20
     e06:	55 1f       	adc	r21, r21
     e08:	f2 cf       	rjmp	.-28     	; 0xdee <__fp_split3+0xe>
     e0a:	46 95       	lsr	r20
     e0c:	f1 df       	rcall	.-30     	; 0xdf0 <__fp_splitA>
     e0e:	08 c0       	rjmp	.+16     	; 0xe20 <__fp_splitA+0x30>
     e10:	16 16       	cp	r1, r22
     e12:	17 06       	cpc	r1, r23
     e14:	18 06       	cpc	r1, r24
     e16:	99 1f       	adc	r25, r25
     e18:	f1 cf       	rjmp	.-30     	; 0xdfc <__fp_splitA+0xc>
     e1a:	86 95       	lsr	r24
     e1c:	71 05       	cpc	r23, r1
     e1e:	61 05       	cpc	r22, r1
     e20:	08 94       	sec
     e22:	08 95       	ret

00000e24 <__fp_zero>:
     e24:	e8 94       	clt

00000e26 <__fp_szero>:
     e26:	bb 27       	eor	r27, r27
     e28:	66 27       	eor	r22, r22
     e2a:	77 27       	eor	r23, r23
     e2c:	cb 01       	movw	r24, r22
     e2e:	97 f9       	bld	r25, 7
     e30:	08 95       	ret

00000e32 <__mulsf3>:
     e32:	0e 94 2c 07 	call	0xe58	; 0xe58 <__mulsf3x>
     e36:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <__fp_round>
     e3a:	0e 94 92 06 	call	0xd24	; 0xd24 <__fp_pscA>
     e3e:	38 f0       	brcs	.+14     	; 0xe4e <__mulsf3+0x1c>
     e40:	0e 94 99 06 	call	0xd32	; 0xd32 <__fp_pscB>
     e44:	20 f0       	brcs	.+8      	; 0xe4e <__mulsf3+0x1c>
     e46:	95 23       	and	r25, r21
     e48:	11 f0       	breq	.+4      	; 0xe4e <__mulsf3+0x1c>
     e4a:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__fp_inf>
     e4e:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <__fp_nan>
     e52:	11 24       	eor	r1, r1
     e54:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__fp_szero>

00000e58 <__mulsf3x>:
     e58:	0e 94 f0 06 	call	0xde0	; 0xde0 <__fp_split3>
     e5c:	70 f3       	brcs	.-36     	; 0xe3a <__mulsf3+0x8>

00000e5e <__mulsf3_pse>:
     e5e:	95 9f       	mul	r25, r21
     e60:	c1 f3       	breq	.-16     	; 0xe52 <__mulsf3+0x20>
     e62:	95 0f       	add	r25, r21
     e64:	50 e0       	ldi	r21, 0x00	; 0
     e66:	55 1f       	adc	r21, r21
     e68:	62 9f       	mul	r22, r18
     e6a:	f0 01       	movw	r30, r0
     e6c:	72 9f       	mul	r23, r18
     e6e:	bb 27       	eor	r27, r27
     e70:	f0 0d       	add	r31, r0
     e72:	b1 1d       	adc	r27, r1
     e74:	63 9f       	mul	r22, r19
     e76:	aa 27       	eor	r26, r26
     e78:	f0 0d       	add	r31, r0
     e7a:	b1 1d       	adc	r27, r1
     e7c:	aa 1f       	adc	r26, r26
     e7e:	64 9f       	mul	r22, r20
     e80:	66 27       	eor	r22, r22
     e82:	b0 0d       	add	r27, r0
     e84:	a1 1d       	adc	r26, r1
     e86:	66 1f       	adc	r22, r22
     e88:	82 9f       	mul	r24, r18
     e8a:	22 27       	eor	r18, r18
     e8c:	b0 0d       	add	r27, r0
     e8e:	a1 1d       	adc	r26, r1
     e90:	62 1f       	adc	r22, r18
     e92:	73 9f       	mul	r23, r19
     e94:	b0 0d       	add	r27, r0
     e96:	a1 1d       	adc	r26, r1
     e98:	62 1f       	adc	r22, r18
     e9a:	83 9f       	mul	r24, r19
     e9c:	a0 0d       	add	r26, r0
     e9e:	61 1d       	adc	r22, r1
     ea0:	22 1f       	adc	r18, r18
     ea2:	74 9f       	mul	r23, r20
     ea4:	33 27       	eor	r19, r19
     ea6:	a0 0d       	add	r26, r0
     ea8:	61 1d       	adc	r22, r1
     eaa:	23 1f       	adc	r18, r19
     eac:	84 9f       	mul	r24, r20
     eae:	60 0d       	add	r22, r0
     eb0:	21 1d       	adc	r18, r1
     eb2:	82 2f       	mov	r24, r18
     eb4:	76 2f       	mov	r23, r22
     eb6:	6a 2f       	mov	r22, r26
     eb8:	11 24       	eor	r1, r1
     eba:	9f 57       	subi	r25, 0x7F	; 127
     ebc:	50 40       	sbci	r21, 0x00	; 0
     ebe:	9a f0       	brmi	.+38     	; 0xee6 <__mulsf3_pse+0x88>
     ec0:	f1 f0       	breq	.+60     	; 0xefe <__mulsf3_pse+0xa0>
     ec2:	88 23       	and	r24, r24
     ec4:	4a f0       	brmi	.+18     	; 0xed8 <__mulsf3_pse+0x7a>
     ec6:	ee 0f       	add	r30, r30
     ec8:	ff 1f       	adc	r31, r31
     eca:	bb 1f       	adc	r27, r27
     ecc:	66 1f       	adc	r22, r22
     ece:	77 1f       	adc	r23, r23
     ed0:	88 1f       	adc	r24, r24
     ed2:	91 50       	subi	r25, 0x01	; 1
     ed4:	50 40       	sbci	r21, 0x00	; 0
     ed6:	a9 f7       	brne	.-22     	; 0xec2 <__mulsf3_pse+0x64>
     ed8:	9e 3f       	cpi	r25, 0xFE	; 254
     eda:	51 05       	cpc	r21, r1
     edc:	80 f0       	brcs	.+32     	; 0xefe <__mulsf3_pse+0xa0>
     ede:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__fp_inf>
     ee2:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__fp_szero>
     ee6:	5f 3f       	cpi	r21, 0xFF	; 255
     ee8:	e4 f3       	brlt	.-8      	; 0xee2 <__mulsf3_pse+0x84>
     eea:	98 3e       	cpi	r25, 0xE8	; 232
     eec:	d4 f3       	brlt	.-12     	; 0xee2 <__mulsf3_pse+0x84>
     eee:	86 95       	lsr	r24
     ef0:	77 95       	ror	r23
     ef2:	67 95       	ror	r22
     ef4:	b7 95       	ror	r27
     ef6:	f7 95       	ror	r31
     ef8:	e7 95       	ror	r30
     efa:	9f 5f       	subi	r25, 0xFF	; 255
     efc:	c1 f7       	brne	.-16     	; 0xeee <__mulsf3_pse+0x90>
     efe:	fe 2b       	or	r31, r30
     f00:	88 0f       	add	r24, r24
     f02:	91 1d       	adc	r25, r1
     f04:	96 95       	lsr	r25
     f06:	87 95       	ror	r24
     f08:	97 f9       	bld	r25, 7
     f0a:	08 95       	ret

00000f0c <__fp_mpack>:
     f0c:	9f 3f       	cpi	r25, 0xFF	; 255
     f0e:	31 f0       	breq	.+12     	; 0xf1c <__fp_mpack_finite+0xc>

00000f10 <__fp_mpack_finite>:
     f10:	91 50       	subi	r25, 0x01	; 1
     f12:	20 f4       	brcc	.+8      	; 0xf1c <__fp_mpack_finite+0xc>
     f14:	87 95       	ror	r24
     f16:	77 95       	ror	r23
     f18:	67 95       	ror	r22
     f1a:	b7 95       	ror	r27
     f1c:	88 0f       	add	r24, r24
     f1e:	91 1d       	adc	r25, r1
     f20:	96 95       	lsr	r25
     f22:	87 95       	ror	r24
     f24:	97 f9       	bld	r25, 7
     f26:	08 95       	ret

00000f28 <__fp_powsodd>:
     f28:	9f 93       	push	r25
     f2a:	8f 93       	push	r24
     f2c:	7f 93       	push	r23
     f2e:	6f 93       	push	r22
     f30:	ff 93       	push	r31
     f32:	ef 93       	push	r30
     f34:	9b 01       	movw	r18, r22
     f36:	ac 01       	movw	r20, r24
     f38:	0e 94 19 07 	call	0xe32	; 0xe32 <__mulsf3>
     f3c:	ef 91       	pop	r30
     f3e:	ff 91       	pop	r31
     f40:	0e 94 a8 07 	call	0xf50	; 0xf50 <__fp_powser>
     f44:	2f 91       	pop	r18
     f46:	3f 91       	pop	r19
     f48:	4f 91       	pop	r20
     f4a:	5f 91       	pop	r21
     f4c:	0c 94 19 07 	jmp	0xe32	; 0xe32 <__mulsf3>

00000f50 <__fp_powser>:
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	1f 93       	push	r17
     f56:	0f 93       	push	r16
     f58:	ff 92       	push	r15
     f5a:	ef 92       	push	r14
     f5c:	df 92       	push	r13
     f5e:	7b 01       	movw	r14, r22
     f60:	8c 01       	movw	r16, r24
     f62:	68 94       	set
     f64:	06 c0       	rjmp	.+12     	; 0xf72 <__fp_powser+0x22>
     f66:	da 2e       	mov	r13, r26
     f68:	ef 01       	movw	r28, r30
     f6a:	0e 94 2c 07 	call	0xe58	; 0xe58 <__mulsf3x>
     f6e:	fe 01       	movw	r30, r28
     f70:	e8 94       	clt
     f72:	a5 91       	lpm	r26, Z+
     f74:	25 91       	lpm	r18, Z+
     f76:	35 91       	lpm	r19, Z+
     f78:	45 91       	lpm	r20, Z+
     f7a:	55 91       	lpm	r21, Z+
     f7c:	a6 f3       	brts	.-24     	; 0xf66 <__fp_powser+0x16>
     f7e:	ef 01       	movw	r28, r30
     f80:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__addsf3x>
     f84:	fe 01       	movw	r30, r28
     f86:	97 01       	movw	r18, r14
     f88:	a8 01       	movw	r20, r16
     f8a:	da 94       	dec	r13
     f8c:	69 f7       	brne	.-38     	; 0xf68 <__fp_powser+0x18>
     f8e:	df 90       	pop	r13
     f90:	ef 90       	pop	r14
     f92:	ff 90       	pop	r15
     f94:	0f 91       	pop	r16
     f96:	1f 91       	pop	r17
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <__itoa_ncheck>:
     f9e:	bb 27       	eor	r27, r27
     fa0:	4a 30       	cpi	r20, 0x0A	; 10
     fa2:	31 f4       	brne	.+12     	; 0xfb0 <__itoa_ncheck+0x12>
     fa4:	99 23       	and	r25, r25
     fa6:	22 f4       	brpl	.+8      	; 0xfb0 <__itoa_ncheck+0x12>
     fa8:	bd e2       	ldi	r27, 0x2D	; 45
     faa:	90 95       	com	r25
     fac:	81 95       	neg	r24
     fae:	9f 4f       	sbci	r25, 0xFF	; 255
     fb0:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <__utoa_common>

00000fb4 <__utoa_ncheck>:
     fb4:	bb 27       	eor	r27, r27

00000fb6 <__utoa_common>:
     fb6:	fb 01       	movw	r30, r22
     fb8:	55 27       	eor	r21, r21
     fba:	aa 27       	eor	r26, r26
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	aa 1f       	adc	r26, r26
     fc2:	a4 17       	cp	r26, r20
     fc4:	10 f0       	brcs	.+4      	; 0xfca <__utoa_common+0x14>
     fc6:	a4 1b       	sub	r26, r20
     fc8:	83 95       	inc	r24
     fca:	50 51       	subi	r21, 0x10	; 16
     fcc:	b9 f7       	brne	.-18     	; 0xfbc <__utoa_common+0x6>
     fce:	a0 5d       	subi	r26, 0xD0	; 208
     fd0:	aa 33       	cpi	r26, 0x3A	; 58
     fd2:	08 f0       	brcs	.+2      	; 0xfd6 <__utoa_common+0x20>
     fd4:	a9 5d       	subi	r26, 0xD9	; 217
     fd6:	a1 93       	st	Z+, r26
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	79 f7       	brne	.-34     	; 0xfba <__utoa_common+0x4>
     fdc:	b1 11       	cpse	r27, r1
     fde:	b1 93       	st	Z+, r27
     fe0:	11 92       	st	Z+, r1
     fe2:	cb 01       	movw	r24, r22
     fe4:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <strrev>

00000fe8 <strrev>:
     fe8:	dc 01       	movw	r26, r24
     fea:	fc 01       	movw	r30, r24
     fec:	67 2f       	mov	r22, r23
     fee:	71 91       	ld	r23, Z+
     ff0:	77 23       	and	r23, r23
     ff2:	e1 f7       	brne	.-8      	; 0xfec <strrev+0x4>
     ff4:	32 97       	sbiw	r30, 0x02	; 2
     ff6:	04 c0       	rjmp	.+8      	; 0x1000 <strrev+0x18>
     ff8:	7c 91       	ld	r23, X
     ffa:	6d 93       	st	X+, r22
     ffc:	70 83       	st	Z, r23
     ffe:	62 91       	ld	r22, -Z
    1000:	ae 17       	cp	r26, r30
    1002:	bf 07       	cpc	r27, r31
    1004:	c8 f3       	brcs	.-14     	; 0xff8 <strrev+0x10>
    1006:	08 95       	ret

00001008 <_exit>:
    1008:	f8 94       	cli

0000100a <__stop_program>:
    100a:	ff cf       	rjmp	.-2      	; 0x100a <__stop_program>
