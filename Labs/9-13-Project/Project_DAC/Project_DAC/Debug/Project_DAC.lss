
Project_DAC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000036a  00800100  000014d0  00001564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000439  0080046a  0080046a  000018ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001900  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001940  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b85  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c27  00000000  00000000  0000360d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ffc  00000000  00000000  00004234  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e0  00000000  00000000  00005230  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b4  00000000  00000000  00005610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001737  00000000  00000000  00005cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  000073fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__vector_9>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_16>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 7e 07 	jmp	0xefc	; 0xefc <__vector_18>
      4c:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__vector_19>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	78 01       	movw	r14, r16
      6a:	84 01       	movw	r16, r8
      6c:	8c 01       	movw	r16, r24
      6e:	94 01       	movw	r18, r8
      70:	9c 01       	movw	r18, r24
      72:	a4 01       	movw	r20, r8
      74:	ac 01       	movw	r20, r24
      76:	b8 01       	movw	r22, r16
      78:	c4 01       	movw	r24, r8
      7a:	71 05       	cpc	r23, r1
      7c:	6d 05       	cpc	r22, r13
      7e:	68 05       	cpc	r22, r8
      80:	63 05       	cpc	r22, r3
      82:	5e 05       	cpc	r21, r14
      84:	59 05       	cpc	r21, r9
      86:	54 05       	cpc	r21, r4
      88:	4f 05       	cpc	r20, r15
      8a:	4a 05       	cpc	r20, r10

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 ed       	ldi	r30, 0xD0	; 208
      a0:	f4 e1       	ldi	r31, 0x14	; 20
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	aa 36       	cpi	r26, 0x6A	; 106
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	28 e0       	ldi	r18, 0x08	; 8
      b0:	aa e6       	ldi	r26, 0x6A	; 106
      b2:	b4 e0       	ldi	r27, 0x04	; 4
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a3 3a       	cpi	r26, 0xA3	; 163
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 87 03 	call	0x70e	; 0x70e <main>
      c2:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
      ca:	5b 9a       	sbi	0x0b, 3	; 11
      cc:	85 e0       	ldi	r24, 0x05	; 5
      ce:	8a 95       	dec	r24
      d0:	f1 f7       	brne	.-4      	; 0xce <toggle_e+0x4>
      d2:	00 00       	nop
      d4:	5b 98       	cbi	0x0b, 3	; 11
      d6:	08 95       	ret

000000d8 <lcd_write>:
      d8:	cf 93       	push	r28
      da:	c8 2f       	mov	r28, r24
      dc:	66 23       	and	r22, r22
      de:	11 f0       	breq	.+4      	; 0xe4 <lcd_write+0xc>
      e0:	5a 9a       	sbi	0x0b, 2	; 11
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <lcd_write+0xe>
      e4:	5a 98       	cbi	0x0b, 2	; 11
      e6:	54 9a       	sbi	0x0a, 4	; 10
      e8:	55 9a       	sbi	0x0a, 5	; 10
      ea:	56 9a       	sbi	0x0a, 6	; 10
      ec:	57 9a       	sbi	0x0a, 7	; 10
      ee:	5f 98       	cbi	0x0b, 7	; 11
      f0:	5e 98       	cbi	0x0b, 6	; 11
      f2:	5d 98       	cbi	0x0b, 5	; 11
      f4:	5c 98       	cbi	0x0b, 4	; 11
      f6:	cc 23       	and	r28, r28
      f8:	0c f4       	brge	.+2      	; 0xfc <lcd_write+0x24>
      fa:	5f 9a       	sbi	0x0b, 7	; 11
      fc:	c6 fd       	sbrc	r28, 6
      fe:	5e 9a       	sbi	0x0b, 6	; 11
     100:	c5 fd       	sbrc	r28, 5
     102:	5d 9a       	sbi	0x0b, 5	; 11
     104:	c4 fd       	sbrc	r28, 4
     106:	5c 9a       	sbi	0x0b, 4	; 11
     108:	0e 94 65 00 	call	0xca	; 0xca <toggle_e>
     10c:	5f 98       	cbi	0x0b, 7	; 11
     10e:	5e 98       	cbi	0x0b, 6	; 11
     110:	5d 98       	cbi	0x0b, 5	; 11
     112:	5c 98       	cbi	0x0b, 4	; 11
     114:	c3 fd       	sbrc	r28, 3
     116:	5f 9a       	sbi	0x0b, 7	; 11
     118:	c2 fd       	sbrc	r28, 2
     11a:	5e 9a       	sbi	0x0b, 6	; 11
     11c:	c1 fd       	sbrc	r28, 1
     11e:	5d 9a       	sbi	0x0b, 5	; 11
     120:	c0 fd       	sbrc	r28, 0
     122:	5c 9a       	sbi	0x0b, 4	; 11
     124:	0e 94 65 00 	call	0xca	; 0xca <toggle_e>
     128:	5c 9a       	sbi	0x0b, 4	; 11
     12a:	5d 9a       	sbi	0x0b, 5	; 11
     12c:	5e 9a       	sbi	0x0b, 6	; 11
     12e:	5f 9a       	sbi	0x0b, 7	; 11
     130:	87 eb       	ldi	r24, 0xB7	; 183
     132:	9b e0       	ldi	r25, 0x0B	; 11
     134:	01 97       	sbiw	r24, 0x01	; 1
     136:	f1 f7       	brne	.-4      	; 0x134 <lcd_write+0x5c>
     138:	00 c0       	rjmp	.+0      	; 0x13a <lcd_write+0x62>
     13a:	00 00       	nop
     13c:	cf 91       	pop	r28
     13e:	08 95       	ret

00000140 <lcd_command>:
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_write>
     146:	08 95       	ret

00000148 <lcd_gotoxy>:
     148:	61 11       	cpse	r22, r1
     14a:	04 c0       	rjmp	.+8      	; 0x154 <lcd_gotoxy+0xc>
     14c:	80 58       	subi	r24, 0x80	; 128
     14e:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
     152:	08 95       	ret
     154:	80 54       	subi	r24, 0x40	; 64
     156:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
     15a:	08 95       	ret

0000015c <lcd_clrscr>:
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
     162:	08 95       	ret

00000164 <lcd_putc>:
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_write>
     16a:	08 95       	ret

0000016c <lcd_puts>:
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	ec 01       	movw	r28, r24
     172:	21 96       	adiw	r28, 0x01	; 1
     174:	fc 01       	movw	r30, r24
     176:	80 81       	ld	r24, Z
     178:	88 23       	and	r24, r24
     17a:	29 f0       	breq	.+10     	; 0x186 <lcd_puts+0x1a>
     17c:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_putc>
     180:	89 91       	ld	r24, Y+
     182:	81 11       	cpse	r24, r1
     184:	fb cf       	rjmp	.-10     	; 0x17c <lcd_puts+0x10>
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     18c:	cf 93       	push	r28
     18e:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     190:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     192:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     194:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     196:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     198:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     19a:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     19c:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     19e:	8f ef       	ldi	r24, 0xFF	; 255
     1a0:	99 ef       	ldi	r25, 0xF9	; 249
     1a2:	01 97       	sbiw	r24, 0x01	; 1
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x16>
     1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x1c>
     1a8:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
     1aa:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
     1ac:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
     1ae:	0e 94 65 00 	call	0xca	; 0xca <toggle_e>
     1b2:	8f e1       	ldi	r24, 0x1F	; 31
     1b4:	9e e4       	ldi	r25, 0x4E	; 78
     1b6:	01 97       	sbiw	r24, 0x01	; 1
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_init+0x2a>
     1ba:	00 c0       	rjmp	.+0      	; 0x1bc <lcd_init+0x30>
     1bc:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
     1be:	0e 94 65 00 	call	0xca	; 0xca <toggle_e>
     1c2:	8f ef       	ldi	r24, 0xFF	; 255
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	01 97       	sbiw	r24, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_init+0x3a>
     1ca:	00 c0       	rjmp	.+0      	; 0x1cc <lcd_init+0x40>
     1cc:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
     1ce:	0e 94 65 00 	call	0xca	; 0xca <toggle_e>
     1d2:	8f ef       	ldi	r24, 0xFF	; 255
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	01 97       	sbiw	r24, 0x01	; 1
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <lcd_init+0x4a>
     1da:	00 c0       	rjmp	.+0      	; 0x1dc <lcd_init+0x50>
     1dc:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
     1de:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
     1e0:	0e 94 65 00 	call	0xca	; 0xca <toggle_e>
     1e4:	8f ef       	ldi	r24, 0xFF	; 255
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	01 97       	sbiw	r24, 0x01	; 1
     1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcd_init+0x5c>
     1ec:	00 c0       	rjmp	.+0      	; 0x1ee <lcd_init+0x62>
     1ee:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
     1f0:	88 e2       	ldi	r24, 0x28	; 40
     1f2:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
     1f6:	88 e0       	ldi	r24, 0x08	; 8
     1f8:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
    lcd_clrscr();                  /* display clear                */
     1fc:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
     200:	86 e0       	ldi	r24, 0x06	; 6
     202:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
     206:	8c 2f       	mov	r24, r28
     208:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
}/* lcd_init */
     20c:	cf 91       	pop	r28
     20e:	08 95       	ret

00000210 <__vector_16>:
	}
}


ISR(TIMER0_OVF_vect)
{
     210:	1f 92       	push	r1
     212:	0f 92       	push	r0
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	0f 92       	push	r0
     218:	11 24       	eor	r1, r1
     21a:	2f 93       	push	r18
     21c:	3f 93       	push	r19
     21e:	8f 93       	push	r24
     220:	9f 93       	push	r25
     222:	ef 93       	push	r30
     224:	ff 93       	push	r31
	static uint16_t index = 0;

	


	if (index < arr_size -1)
     226:	20 91 70 04 	lds	r18, 0x0470	; 0x800470 <index.2121>
     22a:	30 91 71 04 	lds	r19, 0x0471	; 0x800471 <index.2121+0x1>
     22e:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <arr_size>
     232:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <arr_size+0x1>
     236:	01 97       	sbiw	r24, 0x01	; 1
     238:	28 17       	cp	r18, r24
     23a:	39 07       	cpc	r19, r25
     23c:	38 f4       	brcc	.+14     	; 0x24c <__vector_16+0x3c>
	{
		
		index++;
     23e:	2f 5f       	subi	r18, 0xFF	; 255
     240:	3f 4f       	sbci	r19, 0xFF	; 255
     242:	30 93 71 04 	sts	0x0471, r19	; 0x800471 <index.2121+0x1>
     246:	20 93 70 04 	sts	0x0470, r18	; 0x800470 <index.2121>
     24a:	08 c0       	rjmp	.+16     	; 0x25c <__vector_16+0x4c>
	}
	else
	{
		
		index=0;					// clear index 2cyc
     24c:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <index.2121+0x1>
     250:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <index.2121>
		
		asm("STS 0x0124,R1");		// balancing branches 2cyc
     254:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <frequency+0x1e>
		asm("STS 0x0124,R1");		// balancing branches 2cyc
     258:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <frequency+0x1e>
		
	}

	PORTB = frame_buffer[index];
     25c:	e0 91 70 04 	lds	r30, 0x0470	; 0x800470 <index.2121>
     260:	f0 91 71 04 	lds	r31, 0x0471	; 0x800471 <index.2121+0x1>
     264:	e5 54       	subi	r30, 0x45	; 69
     266:	fb 4f       	sbci	r31, 0xFB	; 251
     268:	80 81       	ld	r24, Z
     26a:	85 b9       	out	0x05, r24	; 5

}
     26c:	ff 91       	pop	r31
     26e:	ef 91       	pop	r30
     270:	9f 91       	pop	r25
     272:	8f 91       	pop	r24
     274:	3f 91       	pop	r19
     276:	2f 91       	pop	r18
     278:	0f 90       	pop	r0
     27a:	0f be       	out	0x3f, r0	; 63
     27c:	0f 90       	pop	r0
     27e:	1f 90       	pop	r1
     280:	18 95       	reti

00000282 <return_wvftype>:
	uart_puts("\n");
	
}

void return_wvftype(char text[],uint8_t type)
{
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	cd b7       	in	r28, 0x3d	; 61
     288:	de b7       	in	r29, 0x3e	; 62
     28a:	63 97       	sbiw	r28, 0x13	; 19
     28c:	0f b6       	in	r0, 0x3f	; 63
     28e:	f8 94       	cli
     290:	de bf       	out	0x3e, r29	; 62
     292:	0f be       	out	0x3f, r0	; 63
     294:	cd bf       	out	0x3d, r28	; 61
	const char rsin[]="FWRS";
     296:	25 e0       	ldi	r18, 0x05	; 5
     298:	e0 e2       	ldi	r30, 0x20	; 32
     29a:	f1 e0       	ldi	r31, 0x01	; 1
     29c:	de 01       	movw	r26, r28
     29e:	11 96       	adiw	r26, 0x01	; 1
     2a0:	01 90       	ld	r0, Z+
     2a2:	0d 92       	st	X+, r0
     2a4:	2a 95       	dec	r18
     2a6:	e1 f7       	brne	.-8      	; 0x2a0 <return_wvftype+0x1e>
	const char dtmf[]="DTMF";
     2a8:	25 e0       	ldi	r18, 0x05	; 5
     2aa:	e5 e2       	ldi	r30, 0x25	; 37
     2ac:	f1 e0       	ldi	r31, 0x01	; 1
     2ae:	de 01       	movw	r26, r28
     2b0:	16 96       	adiw	r26, 0x06	; 6
     2b2:	01 90       	ld	r0, Z+
     2b4:	0d 92       	st	X+, r0
     2b6:	2a 95       	dec	r18
     2b8:	e1 f7       	brne	.-8      	; 0x2b2 <return_wvftype+0x30>
	const char triag[]="Triangle";
     2ba:	29 e0       	ldi	r18, 0x09	; 9
     2bc:	ea e2       	ldi	r30, 0x2A	; 42
     2be:	f1 e0       	ldi	r31, 0x01	; 1
     2c0:	de 01       	movw	r26, r28
     2c2:	1b 96       	adiw	r26, 0x0b	; 11
     2c4:	01 90       	ld	r0, Z+
     2c6:	0d 92       	st	X+, r0
     2c8:	2a 95       	dec	r18
     2ca:	e1 f7       	brne	.-8      	; 0x2c4 <return_wvftype+0x42>
	switch (type_map[type-1])
     2cc:	e6 2f       	mov	r30, r22
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	e9 59       	subi	r30, 0x99	; 153
     2d2:	fe 4f       	sbci	r31, 0xFE	; 254
     2d4:	e0 81       	ld	r30, Z
     2d6:	4e 2f       	mov	r20, r30
     2d8:	50 e0       	ldi	r21, 0x00	; 0
     2da:	fa 01       	movw	r30, r20
     2dc:	31 97       	sbiw	r30, 0x01	; 1
     2de:	e9 30       	cpi	r30, 0x09	; 9
     2e0:	f1 05       	cpc	r31, r1
     2e2:	08 f0       	brcs	.+2      	; 0x2e6 <return_wvftype+0x64>
     2e4:	58 c0       	rjmp	.+176    	; 0x396 <return_wvftype+0x114>
     2e6:	dc 01       	movw	r26, r24
     2e8:	ec 5c       	subi	r30, 0xCC	; 204
     2ea:	ff 4f       	sbci	r31, 0xFF	; 255
     2ec:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__tablejump2__>
	{
		case 1:
		strncpy(text,"Sin",4);
     2f0:	23 e5       	ldi	r18, 0x53	; 83
     2f2:	39 e6       	ldi	r19, 0x69	; 105
     2f4:	11 96       	adiw	r26, 0x01	; 1
     2f6:	3c 93       	st	X, r19
     2f8:	2e 93       	st	-X, r18
     2fa:	2e e6       	ldi	r18, 0x6E	; 110
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	13 96       	adiw	r26, 0x03	; 3
     300:	3c 93       	st	X, r19
     302:	2e 93       	st	-X, r18
     304:	12 97       	sbiw	r26, 0x02	; 2
		break;
     306:	47 c0       	rjmp	.+142    	; 0x396 <return_wvftype+0x114>
		
		case 2:
		strncpy(text,"Ramp+",5);
     308:	25 e0       	ldi	r18, 0x05	; 5
     30a:	ed e0       	ldi	r30, 0x0D	; 13
     30c:	f1 e0       	ldi	r31, 0x01	; 1
     30e:	01 90       	ld	r0, Z+
     310:	0d 92       	st	X+, r0
     312:	2a 95       	dec	r18
     314:	e1 f7       	brne	.-8      	; 0x30e <return_wvftype+0x8c>
		break;
     316:	3f c0       	rjmp	.+126    	; 0x396 <return_wvftype+0x114>
		
		case 3:
		strncpy(text,"Ramp-",6);
     318:	26 e0       	ldi	r18, 0x06	; 6
     31a:	e3 e1       	ldi	r30, 0x13	; 19
     31c:	f1 e0       	ldi	r31, 0x01	; 1
     31e:	01 90       	ld	r0, Z+
     320:	0d 92       	st	X+, r0
     322:	2a 95       	dec	r18
     324:	e1 f7       	brne	.-8      	; 0x31e <return_wvftype+0x9c>
		break;
     326:	37 c0       	rjmp	.+110    	; 0x396 <return_wvftype+0x114>
		
		case 4:
		strncpy(text,"Square",7);
     328:	27 e0       	ldi	r18, 0x07	; 7
     32a:	e9 e1       	ldi	r30, 0x19	; 25
     32c:	f1 e0       	ldi	r31, 0x01	; 1
     32e:	01 90       	ld	r0, Z+
     330:	0d 92       	st	X+, r0
     332:	2a 95       	dec	r18
     334:	e1 f7       	brne	.-8      	; 0x32e <return_wvftype+0xac>
		break;
     336:	2f c0       	rjmp	.+94     	; 0x396 <return_wvftype+0x114>
		
		case 5:
		strncpy(text,triag,8);
     338:	48 e0       	ldi	r20, 0x08	; 8
     33a:	50 e0       	ldi	r21, 0x00	; 0
     33c:	be 01       	movw	r22, r28
     33e:	65 5f       	subi	r22, 0xF5	; 245
     340:	7f 4f       	sbci	r23, 0xFF	; 255
     342:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncpy>
		break;
     346:	27 c0       	rjmp	.+78     	; 0x396 <return_wvftype+0x114>
		
		case 6:
		strncpy(text,rsin,6);
     348:	46 e0       	ldi	r20, 0x06	; 6
     34a:	50 e0       	ldi	r21, 0x00	; 0
     34c:	be 01       	movw	r22, r28
     34e:	6f 5f       	subi	r22, 0xFF	; 255
     350:	7f 4f       	sbci	r23, 0xFF	; 255
     352:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncpy>
		break;
     356:	1f c0       	rjmp	.+62     	; 0x396 <return_wvftype+0x114>
		
		case 7:
		strncpy(text,"HWRS",4);
     358:	28 e4       	ldi	r18, 0x48	; 72
     35a:	37 e5       	ldi	r19, 0x57	; 87
     35c:	11 96       	adiw	r26, 0x01	; 1
     35e:	3c 93       	st	X, r19
     360:	2e 93       	st	-X, r18
     362:	22 e5       	ldi	r18, 0x52	; 82
     364:	33 e5       	ldi	r19, 0x53	; 83
     366:	13 96       	adiw	r26, 0x03	; 3
     368:	3c 93       	st	X, r19
     36a:	2e 93       	st	-X, r18
     36c:	12 97       	sbiw	r26, 0x02	; 2
		break;
     36e:	13 c0       	rjmp	.+38     	; 0x396 <return_wvftype+0x114>
		
		case 8:
		strncpy(text,"ECG",4);
     370:	25 e4       	ldi	r18, 0x45	; 69
     372:	33 e4       	ldi	r19, 0x43	; 67
     374:	11 96       	adiw	r26, 0x01	; 1
     376:	3c 93       	st	X, r19
     378:	2e 93       	st	-X, r18
     37a:	27 e4       	ldi	r18, 0x47	; 71
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	13 96       	adiw	r26, 0x03	; 3
     380:	3c 93       	st	X, r19
     382:	2e 93       	st	-X, r18
     384:	12 97       	sbiw	r26, 0x02	; 2
		break;
     386:	07 c0       	rjmp	.+14     	; 0x396 <return_wvftype+0x114>
		
		case 9:
		strncpy(text,dtmf,4);
     388:	44 e0       	ldi	r20, 0x04	; 4
     38a:	50 e0       	ldi	r21, 0x00	; 0
     38c:	be 01       	movw	r22, r28
     38e:	6a 5f       	subi	r22, 0xFA	; 250
     390:	7f 4f       	sbci	r23, 0xFF	; 255
     392:	0e 94 22 0a 	call	0x1444	; 0x1444 <strncpy>
		type=255;
		break;
		
		
	}
}
     396:	63 96       	adiw	r28, 0x13	; 19
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	f8 94       	cli
     39c:	de bf       	out	0x3e, r29	; 62
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	cd bf       	out	0x3d, r28	; 61
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	08 95       	ret

000003a8 <send_uart>:
	}

}

void send_uart(uint8_t type)
{
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
     3b6:	2a 97       	sbiw	r28, 0x0a	; 10
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	f8 94       	cli
     3bc:	de bf       	out	0x3e, r29	; 62
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	cd bf       	out	0x3d, r28	; 61
     3c2:	f8 2e       	mov	r15, r24
	char text[10]={0};
     3c4:	8e 01       	movw	r16, r28
     3c6:	0f 5f       	subi	r16, 0xFF	; 255
     3c8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ca:	8a e0       	ldi	r24, 0x0A	; 10
     3cc:	f8 01       	movw	r30, r16
     3ce:	11 92       	st	Z+, r1
     3d0:	8a 95       	dec	r24
     3d2:	e9 f7       	brne	.-6      	; 0x3ce <send_uart+0x26>
	uart_puts("F: \0");
     3d4:	88 e0       	ldi	r24, 0x08	; 8
     3d6:	91 e0       	ldi	r25, 0x01	; 1
     3d8:	0e 94 04 08 	call	0x1008	; 0x1008 <uart_puts>
	itoa(frequency,text,10);
     3dc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <frequency>
     3e0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <frequency+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     3e4:	4a e0       	ldi	r20, 0x0A	; 10
     3e6:	b8 01       	movw	r22, r16
     3e8:	0e 94 31 0a 	call	0x1462	; 0x1462 <__itoa_ncheck>
	uart_puts(text);
     3ec:	c8 01       	movw	r24, r16
     3ee:	0e 94 04 08 	call	0x1008	; 0x1008 <uart_puts>
	uart_puts(" Hz, Waveform: ");
     3f2:	83 e3       	ldi	r24, 0x33	; 51
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	0e 94 04 08 	call	0x1008	; 0x1008 <uart_puts>
	return_wvftype(text,type);
     3fa:	6f 2d       	mov	r22, r15
     3fc:	c8 01       	movw	r24, r16
     3fe:	0e 94 41 01 	call	0x282	; 0x282 <return_wvftype>
	uart_puts(text);
     402:	c8 01       	movw	r24, r16
     404:	0e 94 04 08 	call	0x1008	; 0x1008 <uart_puts>
	uart_puts("\n");
     408:	83 e4       	ldi	r24, 0x43	; 67
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	0e 94 04 08 	call	0x1008	; 0x1008 <uart_puts>
	
}
     410:	2a 96       	adiw	r28, 0x0a	; 10
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	f8 94       	cli
     416:	de bf       	out	0x3e, r29	; 62
     418:	0f be       	out	0x3f, r0	; 63
     41a:	cd bf       	out	0x3d, r28	; 61
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	1f 91       	pop	r17
     422:	0f 91       	pop	r16
     424:	ff 90       	pop	r15
     426:	08 95       	ret

00000428 <change_size>:
	}
}


void change_size()													// change the active frame buffer size to contain whole period
{
     428:	cf 92       	push	r12
     42a:	df 92       	push	r13
     42c:	ef 92       	push	r14
     42e:	ff 92       	push	r15
     430:	cf 93       	push	r28
	static uint8_t timer_index = 0;
	arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);
     432:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <frequency>
     436:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <frequency+0x1>
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatunsisf>
     442:	9b 01       	movw	r18, r22
     444:	ac 01       	movw	r20, r24
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	80 e8       	ldi	r24, 0x80	; 128
     44c:	9f e3       	ldi	r25, 0x3F	; 63
     44e:	0e 94 80 08 	call	0x1100	; 0x1100 <__divsf3>
     452:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <tim_set>
     456:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <tim_set+0x1>
     45a:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <tim_set+0x2>
     45e:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <tim_set+0x3>
     462:	0e 94 80 08 	call	0x1100	; 0x1100 <__divsf3>
     466:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__fixunssfsi>
     46a:	70 93 73 04 	sts	0x0473, r23	; 0x800473 <arr_size+0x1>
     46e:	60 93 72 04 	sts	0x0472, r22	; 0x800472 <arr_size>

	while (arr_size > 1000 && timer_index < 3)
     472:	69 3e       	cpi	r22, 0xE9	; 233
     474:	73 40       	sbci	r23, 0x03	; 3
     476:	d8 f1       	brcs	.+118    	; 0x4ee <change_size+0xc6>
     478:	c0 91 6a 04 	lds	r28, 0x046A	; 0x80046a <__data_end>
     47c:	c3 30       	cpi	r28, 0x03	; 3
     47e:	b8 f5       	brcc	.+110    	; 0x4ee <change_size+0xc6>
     480:	cf 5f       	subi	r28, 0xFF	; 255
     482:	01 c0       	rjmp	.+2      	; 0x486 <change_size+0x5e>
     484:	c8 2f       	mov	r28, r24
	{
		tim_set = timer_values[++timer_index];
     486:	ec 2f       	mov	r30, r28
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	ee 0f       	add	r30, r30
     48c:	ff 1f       	adc	r31, r31
     48e:	ee 0f       	add	r30, r30
     490:	ff 1f       	adc	r31, r31
     492:	ed 58       	subi	r30, 0x8D	; 141
     494:	fe 4f       	sbci	r31, 0xFE	; 254
     496:	c0 80       	ld	r12, Z
     498:	d1 80       	ldd	r13, Z+1	; 0x01
     49a:	e2 80       	ldd	r14, Z+2	; 0x02
     49c:	f3 80       	ldd	r15, Z+3	; 0x03
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);
     49e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <frequency>
     4a2:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <frequency+0x1>
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatunsisf>
     4ae:	9b 01       	movw	r18, r22
     4b0:	ac 01       	movw	r20, r24
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	80 e8       	ldi	r24, 0x80	; 128
     4b8:	9f e3       	ldi	r25, 0x3F	; 63
     4ba:	0e 94 80 08 	call	0x1100	; 0x1100 <__divsf3>
     4be:	a7 01       	movw	r20, r14
     4c0:	96 01       	movw	r18, r12
     4c2:	0e 94 80 08 	call	0x1100	; 0x1100 <__divsf3>
     4c6:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__fixunssfsi>
void change_size()													// change the active frame buffer size to contain whole period
{
	static uint8_t timer_index = 0;
	arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);

	while (arr_size > 1000 && timer_index < 3)
     4ca:	69 3e       	cpi	r22, 0xE9	; 233
     4cc:	83 e0       	ldi	r24, 0x03	; 3
     4ce:	78 07       	cpc	r23, r24
     4d0:	d8 f4       	brcc	.+54     	; 0x508 <change_size+0xe0>
     4d2:	c0 93 6a 04 	sts	0x046A, r28	; 0x80046a <__data_end>
     4d6:	c0 92 01 01 	sts	0x0101, r12	; 0x800101 <tim_set>
     4da:	d0 92 02 01 	sts	0x0102, r13	; 0x800102 <tim_set+0x1>
     4de:	e0 92 03 01 	sts	0x0103, r14	; 0x800103 <tim_set+0x2>
     4e2:	f0 92 04 01 	sts	0x0104, r15	; 0x800104 <tim_set+0x3>
     4e6:	70 93 73 04 	sts	0x0473, r23	; 0x800473 <arr_size+0x1>
     4ea:	60 93 72 04 	sts	0x0472, r22	; 0x800472 <arr_size>
		tim_set = timer_values[++timer_index];
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);

	}

	while (arr_size < 255 && timer_index>0)
     4ee:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <arr_size>
     4f2:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <arr_size+0x1>
     4f6:	8f 3f       	cpi	r24, 0xFF	; 255
     4f8:	91 05       	cpc	r25, r1
     4fa:	08 f0       	brcs	.+2      	; 0x4fe <change_size+0xd6>
     4fc:	5f c0       	rjmp	.+190    	; 0x5bc <change_size+0x194>
     4fe:	c0 91 6a 04 	lds	r28, 0x046A	; 0x80046a <__data_end>
     502:	c1 11       	cpse	r28, r1
     504:	15 c0       	rjmp	.+42     	; 0x530 <change_size+0x108>
     506:	62 c0       	rjmp	.+196    	; 0x5cc <change_size+0x1a4>
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	8c 0f       	add	r24, r28
void change_size()													// change the active frame buffer size to contain whole period
{
	static uint8_t timer_index = 0;
	arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);

	while (arr_size > 1000 && timer_index < 3)
     50c:	84 30       	cpi	r24, 0x04	; 4
     50e:	09 f0       	breq	.+2      	; 0x512 <change_size+0xea>
     510:	b9 cf       	rjmp	.-142    	; 0x484 <change_size+0x5c>
     512:	c0 93 6a 04 	sts	0x046A, r28	; 0x80046a <__data_end>
     516:	c0 92 01 01 	sts	0x0101, r12	; 0x800101 <tim_set>
     51a:	d0 92 02 01 	sts	0x0102, r13	; 0x800102 <tim_set+0x1>
     51e:	e0 92 03 01 	sts	0x0103, r14	; 0x800103 <tim_set+0x2>
     522:	f0 92 04 01 	sts	0x0104, r15	; 0x800104 <tim_set+0x3>
     526:	70 93 73 04 	sts	0x0473, r23	; 0x800473 <arr_size+0x1>
     52a:	60 93 72 04 	sts	0x0472, r22	; 0x800472 <arr_size>
     52e:	df cf       	rjmp	.-66     	; 0x4ee <change_size+0xc6>

	}

	while (arr_size < 255 && timer_index>0)
	{
		tim_set = timer_values[--timer_index];
     530:	c1 50       	subi	r28, 0x01	; 1
     532:	ec 2f       	mov	r30, r28
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	ee 0f       	add	r30, r30
     538:	ff 1f       	adc	r31, r31
     53a:	ee 0f       	add	r30, r30
     53c:	ff 1f       	adc	r31, r31
     53e:	ed 58       	subi	r30, 0x8D	; 141
     540:	fe 4f       	sbci	r31, 0xFE	; 254
     542:	c0 80       	ld	r12, Z
     544:	d1 80       	ldd	r13, Z+1	; 0x01
     546:	e2 80       	ldd	r14, Z+2	; 0x02
     548:	f3 80       	ldd	r15, Z+3	; 0x03
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);
     54a:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <frequency>
     54e:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <frequency+0x1>
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatunsisf>
     55a:	9b 01       	movw	r18, r22
     55c:	ac 01       	movw	r20, r24
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	80 e8       	ldi	r24, 0x80	; 128
     564:	9f e3       	ldi	r25, 0x3F	; 63
     566:	0e 94 80 08 	call	0x1100	; 0x1100 <__divsf3>
     56a:	a7 01       	movw	r20, r14
     56c:	96 01       	movw	r18, r12
     56e:	0e 94 80 08 	call	0x1100	; 0x1100 <__divsf3>
     572:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__fixunssfsi>
		tim_set = timer_values[++timer_index];
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);

	}

	while (arr_size < 255 && timer_index>0)
     576:	6f 3f       	cpi	r22, 0xFF	; 255
     578:	71 05       	cpc	r23, r1
     57a:	78 f0       	brcs	.+30     	; 0x59a <change_size+0x172>
     57c:	c0 93 6a 04 	sts	0x046A, r28	; 0x80046a <__data_end>
     580:	c0 92 01 01 	sts	0x0101, r12	; 0x800101 <tim_set>
     584:	d0 92 02 01 	sts	0x0102, r13	; 0x800102 <tim_set+0x1>
     588:	e0 92 03 01 	sts	0x0103, r14	; 0x800103 <tim_set+0x2>
     58c:	f0 92 04 01 	sts	0x0104, r15	; 0x800104 <tim_set+0x3>
     590:	70 93 73 04 	sts	0x0473, r23	; 0x800473 <arr_size+0x1>
     594:	60 93 72 04 	sts	0x0472, r22	; 0x800472 <arr_size>
     598:	11 c0       	rjmp	.+34     	; 0x5bc <change_size+0x194>
     59a:	c1 11       	cpse	r28, r1
     59c:	c9 cf       	rjmp	.-110    	; 0x530 <change_size+0x108>
     59e:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <__data_end>
     5a2:	c0 92 01 01 	sts	0x0101, r12	; 0x800101 <tim_set>
     5a6:	d0 92 02 01 	sts	0x0102, r13	; 0x800102 <tim_set+0x1>
     5aa:	e0 92 03 01 	sts	0x0103, r14	; 0x800103 <tim_set+0x2>
     5ae:	f0 92 04 01 	sts	0x0104, r15	; 0x800104 <tim_set+0x3>
     5b2:	70 93 73 04 	sts	0x0473, r23	; 0x800473 <arr_size+0x1>
     5b6:	60 93 72 04 	sts	0x0472, r22	; 0x800472 <arr_size>
     5ba:	08 c0       	rjmp	.+16     	; 0x5cc <change_size+0x1a4>
		arr_size = (uint16_t)(((1 / (float)frequency)) / tim_set);


	}

	switch (timer_index)	// Theoretical: can switch the timer ovf period to update frequency, this however changes sampling frequency for which will the recon. filters not suffice
     5bc:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <__data_end>
     5c0:	81 30       	cpi	r24, 0x01	; 1
     5c2:	59 f0       	breq	.+22     	; 0x5da <change_size+0x1b2>
     5c4:	18 f0       	brcs	.+6      	; 0x5cc <change_size+0x1a4>
     5c6:	82 30       	cpi	r24, 0x02	; 2
     5c8:	79 f0       	breq	.+30     	; 0x5e8 <change_size+0x1c0>
     5ca:	14 c0       	rjmp	.+40     	; 0x5f4 <change_size+0x1cc>
	{
		case 0:
		TIM0_overflow_16u();
     5cc:	85 b5       	in	r24, 0x25	; 37
     5ce:	89 7f       	andi	r24, 0xF9	; 249
     5d0:	85 bd       	out	0x25, r24	; 37
     5d2:	85 b5       	in	r24, 0x25	; 37
     5d4:	81 60       	ori	r24, 0x01	; 1
     5d6:	85 bd       	out	0x25, r24	; 37
		break;
     5d8:	0d c0       	rjmp	.+26     	; 0x5f4 <change_size+0x1cc>

		case 1:
		TIM0_overflow_128u();
     5da:	85 b5       	in	r24, 0x25	; 37
     5dc:	8a 7f       	andi	r24, 0xFA	; 250
     5de:	85 bd       	out	0x25, r24	; 37
     5e0:	85 b5       	in	r24, 0x25	; 37
     5e2:	82 60       	ori	r24, 0x02	; 2
     5e4:	85 bd       	out	0x25, r24	; 37
		break;
     5e6:	06 c0       	rjmp	.+12     	; 0x5f4 <change_size+0x1cc>
		case 2:
		TIM0_overflow_1m();
     5e8:	85 b5       	in	r24, 0x25	; 37
     5ea:	8b 7f       	andi	r24, 0xFB	; 251
     5ec:	85 bd       	out	0x25, r24	; 37
     5ee:	85 b5       	in	r24, 0x25	; 37
     5f0:	83 60       	ori	r24, 0x03	; 3
     5f2:	85 bd       	out	0x25, r24	; 37
		break;
	}


}
     5f4:	cf 91       	pop	r28
     5f6:	ff 90       	pop	r15
     5f8:	ef 90       	pop	r14
     5fa:	df 90       	pop	r13
     5fc:	cf 90       	pop	r12
     5fe:	08 95       	ret

00000600 <update_disp>:


void update_disp(uint8_t type)	//updates the LCD with the frequency
{
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	64 97       	sbiw	r28, 0x14	; 20
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
     616:	18 2f       	mov	r17, r24
	
	char text[10]={0};
     618:	ce 01       	movw	r24, r28
     61a:	01 96       	adiw	r24, 0x01	; 1
     61c:	2a e0       	ldi	r18, 0x0A	; 10
     61e:	fc 01       	movw	r30, r24
     620:	11 92       	st	Z+, r1
     622:	2a 95       	dec	r18
     624:	e9 f7       	brne	.-6      	; 0x620 <update_disp+0x20>
	const char reg[]="Gen.:";
     626:	26 e0       	ldi	r18, 0x06	; 6
     628:	e2 e6       	ldi	r30, 0x62	; 98
     62a:	f1 e0       	ldi	r31, 0x01	; 1
     62c:	de 01       	movw	r26, r28
     62e:	1b 96       	adiw	r26, 0x0b	; 11
     630:	01 90       	ld	r0, Z+
     632:	0d 92       	st	X+, r0
     634:	2a 95       	dec	r18
     636:	e1 f7       	brne	.-8      	; 0x630 <update_disp+0x30>
	const char multiplier_text[]=" M:";
     638:	20 e2       	ldi	r18, 0x20	; 32
     63a:	3d e4       	ldi	r19, 0x4D	; 77
     63c:	3a 8b       	std	Y+18, r19	; 0x12
     63e:	29 8b       	std	Y+17, r18	; 0x11
     640:	2a e3       	ldi	r18, 0x3A	; 58
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	3c 8b       	std	Y+20, r19	; 0x14
     646:	2b 8b       	std	Y+19, r18	; 0x13
	return_wvftype(text,type);
     648:	61 2f       	mov	r22, r17
     64a:	0e 94 41 01 	call	0x282	; 0x282 <return_wvftype>
	
	
	if(type<255)	// if known type
     64e:	1f 3f       	cpi	r17, 0xFF	; 255
     650:	09 f4       	brne	.+2      	; 0x654 <update_disp+0x54>
     652:	53 c0       	rjmp	.+166    	; 0x6fa <update_disp+0xfa>
	{
		
		lcd_gotoxy(0,0);
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_gotoxy>
		
		
		if(type!=8 && type!=0 && type!=4)		// if changed frequency no need to overwrite the generated wvf on lCD
     65c:	18 30       	cpi	r17, 0x08	; 8
     65e:	59 f1       	breq	.+86     	; 0x6b6 <update_disp+0xb6>
     660:	81 2f       	mov	r24, r17
     662:	8b 7f       	andi	r24, 0xFB	; 251
     664:	41 f1       	breq	.+80     	; 0x6b6 <update_disp+0xb6>
		{
			
			
			lcd_puts(reg);
     666:	ce 01       	movw	r24, r28
     668:	0b 96       	adiw	r24, 0x0b	; 11
     66a:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
			lcd_puts("                ");
     66e:	85 e4       	ldi	r24, 0x45	; 69
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
			lcd_gotoxy(6,0);
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	86 e0       	ldi	r24, 0x06	; 6
     67a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_gotoxy>
			lcd_puts(text);
     67e:	ce 01       	movw	r24, r28
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
			if(type_map[type-1]==9)
     686:	e1 2f       	mov	r30, r17
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	e9 59       	subi	r30, 0x99	; 153
     68c:	fe 4f       	sbci	r31, 0xFE	; 254
     68e:	80 81       	ld	r24, Z
     690:	89 30       	cpi	r24, 0x09	; 9
     692:	89 f4       	brne	.+34     	; 0x6b6 <update_disp+0xb6>
			{
				lcd_puts(multiplier_text);
     694:	ce 01       	movw	r24, r28
     696:	41 96       	adiw	r24, 0x11	; 17
     698:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
				itoa(multiplier,text,10);
     69c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <multiplier>
     6a0:	4a e0       	ldi	r20, 0x0A	; 10
     6a2:	be 01       	movw	r22, r28
     6a4:	6f 5f       	subi	r22, 0xFF	; 255
     6a6:	7f 4f       	sbci	r23, 0xFF	; 255
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0e 94 31 0a 	call	0x1462	; 0x1462 <__itoa_ncheck>
				lcd_puts(text);
     6ae:	ce 01       	movw	r24, r28
     6b0:	01 96       	adiw	r24, 0x01	; 1
     6b2:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
			}
		}
		
		
		
		lcd_gotoxy(0,1);
     6b6:	61 e0       	ldi	r22, 0x01	; 1
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_gotoxy>
		lcd_puts("                ");
     6be:	85 e4       	ldi	r24, 0x45	; 69
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
		
		lcd_gotoxy(0,1);
     6c6:	61 e0       	ldi	r22, 0x01	; 1
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_gotoxy>
		lcd_puts("Freq.: ");
     6ce:	86 e5       	ldi	r24, 0x56	; 86
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
		itoa(frequency,text,10);
     6d6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <frequency>
     6da:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <frequency+0x1>
     6de:	4a e0       	ldi	r20, 0x0A	; 10
     6e0:	be 01       	movw	r22, r28
     6e2:	6f 5f       	subi	r22, 0xFF	; 255
     6e4:	7f 4f       	sbci	r23, 0xFF	; 255
     6e6:	0e 94 31 0a 	call	0x1462	; 0x1462 <__itoa_ncheck>
		lcd_puts(text);
     6ea:	ce 01       	movw	r24, r28
     6ec:	01 96       	adiw	r24, 0x01	; 1
     6ee:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
		lcd_puts(" Hz");
     6f2:	8e e5       	ldi	r24, 0x5E	; 94
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_puts>
	
	
	
	
	
     6fa:	64 96       	adiw	r28, 0x14	; 20
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	f8 94       	cli
     700:	de bf       	out	0x3e, r29	; 62
     702:	0f be       	out	0x3f, r0	; 63
     704:	cd bf       	out	0x3d, r28	; 61
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	08 95       	ret

0000070e <main>:
const uint8_t type_map[]={9,6,3,10,8,5,2,10,7,4,1};		// mapping of button ports to numbers

int main(void)
{

	change_size();
     70e:	0e 94 14 02 	call	0x428	; 0x428 <change_size>
	lcd_init(LCD_DISP_ON);
     712:	8c e0       	ldi	r24, 0x0C	; 12
     714:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_init>
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
     718:	87 e6       	ldi	r24, 0x67	; 103
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 d6 07 	call	0xfac	; 0xfac <uart_init>
	update_disp(11);
     720:	8b e0       	ldi	r24, 0x0B	; 11
     722:	0e 94 00 03 	call	0x600	; 0x600 <update_disp>
	DDRD = 0xFF;											// set D as output
     726:	8f ef       	ldi	r24, 0xFF	; 255
     728:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;											// set B as output
     72a:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x07;											// set necesary C pins as output
     72c:	87 e0       	ldi	r24, 0x07	; 7
     72e:	87 b9       	out	0x07, r24	; 7

	generate_signal(frame_buffer, 1, frequency, tim_set,multiplier);	// init frame buffer with sine wave of frequency 1
     730:	e0 90 05 01 	lds	r14, 0x0105	; 0x800105 <multiplier>
     734:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <frequency>
     738:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <frequency+0x1>
     73c:	00 91 01 01 	lds	r16, 0x0101	; 0x800101 <tim_set>
     740:	10 91 02 01 	lds	r17, 0x0102	; 0x800102 <tim_set+0x1>
     744:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <tim_set+0x2>
     748:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <tim_set+0x3>
     74c:	61 e0       	ldi	r22, 0x01	; 1
     74e:	8b eb       	ldi	r24, 0xBB	; 187
     750:	94 e0       	ldi	r25, 0x04	; 4
     752:	0e 94 0a 05 	call	0xa14	; 0xa14 <generate_signal>



	TIM0_overflow_16u();
     756:	85 b5       	in	r24, 0x25	; 37
     758:	89 7f       	andi	r24, 0xF9	; 249
     75a:	85 bd       	out	0x25, r24	; 37
     75c:	85 b5       	in	r24, 0x25	; 37
     75e:	81 60       	ori	r24, 0x01	; 1
     760:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
     762:	ee e6       	ldi	r30, 0x6E	; 110
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	80 81       	ld	r24, Z
     768:	81 60       	ori	r24, 0x01	; 1
     76a:	80 83       	st	Z, r24

	TIM2_overflow_1m();
     76c:	e1 eb       	ldi	r30, 0xB1	; 177
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	80 81       	ld	r24, Z
     772:	8c 7f       	andi	r24, 0xFC	; 252
     774:	80 83       	st	Z, r24
     776:	80 81       	ld	r24, Z
     778:	84 60       	ori	r24, 0x04	; 4
     77a:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
     77c:	e0 e7       	ldi	r30, 0x70	; 112
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	80 81       	ld	r24, Z
     782:	81 60       	ori	r24, 0x01	; 1
     784:	80 83       	st	Z, r24





	sei();								// Enable interrupt
     786:	78 94       	sei
     788:	ff cf       	rjmp	.-2      	; 0x788 <main+0x7a>

0000078a <decode_button>:

}


void decode_button(void) // decodes which button has been pressed and updates variables the button changes
{
     78a:	ef 92       	push	r14
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
	uint8_t temp = 0; 
	static uint8_t type = 11;			//default setting (on start generate sinewave)
	static uint8_t Func =0;
	
	
	if (butt > 0)		// change anything and recalculate signal only when changing params (button was pressed)
     790:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <butt>
     794:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <butt+0x1>
     798:	00 97       	sbiw	r24, 0x00	; 0
     79a:	09 f4       	brne	.+2      	; 0x79e <decode_button+0x14>
     79c:	94 c0       	rjmp	.+296    	; 0x8c6 <decode_button+0x13c>
	{

		while ((butt & 0x0001) == 0) // find the button position
     79e:	80 fd       	sbrc	r24, 0
     7a0:	78 c0       	rjmp	.+240    	; 0x892 <decode_button+0x108>
     7a2:	20 e0       	ldi	r18, 0x00	; 0
     7a4:	01 c0       	rjmp	.+2      	; 0x7a8 <decode_button+0x1e>
		{
			temp++;
     7a6:	23 2f       	mov	r18, r19
     7a8:	31 e0       	ldi	r19, 0x01	; 1
     7aa:	32 0f       	add	r19, r18
			butt = butt >> 1;
     7ac:	96 95       	lsr	r25
     7ae:	87 95       	ror	r24
	
	
	if (butt > 0)		// change anything and recalculate signal only when changing params (button was pressed)
	{

		while ((butt & 0x0001) == 0) // find the button position
     7b0:	80 ff       	sbrs	r24, 0
     7b2:	f9 cf       	rjmp	.-14     	; 0x7a6 <decode_button+0x1c>
     7b4:	90 93 75 04 	sts	0x0475, r25	; 0x800475 <butt+0x1>
     7b8:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <butt>
		{
			temp++;
			butt = butt >> 1;
		}
		
		if (temp == 0 || temp == 8 ||temp==4)
     7bc:	33 23       	and	r19, r19
     7be:	09 f4       	brne	.+2      	; 0x7c2 <decode_button+0x38>
     7c0:	6e c0       	rjmp	.+220    	; 0x89e <decode_button+0x114>
     7c2:	2b 7f       	andi	r18, 0xFB	; 251
     7c4:	23 30       	cpi	r18, 0x03	; 3
     7c6:	b1 f5       	brne	.+108    	; 0x834 <decode_button+0xaa>
     7c8:	6f c0       	rjmp	.+222    	; 0x8a8 <decode_button+0x11e>
     7ca:	30 e0       	ldi	r19, 0x00	; 0
		{
			if(Func==0)										// if func button is not pressed change frequency
			{
				
				
				if (temp == 0 && frequency < 2000)
     7cc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <frequency>
     7d0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <frequency+0x1>
     7d4:	80 3d       	cpi	r24, 0xD0	; 208
     7d6:	97 40       	sbci	r25, 0x07	; 7
     7d8:	80 f5       	brcc	.+96     	; 0x83a <decode_button+0xb0>
				{
					frequency++;
     7da:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <frequency>
     7de:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <frequency+0x1>
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <frequency+0x1>
     7e8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <frequency>
     7ec:	26 c0       	rjmp	.+76     	; 0x83a <decode_button+0xb0>
				}

				if (temp == 8 && frequency > 100)
     7ee:	38 30       	cpi	r19, 0x08	; 8
     7f0:	21 f5       	brne	.+72     	; 0x83a <decode_button+0xb0>
     7f2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <frequency>
     7f6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <frequency+0x1>
     7fa:	85 36       	cpi	r24, 0x65	; 101
     7fc:	91 05       	cpc	r25, r1
     7fe:	30 f1       	brcs	.+76     	; 0x84c <decode_button+0xc2>
				{
					frequency--;
     800:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <frequency>
     804:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <frequency+0x1>
     808:	01 97       	sbiw	r24, 0x01	; 1
     80a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <frequency+0x1>
     80e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <frequency>
     812:	1c c0       	rjmp	.+56     	; 0x84c <decode_button+0xc2>
			}
			else
			{
				if (temp == 0 && multiplier < 5)			// if F button has been pressed change the DTMF multiplier
				{
					multiplier++;
     814:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <multiplier>
     818:	8f 5f       	subi	r24, 0xFF	; 255
     81a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <multiplier>
     81e:	16 c0       	rjmp	.+44     	; 0x84c <decode_button+0xc2>
				}

				if (temp == 8 && multiplier > 1)
     820:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <multiplier>
     824:	82 30       	cpi	r24, 0x02	; 2
     826:	90 f0       	brcs	.+36     	; 0x84c <decode_button+0xc2>
				{
					multiplier--;
     828:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <multiplier>
     82c:	81 50       	subi	r24, 0x01	; 1
     82e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <multiplier>
     832:	0c c0       	rjmp	.+24     	; 0x84c <decode_button+0xc2>
				}
			}
		}
		else
		{
			type = temp;
     834:	30 93 00 01 	sts	0x0100, r19	; 0x800100 <__data_start>
     838:	09 c0       	rjmp	.+18     	; 0x84c <decode_button+0xc2>
		}
		
		
		if(temp==4)
     83a:	34 30       	cpi	r19, 0x04	; 4
     83c:	39 f4       	brne	.+14     	; 0x84c <decode_button+0xc2>
		{
			Func^=0x01;
     83e:	90 91 6b 04 	lds	r25, 0x046B	; 0x80046b <Func.2141>
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	89 27       	eor	r24, r25
     846:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <Func.2141>
     84a:	3d c0       	rjmp	.+122    	; 0x8c6 <decode_button+0x13c>
		}
		else
		{
			change_size();
     84c:	0e 94 14 02 	call	0x428	; 0x428 <change_size>
			
			generate_signal(frame_buffer, type_map[type-1], frequency, tim_set,multiplier); // fill the frame buffer with required data (function)
     850:	e0 90 05 01 	lds	r14, 0x0105	; 0x800105 <multiplier>
     854:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <frequency>
     858:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <frequency+0x1>
     85c:	00 91 01 01 	lds	r16, 0x0101	; 0x800101 <tim_set>
     860:	10 91 02 01 	lds	r17, 0x0102	; 0x800102 <tim_set+0x1>
     864:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <tim_set+0x2>
     868:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <tim_set+0x3>
     86c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	e9 59       	subi	r30, 0x99	; 153
     874:	fe 4f       	sbci	r31, 0xFE	; 254
     876:	60 81       	ld	r22, Z
     878:	8b eb       	ldi	r24, 0xBB	; 187
     87a:	94 e0       	ldi	r25, 0x04	; 4
     87c:	0e 94 0a 05 	call	0xa14	; 0xa14 <generate_signal>
			
			update_disp(type);
     880:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     884:	0e 94 00 03 	call	0x600	; 0x600 <update_disp>
			
			send_uart(type);
     888:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     88c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <send_uart>
		}
		

	}

}
     890:	1a c0       	rjmp	.+52     	; 0x8c6 <decode_button+0x13c>
			butt = butt >> 1;
		}
		
		if (temp == 0 || temp == 8 ||temp==4)
		{
			if(Func==0)										// if func button is not pressed change frequency
     892:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <Func.2141>
     896:	88 23       	and	r24, r24
     898:	09 f4       	brne	.+2      	; 0x89c <decode_button+0x112>
     89a:	97 cf       	rjmp	.-210    	; 0x7ca <decode_button+0x40>
     89c:	0e c0       	rjmp	.+28     	; 0x8ba <decode_button+0x130>
     89e:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <Func.2141>
     8a2:	81 11       	cpse	r24, r1
     8a4:	0a c0       	rjmp	.+20     	; 0x8ba <decode_button+0x130>
     8a6:	92 cf       	rjmp	.-220    	; 0x7cc <decode_button+0x42>
     8a8:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <Func.2141>
     8ac:	88 23       	and	r24, r24
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <decode_button+0x128>
     8b0:	9e cf       	rjmp	.-196    	; 0x7ee <decode_button+0x64>
				if (temp == 0 && multiplier < 5)			// if F button has been pressed change the DTMF multiplier
				{
					multiplier++;
				}

				if (temp == 8 && multiplier > 1)
     8b2:	38 30       	cpi	r19, 0x08	; 8
     8b4:	09 f4       	brne	.+2      	; 0x8b8 <decode_button+0x12e>
     8b6:	b4 cf       	rjmp	.-152    	; 0x820 <decode_button+0x96>
     8b8:	c0 cf       	rjmp	.-128    	; 0x83a <decode_button+0xb0>
					frequency--;
				}
			}
			else
			{
				if (temp == 0 && multiplier < 5)			// if F button has been pressed change the DTMF multiplier
     8ba:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <multiplier>
     8be:	85 30       	cpi	r24, 0x05	; 5
     8c0:	08 f4       	brcc	.+2      	; 0x8c4 <decode_button+0x13a>
     8c2:	a8 cf       	rjmp	.-176    	; 0x814 <decode_button+0x8a>
     8c4:	c3 cf       	rjmp	.-122    	; 0x84c <decode_button+0xc2>
		}
		

	}

}
     8c6:	1f 91       	pop	r17
     8c8:	0f 91       	pop	r16
     8ca:	ef 90       	pop	r14
     8cc:	08 95       	ret

000008ce <__vector_9>:
	PORTB = frame_buffer[index];

}

ISR(TIMER2_OVF_vect)
{
     8ce:	1f 92       	push	r1
     8d0:	0f 92       	push	r0
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	0f 92       	push	r0
     8d6:	11 24       	eor	r1, r1
     8d8:	2f 93       	push	r18
     8da:	3f 93       	push	r19
     8dc:	4f 93       	push	r20
     8de:	5f 93       	push	r21
     8e0:	6f 93       	push	r22
     8e2:	7f 93       	push	r23
     8e4:	8f 93       	push	r24
     8e6:	9f 93       	push	r25
     8e8:	af 93       	push	r26
     8ea:	bf 93       	push	r27
     8ec:	ef 93       	push	r30
     8ee:	ff 93       	push	r31
	static uint8_t ind = 0;						// indexing variable in columns
	uint16_t temp = 0;							// temporary variable for extracting button pressed
	static uint16_t debounce_reg = 0;			// debouncing register (stores value and outputs after desired period)

	static uint8_t ovf = 0;
	uint16_t  debounce_temp = debounce_reg;		// temporary debouncer to check if values have changed
     8f0:	20 91 6e 04 	lds	r18, 0x046E	; 0x80046e <debounce_reg.2129>
     8f4:	30 91 6f 04 	lds	r19, 0x046F	; 0x80046f <debounce_reg.2129+0x1>

	ind++;
     8f8:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <ind.2127>
     8fc:	8f 5f       	subi	r24, 0xFF	; 255
     8fe:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <ind.2127>

	if (ind < 3)								// sweep through columns
     902:	83 30       	cpi	r24, 0x03	; 3
     904:	80 f4       	brcc	.+32     	; 0x926 <__stack+0x27>
	{

		PORTC &= 0xF8;
     906:	88 b1       	in	r24, 0x08	; 8
     908:	88 7f       	andi	r24, 0xF8	; 248
     90a:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << ind);
     90c:	48 b1       	in	r20, 0x08	; 8
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	00 90 6d 04 	lds	r0, 0x046D	; 0x80046d <ind.2127>
     916:	02 c0       	rjmp	.+4      	; 0x91c <__stack+0x1d>
     918:	88 0f       	add	r24, r24
     91a:	99 1f       	adc	r25, r25
     91c:	0a 94       	dec	r0
     91e:	e2 f7       	brpl	.-8      	; 0x918 <__stack+0x19>
     920:	84 2b       	or	r24, r20
     922:	88 b9       	out	0x08, r24	; 8
     924:	11 c0       	rjmp	.+34     	; 0x948 <__stack+0x49>

	}
	else
	{

		ind = 0;
     926:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <ind.2127>
		PORTC &= 0xF8;
     92a:	88 b1       	in	r24, 0x08	; 8
     92c:	88 7f       	andi	r24, 0xF8	; 248
     92e:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << ind);
     930:	48 b1       	in	r20, 0x08	; 8
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	00 90 6d 04 	lds	r0, 0x046D	; 0x80046d <ind.2127>
     93a:	02 c0       	rjmp	.+4      	; 0x940 <__stack+0x41>
     93c:	88 0f       	add	r24, r24
     93e:	99 1f       	adc	r25, r25
     940:	0a 94       	dec	r0
     942:	e2 f7       	brpl	.-8      	; 0x93c <__stack+0x3d>
     944:	84 2b       	or	r24, r20
     946:	88 b9       	out	0x08, r24	; 8
	}

	switch (ind)								// extract button pressed and update debounce register
     948:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <ind.2127>
     94c:	81 30       	cpi	r24, 0x01	; 1
     94e:	c9 f0       	breq	.+50     	; 0x982 <__stack+0x83>
     950:	18 f0       	brcs	.+6      	; 0x958 <__stack+0x59>
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	39 f1       	breq	.+78     	; 0x9a4 <__stack+0xa5>
     956:	37 c0       	rjmp	.+110    	; 0x9c6 <__stack+0xc7>
	{
		case 0:
		temp = PINC & 0b01111000;
     958:	86 b1       	in	r24, 0x06	; 6
     95a:	88 77       	andi	r24, 0x78	; 120
     95c:	90 e0       	ldi	r25, 0x00	; 0
		temp = temp >> 3;
		debounce_reg &= 0xFFF0;
		debounce_reg |= temp;
     95e:	40 91 6e 04 	lds	r20, 0x046E	; 0x80046e <debounce_reg.2129>
     962:	50 91 6f 04 	lds	r21, 0x046F	; 0x80046f <debounce_reg.2129+0x1>
     966:	40 7f       	andi	r20, 0xF0	; 240
     968:	96 95       	lsr	r25
     96a:	87 95       	ror	r24
     96c:	96 95       	lsr	r25
     96e:	87 95       	ror	r24
     970:	96 95       	lsr	r25
     972:	87 95       	ror	r24
     974:	84 2b       	or	r24, r20
     976:	95 2b       	or	r25, r21
     978:	90 93 6f 04 	sts	0x046F, r25	; 0x80046f <debounce_reg.2129+0x1>
     97c:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <debounce_reg.2129>
		break;
     980:	22 c0       	rjmp	.+68     	; 0x9c6 <__stack+0xc7>

		case 1:
		temp = PINC & 0b01111000;
     982:	86 b1       	in	r24, 0x06	; 6
     984:	88 77       	andi	r24, 0x78	; 120
     986:	90 e0       	ldi	r25, 0x00	; 0
		temp = temp << 1;
		debounce_reg &= 0xFF0F;
		debounce_reg |= temp;
     988:	40 91 6e 04 	lds	r20, 0x046E	; 0x80046e <debounce_reg.2129>
     98c:	50 91 6f 04 	lds	r21, 0x046F	; 0x80046f <debounce_reg.2129+0x1>
     990:	4f 70       	andi	r20, 0x0F	; 15
     992:	88 0f       	add	r24, r24
     994:	99 1f       	adc	r25, r25
     996:	84 2b       	or	r24, r20
     998:	95 2b       	or	r25, r21
     99a:	90 93 6f 04 	sts	0x046F, r25	; 0x80046f <debounce_reg.2129+0x1>
     99e:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <debounce_reg.2129>
		break;
     9a2:	11 c0       	rjmp	.+34     	; 0x9c6 <__stack+0xc7>

		case 2:
		temp = PINC & 0b01111000;
     9a4:	46 b1       	in	r20, 0x06	; 6
     9a6:	48 77       	andi	r20, 0x78	; 120
		temp = temp << 5;
		debounce_reg &= 0xF0FF;
		debounce_reg |= temp;
     9a8:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <debounce_reg.2129>
     9ac:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <debounce_reg.2129+0x1>
     9b0:	90 7f       	andi	r25, 0xF0	; 240
     9b2:	60 e2       	ldi	r22, 0x20	; 32
     9b4:	46 9f       	mul	r20, r22
     9b6:	a0 01       	movw	r20, r0
     9b8:	11 24       	eor	r1, r1
     9ba:	84 2b       	or	r24, r20
     9bc:	95 2b       	or	r25, r21
     9be:	90 93 6f 04 	sts	0x046F, r25	; 0x80046f <debounce_reg.2129+0x1>
     9c2:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <debounce_reg.2129>
		break;


	}

	ovf++;
     9c6:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <ovf.2130>
     9ca:	8f 5f       	subi	r24, 0xFF	; 255
     9cc:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <ovf.2130>

	if (ovf > 50 && debounce_reg == debounce_temp) // output debounced values if time has come and button values are stable
     9d0:	83 33       	cpi	r24, 0x33	; 51
     9d2:	78 f0       	brcs	.+30     	; 0x9f2 <__stack+0xf3>
     9d4:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <debounce_reg.2129>
     9d8:	90 91 6f 04 	lds	r25, 0x046F	; 0x80046f <debounce_reg.2129+0x1>
     9dc:	28 17       	cp	r18, r24
     9de:	39 07       	cpc	r19, r25
     9e0:	41 f4       	brne	.+16     	; 0x9f2 <__stack+0xf3>
	{
		butt = debounce_reg;
     9e2:	30 93 75 04 	sts	0x0475, r19	; 0x800475 <butt+0x1>
     9e6:	20 93 74 04 	sts	0x0474, r18	; 0x800474 <butt>
		ovf = 0;
     9ea:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <ovf.2130>
		decode_button();
     9ee:	0e 94 c5 03 	call	0x78a	; 0x78a <decode_button>
	}




}
     9f2:	ff 91       	pop	r31
     9f4:	ef 91       	pop	r30
     9f6:	bf 91       	pop	r27
     9f8:	af 91       	pop	r26
     9fa:	9f 91       	pop	r25
     9fc:	8f 91       	pop	r24
     9fe:	7f 91       	pop	r23
     a00:	6f 91       	pop	r22
     a02:	5f 91       	pop	r21
     a04:	4f 91       	pop	r20
     a06:	3f 91       	pop	r19
     a08:	2f 91       	pop	r18
     a0a:	0f 90       	pop	r0
     a0c:	0f be       	out	0x3f, r0	; 63
     a0e:	0f 90       	pop	r0
     a10:	1f 90       	pop	r1
     a12:	18 95       	reti

00000a14 <generate_signal>:
	31,29,30,32,30,29,30,32,34,31,30,27,28,31,30,30,28,32,31,30,28,27,24
};


void generate_signal(uint8_t* frame_buffer, uint8_t type, uint16_t freq,float tim_set,uint8_t multiplier)
{
     a14:	4f 92       	push	r4
     a16:	5f 92       	push	r5
     a18:	6f 92       	push	r6
     a1a:	7f 92       	push	r7
     a1c:	8f 92       	push	r8
     a1e:	9f 92       	push	r9
     a20:	af 92       	push	r10
     a22:	bf 92       	push	r11
     a24:	cf 92       	push	r12
     a26:	df 92       	push	r13
     a28:	ef 92       	push	r14
     a2a:	ff 92       	push	r15
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	00 d0       	rcall	.+0      	; 0xa36 <generate_signal+0x22>
     a36:	00 d0       	rcall	.+0      	; 0xa38 <generate_signal+0x24>
     a38:	00 d0       	rcall	.+0      	; 0xa3a <generate_signal+0x26>
     a3a:	cd b7       	in	r28, 0x3d	; 61
     a3c:	de b7       	in	r29, 0x3e	; 62
     a3e:	9e 83       	std	Y+6, r25	; 0x06
     a40:	8d 83       	std	Y+5, r24	; 0x05
     a42:	f6 2e       	mov	r15, r22
     a44:	48 01       	movw	r8, r16
     a46:	59 01       	movw	r10, r18
	
	
	
	
	
	uint16_t arr_length= (uint16_t)(((1/(float)freq))/tim_set);	
     a48:	ba 01       	movw	r22, r20
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatunsisf>
     a52:	9b 01       	movw	r18, r22
     a54:	ac 01       	movw	r20, r24
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	80 e8       	ldi	r24, 0x80	; 128
     a5c:	9f e3       	ldi	r25, 0x3F	; 63
     a5e:	0e 94 80 08 	call	0x1100	; 0x1100 <__divsf3>
     a62:	a5 01       	movw	r20, r10
     a64:	94 01       	movw	r18, r8
     a66:	0e 94 80 08 	call	0x1100	; 0x1100 <__divsf3>
     a6a:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__fixunssfsi>
     a6e:	8b 01       	movw	r16, r22
     a70:	09 3e       	cpi	r16, 0xE9	; 233
     a72:	63 e0       	ldi	r22, 0x03	; 3
     a74:	16 07       	cpc	r17, r22
     a76:	10 f0       	brcs	.+4      	; 0xa7c <generate_signal+0x68>
     a78:	08 ee       	ldi	r16, 0xE8	; 232
     a7a:	13 e0       	ldi	r17, 0x03	; 3
	uint16_t index=0;
	if(arr_length>1000)
	arr_length=1000;
	 
	
	switch (type)
     a7c:	8f 2d       	mov	r24, r15
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	fc 01       	movw	r30, r24
     a82:	31 97       	sbiw	r30, 0x01	; 1
     a84:	e9 30       	cpi	r30, 0x09	; 9
     a86:	f1 05       	cpc	r31, r1
     a88:	08 f0       	brcs	.+2      	; 0xa8c <generate_signal+0x78>
     a8a:	21 c2       	rjmp	.+1090   	; 0xece <generate_signal+0x4ba>
     a8c:	e3 5c       	subi	r30, 0xC3	; 195
     a8e:	ff 4f       	sbci	r31, 0xFF	; 255
     a90:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__tablejump2__>
		}
		break;
		
		
		case 9: // DTMF
		for(uint16_t i=0; i<arr_length;i++)
     a94:	01 15       	cp	r16, r1
     a96:	11 05       	cpc	r17, r1
     a98:	09 f0       	breq	.+2      	; 0xa9c <generate_signal+0x88>
     a9a:	be c1       	rjmp	.+892    	; 0xe18 <generate_signal+0x404>
     a9c:	18 c2       	rjmp	.+1072   	; 0xece <generate_signal+0x4ba>
			frame_buffer++;
		}
		break;
		
		case 8: // Ecg
		for(uint16_t i=0; i<arr_length;i++)
     a9e:	01 15       	cp	r16, r1
     aa0:	11 05       	cpc	r17, r1
     aa2:	09 f0       	breq	.+2      	; 0xaa6 <generate_signal+0x92>
     aa4:	8b c1       	rjmp	.+790    	; 0xdbc <generate_signal+0x3a8>
     aa6:	13 c2       	rjmp	.+1062   	; 0xece <generate_signal+0x4ba>
			frame_buffer++;
		}
		break;
		
		case 7: // Halfwave Rectified
		for(uint16_t i=0; i<arr_length;i++)
     aa8:	01 15       	cp	r16, r1
     aaa:	11 05       	cpc	r17, r1
     aac:	09 f0       	breq	.+2      	; 0xab0 <generate_signal+0x9c>
     aae:	4a c1       	rjmp	.+660    	; 0xd44 <generate_signal+0x330>
     ab0:	0e c2       	rjmp	.+1052   	; 0xece <generate_signal+0x4ba>
			frame_buffer++;
		}
		break;
		
		case 6: //Fullwave Rectified
		for(uint16_t i=0; i<arr_length;i++)
     ab2:	01 15       	cp	r16, r1
     ab4:	11 05       	cpc	r17, r1
     ab6:	09 f0       	breq	.+2      	; 0xaba <generate_signal+0xa6>
     ab8:	16 c1       	rjmp	.+556    	; 0xce6 <generate_signal+0x2d2>
     aba:	09 c2       	rjmp	.+1042   	; 0xece <generate_signal+0x4ba>
			frame_buffer++;
		}
		break;
		
		case 5: // triangle
		for(uint16_t i=0; i<arr_length;i++)
     abc:	01 15       	cp	r16, r1
     abe:	11 05       	cpc	r17, r1
     ac0:	09 f0       	breq	.+2      	; 0xac4 <generate_signal+0xb0>
     ac2:	b7 c0       	rjmp	.+366    	; 0xc32 <generate_signal+0x21e>
     ac4:	04 c2       	rjmp	.+1032   	; 0xece <generate_signal+0x4ba>
			frame_buffer++;
		}
		break;
		
		case 4: // Square wave
		for(uint16_t i=0; i<arr_length;i++)
     ac6:	01 15       	cp	r16, r1
     ac8:	11 05       	cpc	r17, r1
     aca:	09 f0       	breq	.+2      	; 0xace <generate_signal+0xba>
     acc:	98 c0       	rjmp	.+304    	; 0xbfe <generate_signal+0x1ea>
     ace:	ff c1       	rjmp	.+1022   	; 0xece <generate_signal+0x4ba>
			frame_buffer++;
		}
		break;
		
		case 3: // negative ramp
		for(uint16_t i=0; i<arr_length;i++)
     ad0:	01 15       	cp	r16, r1
     ad2:	11 05       	cpc	r17, r1
     ad4:	09 f0       	breq	.+2      	; 0xad8 <generate_signal+0xc4>
     ad6:	61 c0       	rjmp	.+194    	; 0xb9a <generate_signal+0x186>
     ad8:	fa c1       	rjmp	.+1012   	; 0xece <generate_signal+0x4ba>
		}
		break;
		
		
		case 2: // positive ramp
		for(uint16_t i=0; i<arr_length;i++)
     ada:	01 15       	cp	r16, r1
     adc:	11 05       	cpc	r17, r1
     ade:	99 f5       	brne	.+102    	; 0xb46 <generate_signal+0x132>
     ae0:	f6 c1       	rjmp	.+1004   	; 0xece <generate_signal+0x4ba>
	 
	
	switch (type)
	{
		case 1: // sin function
		for(uint16_t i=0; i<arr_length;i++)
     ae2:	01 15       	cp	r16, r1
     ae4:	11 05       	cpc	r17, r1
     ae6:	09 f4       	brne	.+2      	; 0xaea <generate_signal+0xd6>
     ae8:	f2 c1       	rjmp	.+996    	; 0xece <generate_signal+0x4ba>
     aea:	e1 2c       	mov	r14, r1
     aec:	f1 2c       	mov	r15, r1
		{
			
		//	*frame_buffer=(uint8_t)(127.5*cos((float)(i)*2*M_PI/(float)arr_length)+127.5);
			*frame_buffer=lookup_sine[(uint16_t)((float)i/(float)arr_length*511.0)];
     aee:	48 01       	movw	r8, r16
     af0:	a1 2c       	mov	r10, r1
     af2:	b1 2c       	mov	r11, r1
     af4:	b7 01       	movw	r22, r14
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatunsisf>
     afe:	2b 01       	movw	r4, r22
     b00:	3c 01       	movw	r6, r24
     b02:	c5 01       	movw	r24, r10
     b04:	b4 01       	movw	r22, r8
     b06:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatunsisf>
     b0a:	9b 01       	movw	r18, r22
     b0c:	ac 01       	movw	r20, r24
     b0e:	c3 01       	movw	r24, r6
     b10:	b2 01       	movw	r22, r4
     b12:	0e 94 80 08 	call	0x1100	; 0x1100 <__divsf3>
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e8       	ldi	r19, 0x80	; 128
     b1a:	4f ef       	ldi	r20, 0xFF	; 255
     b1c:	53 e4       	ldi	r21, 0x43	; 67
     b1e:	0e 94 af 09 	call	0x135e	; 0x135e <__mulsf3>
     b22:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__fixunssfsi>
     b26:	fb 01       	movw	r30, r22
     b28:	e7 59       	subi	r30, 0x97	; 151
     b2a:	fd 4f       	sbci	r31, 0xFD	; 253
     b2c:	80 81       	ld	r24, Z
     b2e:	ad 81       	ldd	r26, Y+5	; 0x05
     b30:	be 81       	ldd	r27, Y+6	; 0x06
     b32:	8d 93       	st	X+, r24
     b34:	be 83       	std	Y+6, r27	; 0x06
     b36:	ad 83       	std	Y+5, r26	; 0x05
	 
	
	switch (type)
	{
		case 1: // sin function
		for(uint16_t i=0; i<arr_length;i++)
     b38:	bf ef       	ldi	r27, 0xFF	; 255
     b3a:	eb 1a       	sub	r14, r27
     b3c:	fb 0a       	sbc	r15, r27
     b3e:	e0 16       	cp	r14, r16
     b40:	f1 06       	cpc	r15, r17
     b42:	c1 f6       	brne	.-80     	; 0xaf4 <generate_signal+0xe0>
     b44:	c4 c1       	rjmp	.+904    	; 0xece <generate_signal+0x4ba>
		}
		break;
		
		
		case 2: // positive ramp
		for(uint16_t i=0; i<arr_length;i++)
     b46:	e1 2c       	mov	r14, r1
     b48:	f1 2c       	mov	r15, r1
		{
			
		   *frame_buffer=(uint8_t)((float)i/arr_length*255);
     b4a:	48 01       	movw	r8, r16
     b4c:	a1 2c       	mov	r10, r1
     b4e:	b1 2c       	mov	r11, r1
     b50:	b7 01       	movw	r22, r14
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatunsisf>
     b5a:	2b 01       	movw	r4, r22
     b5c:	3c 01       	movw	r6, r24
     b5e:	c5 01       	movw	r24, r10
     b60:	b4 01       	movw	r22, r8
     b62:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatunsisf>
     b66:	9b 01       	movw	r18, r22
     b68:	ac 01       	movw	r20, r24
     b6a:	c3 01       	movw	r24, r6
     b6c:	b2 01       	movw	r22, r4
     b6e:	0e 94 80 08 	call	0x1100	; 0x1100 <__divsf3>
     b72:	20 e0       	ldi	r18, 0x00	; 0
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	4f e7       	ldi	r20, 0x7F	; 127
     b78:	53 e4       	ldi	r21, 0x43	; 67
     b7a:	0e 94 af 09 	call	0x135e	; 0x135e <__mulsf3>
     b7e:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__fixunssfsi>
     b82:	ed 81       	ldd	r30, Y+5	; 0x05
     b84:	fe 81       	ldd	r31, Y+6	; 0x06
     b86:	61 93       	st	Z+, r22
     b88:	fe 83       	std	Y+6, r31	; 0x06
     b8a:	ed 83       	std	Y+5, r30	; 0x05
		}
		break;
		
		
		case 2: // positive ramp
		for(uint16_t i=0; i<arr_length;i++)
     b8c:	ff ef       	ldi	r31, 0xFF	; 255
     b8e:	ef 1a       	sub	r14, r31
     b90:	ff 0a       	sbc	r15, r31
     b92:	e0 16       	cp	r14, r16
     b94:	f1 06       	cpc	r15, r17
     b96:	e1 f6       	brne	.-72     	; 0xb50 <generate_signal+0x13c>
     b98:	9a c1       	rjmp	.+820    	; 0xece <generate_signal+0x4ba>
			frame_buffer++;
		}
		break;
		
		case 3: // negative ramp
		for(uint16_t i=0; i<arr_length;i++)
     b9a:	e1 2c       	mov	r14, r1
     b9c:	f1 2c       	mov	r15, r1
		{
			
			*frame_buffer=(uint8_t)(255-(float)i/arr_length*255);
     b9e:	48 01       	movw	r8, r16
     ba0:	a1 2c       	mov	r10, r1
     ba2:	b1 2c       	mov	r11, r1
     ba4:	b7 01       	movw	r22, r14
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatunsisf>
     bae:	2b 01       	movw	r4, r22
     bb0:	3c 01       	movw	r6, r24
     bb2:	c5 01       	movw	r24, r10
     bb4:	b4 01       	movw	r22, r8
     bb6:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatunsisf>
     bba:	9b 01       	movw	r18, r22
     bbc:	ac 01       	movw	r20, r24
     bbe:	c3 01       	movw	r24, r6
     bc0:	b2 01       	movw	r22, r4
     bc2:	0e 94 80 08 	call	0x1100	; 0x1100 <__divsf3>
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	4f e7       	ldi	r20, 0x7F	; 127
     bcc:	53 e4       	ldi	r21, 0x43	; 67
     bce:	0e 94 af 09 	call	0x135e	; 0x135e <__mulsf3>
     bd2:	9b 01       	movw	r18, r22
     bd4:	ac 01       	movw	r20, r24
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	8f e7       	ldi	r24, 0x7F	; 127
     bdc:	93 e4       	ldi	r25, 0x43	; 67
     bde:	0e 94 13 08 	call	0x1026	; 0x1026 <__subsf3>
     be2:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__fixunssfsi>
     be6:	ad 81       	ldd	r26, Y+5	; 0x05
     be8:	be 81       	ldd	r27, Y+6	; 0x06
     bea:	6d 93       	st	X+, r22
     bec:	be 83       	std	Y+6, r27	; 0x06
     bee:	ad 83       	std	Y+5, r26	; 0x05
			frame_buffer++;
		}
		break;
		
		case 3: // negative ramp
		for(uint16_t i=0; i<arr_length;i++)
     bf0:	bf ef       	ldi	r27, 0xFF	; 255
     bf2:	eb 1a       	sub	r14, r27
     bf4:	fb 0a       	sbc	r15, r27
     bf6:	e0 16       	cp	r14, r16
     bf8:	f1 06       	cpc	r15, r17
     bfa:	a1 f6       	brne	.-88     	; 0xba4 <generate_signal+0x190>
     bfc:	68 c1       	rjmp	.+720    	; 0xece <generate_signal+0x4ba>
		break;
		
		case 4: // Square wave
		for(uint16_t i=0; i<arr_length;i++)
		{
			if(i<arr_length/2)
     bfe:	98 01       	movw	r18, r16
     c00:	36 95       	lsr	r19
     c02:	27 95       	ror	r18
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	90 e0       	ldi	r25, 0x00	; 0
			*frame_buffer=0;
			else
			*frame_buffer=255;
     c08:	4f ef       	ldi	r20, 0xFF	; 255
		break;
		
		case 4: // Square wave
		for(uint16_t i=0; i<arr_length;i++)
		{
			if(i<arr_length/2)
     c0a:	82 17       	cp	r24, r18
     c0c:	93 07       	cpc	r25, r19
     c0e:	20 f4       	brcc	.+8      	; 0xc18 <generate_signal+0x204>
			*frame_buffer=0;
     c10:	ed 81       	ldd	r30, Y+5	; 0x05
     c12:	fe 81       	ldd	r31, Y+6	; 0x06
     c14:	10 82       	st	Z, r1
     c16:	03 c0       	rjmp	.+6      	; 0xc1e <generate_signal+0x20a>
			else
			*frame_buffer=255;
     c18:	ad 81       	ldd	r26, Y+5	; 0x05
     c1a:	be 81       	ldd	r27, Y+6	; 0x06
     c1c:	4c 93       	st	X, r20
			
			frame_buffer++;
     c1e:	ed 81       	ldd	r30, Y+5	; 0x05
     c20:	fe 81       	ldd	r31, Y+6	; 0x06
     c22:	31 96       	adiw	r30, 0x01	; 1
     c24:	fe 83       	std	Y+6, r31	; 0x06
     c26:	ed 83       	std	Y+5, r30	; 0x05
			frame_buffer++;
		}
		break;
		
		case 4: // Square wave
		for(uint16_t i=0; i<arr_length;i++)
     c28:	01 96       	adiw	r24, 0x01	; 1
     c2a:	80 17       	cp	r24, r16
     c2c:	91 07       	cpc	r25, r17
     c2e:	69 f7       	brne	.-38     	; 0xc0a <generate_signal+0x1f6>
     c30:	4e c1       	rjmp	.+668    	; 0xece <generate_signal+0x4ba>
		break;
		
		case 5: // triangle
		for(uint16_t i=0; i<arr_length;i++)
		{
			if(i<arr_length/2)
     c32:	68 01       	movw	r12, r16
     c34:	d6 94       	lsr	r13
     c36:	c7 94       	ror	r12
     c38:	e1 2c       	mov	r14, r1
     c3a:	f1 2c       	mov	r15, r1
			*frame_buffer=(uint8_t)((float)i/arr_length*255);
			else
			*frame_buffer=(uint8_t)(255-(float)i/arr_length*255);;
     c3c:	28 01       	movw	r4, r16
     c3e:	61 2c       	mov	r6, r1
     c40:	71 2c       	mov	r7, r1
		break;
		
		case 5: // triangle
		for(uint16_t i=0; i<arr_length;i++)
		{
			if(i<arr_length/2)
     c42:	ec 14       	cp	r14, r12
     c44:	fd 04       	cpc	r15, r13
     c46:	e8 f4       	brcc	.+58     	; 0xc82 <generate_signal+0x26e>
			*frame_buffer=(uint8_t)((float)i/arr_length*255);
     c48:	b7 01       	movw	r22, r14
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatunsisf>
     c52:	4b 01       	movw	r8, r22
     c54:	5c 01       	movw	r10, r24
     c56:	c3 01       	movw	r24, r6
     c58:	b2 01       	movw	r22, r4
     c5a:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatunsisf>
     c5e:	9b 01       	movw	r18, r22
     c60:	ac 01       	movw	r20, r24
     c62:	c5 01       	movw	r24, r10
     c64:	b4 01       	movw	r22, r8
     c66:	0e 94 80 08 	call	0x1100	; 0x1100 <__divsf3>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	4f e7       	ldi	r20, 0x7F	; 127
     c70:	53 e4       	ldi	r21, 0x43	; 67
     c72:	0e 94 af 09 	call	0x135e	; 0x135e <__mulsf3>
     c76:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__fixunssfsi>
     c7a:	ad 81       	ldd	r26, Y+5	; 0x05
     c7c:	be 81       	ldd	r27, Y+6	; 0x06
     c7e:	6c 93       	st	X, r22
     c80:	24 c0       	rjmp	.+72     	; 0xcca <generate_signal+0x2b6>
			else
			*frame_buffer=(uint8_t)(255-(float)i/arr_length*255);;
     c82:	b7 01       	movw	r22, r14
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatunsisf>
     c8c:	4b 01       	movw	r8, r22
     c8e:	5c 01       	movw	r10, r24
     c90:	c3 01       	movw	r24, r6
     c92:	b2 01       	movw	r22, r4
     c94:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatunsisf>
     c98:	9b 01       	movw	r18, r22
     c9a:	ac 01       	movw	r20, r24
     c9c:	c5 01       	movw	r24, r10
     c9e:	b4 01       	movw	r22, r8
     ca0:	0e 94 80 08 	call	0x1100	; 0x1100 <__divsf3>
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	4f e7       	ldi	r20, 0x7F	; 127
     caa:	53 e4       	ldi	r21, 0x43	; 67
     cac:	0e 94 af 09 	call	0x135e	; 0x135e <__mulsf3>
     cb0:	9b 01       	movw	r18, r22
     cb2:	ac 01       	movw	r20, r24
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	8f e7       	ldi	r24, 0x7F	; 127
     cba:	93 e4       	ldi	r25, 0x43	; 67
     cbc:	0e 94 13 08 	call	0x1026	; 0x1026 <__subsf3>
     cc0:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__fixunssfsi>
     cc4:	ed 81       	ldd	r30, Y+5	; 0x05
     cc6:	fe 81       	ldd	r31, Y+6	; 0x06
     cc8:	60 83       	st	Z, r22
			
			frame_buffer++;
     cca:	6d 81       	ldd	r22, Y+5	; 0x05
     ccc:	7e 81       	ldd	r23, Y+6	; 0x06
     cce:	6f 5f       	subi	r22, 0xFF	; 255
     cd0:	7f 4f       	sbci	r23, 0xFF	; 255
     cd2:	7e 83       	std	Y+6, r23	; 0x06
     cd4:	6d 83       	std	Y+5, r22	; 0x05
			frame_buffer++;
		}
		break;
		
		case 5: // triangle
		for(uint16_t i=0; i<arr_length;i++)
     cd6:	7f ef       	ldi	r23, 0xFF	; 255
     cd8:	e7 1a       	sub	r14, r23
     cda:	f7 0a       	sbc	r15, r23
     cdc:	e0 16       	cp	r14, r16
     cde:	f1 06       	cpc	r15, r17
     ce0:	09 f0       	breq	.+2      	; 0xce4 <generate_signal+0x2d0>
     ce2:	af cf       	rjmp	.-162    	; 0xc42 <generate_signal+0x22e>
     ce4:	f4 c0       	rjmp	.+488    	; 0xece <generate_signal+0x4ba>
			frame_buffer++;
		}
		break;
		
		case 6: //Fullwave Rectified
		for(uint16_t i=0; i<arr_length;i++)
     ce6:	e1 2c       	mov	r14, r1
     ce8:	f1 2c       	mov	r15, r1
		{
			
			//	*frame_buffer=(uint8_t)(127.5*cos((float)(i)*2*M_PI/(float)arr_length)+127.5);
			*frame_buffer=(lookup_sine[(uint16_t)((float)i/(float)arr_length*255.0)]-128)*2;
     cea:	48 01       	movw	r8, r16
     cec:	a1 2c       	mov	r10, r1
     cee:	b1 2c       	mov	r11, r1
     cf0:	b7 01       	movw	r22, r14
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatunsisf>
     cfa:	2b 01       	movw	r4, r22
     cfc:	3c 01       	movw	r6, r24
     cfe:	c5 01       	movw	r24, r10
     d00:	b4 01       	movw	r22, r8
     d02:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatunsisf>
     d06:	9b 01       	movw	r18, r22
     d08:	ac 01       	movw	r20, r24
     d0a:	c3 01       	movw	r24, r6
     d0c:	b2 01       	movw	r22, r4
     d0e:	0e 94 80 08 	call	0x1100	; 0x1100 <__divsf3>
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	4f e7       	ldi	r20, 0x7F	; 127
     d18:	53 e4       	ldi	r21, 0x43	; 67
     d1a:	0e 94 af 09 	call	0x135e	; 0x135e <__mulsf3>
     d1e:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__fixunssfsi>
     d22:	fb 01       	movw	r30, r22
     d24:	e7 59       	subi	r30, 0x97	; 151
     d26:	fd 4f       	sbci	r31, 0xFD	; 253
     d28:	80 81       	ld	r24, Z
     d2a:	88 0f       	add	r24, r24
     d2c:	ad 81       	ldd	r26, Y+5	; 0x05
     d2e:	be 81       	ldd	r27, Y+6	; 0x06
     d30:	8d 93       	st	X+, r24
     d32:	be 83       	std	Y+6, r27	; 0x06
     d34:	ad 83       	std	Y+5, r26	; 0x05
			frame_buffer++;
		}
		break;
		
		case 6: //Fullwave Rectified
		for(uint16_t i=0; i<arr_length;i++)
     d36:	bf ef       	ldi	r27, 0xFF	; 255
     d38:	eb 1a       	sub	r14, r27
     d3a:	fb 0a       	sbc	r15, r27
     d3c:	e0 16       	cp	r14, r16
     d3e:	f1 06       	cpc	r15, r17
     d40:	b9 f6       	brne	.-82     	; 0xcf0 <generate_signal+0x2dc>
     d42:	c5 c0       	rjmp	.+394    	; 0xece <generate_signal+0x4ba>
		for(uint16_t i=0; i<arr_length;i++)
		{
			
			//	*frame_buffer=(uint8_t)(127.5*cos((float)(i)*2*M_PI/(float)arr_length)+127.5);
			index=(uint16_t)((float)i/(float)arr_length*511.0);
			if(i<(arr_length/2))
     d44:	68 01       	movw	r12, r16
     d46:	d6 94       	lsr	r13
     d48:	c7 94       	ror	r12
     d4a:	e1 2c       	mov	r14, r1
     d4c:	f1 2c       	mov	r15, r1
			*frame_buffer=(lookup_sine[index]-128)*2;
     d4e:	28 01       	movw	r4, r16
     d50:	61 2c       	mov	r6, r1
     d52:	71 2c       	mov	r7, r1
		for(uint16_t i=0; i<arr_length;i++)
		{
			
			//	*frame_buffer=(uint8_t)(127.5*cos((float)(i)*2*M_PI/(float)arr_length)+127.5);
			index=(uint16_t)((float)i/(float)arr_length*511.0);
			if(i<(arr_length/2))
     d54:	ec 14       	cp	r14, r12
     d56:	fd 04       	cpc	r15, r13
     d58:	10 f5       	brcc	.+68     	; 0xd9e <generate_signal+0x38a>
			*frame_buffer=(lookup_sine[index]-128)*2;
     d5a:	b7 01       	movw	r22, r14
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatunsisf>
     d64:	4b 01       	movw	r8, r22
     d66:	5c 01       	movw	r10, r24
     d68:	c3 01       	movw	r24, r6
     d6a:	b2 01       	movw	r22, r4
     d6c:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatunsisf>
     d70:	9b 01       	movw	r18, r22
     d72:	ac 01       	movw	r20, r24
     d74:	c5 01       	movw	r24, r10
     d76:	b4 01       	movw	r22, r8
     d78:	0e 94 80 08 	call	0x1100	; 0x1100 <__divsf3>
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e8       	ldi	r19, 0x80	; 128
     d80:	4f ef       	ldi	r20, 0xFF	; 255
     d82:	53 e4       	ldi	r21, 0x43	; 67
     d84:	0e 94 af 09 	call	0x135e	; 0x135e <__mulsf3>
     d88:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__fixunssfsi>
     d8c:	fb 01       	movw	r30, r22
     d8e:	e7 59       	subi	r30, 0x97	; 151
     d90:	fd 4f       	sbci	r31, 0xFD	; 253
     d92:	80 81       	ld	r24, Z
     d94:	88 0f       	add	r24, r24
     d96:	ed 81       	ldd	r30, Y+5	; 0x05
     d98:	fe 81       	ldd	r31, Y+6	; 0x06
     d9a:	80 83       	st	Z, r24
     d9c:	03 c0       	rjmp	.+6      	; 0xda4 <generate_signal+0x390>
			else
			*frame_buffer=0;
     d9e:	ad 81       	ldd	r26, Y+5	; 0x05
     da0:	be 81       	ldd	r27, Y+6	; 0x06
     da2:	1c 92       	st	X, r1
			
			frame_buffer++;
     da4:	ed 81       	ldd	r30, Y+5	; 0x05
     da6:	fe 81       	ldd	r31, Y+6	; 0x06
     da8:	31 96       	adiw	r30, 0x01	; 1
     daa:	fe 83       	std	Y+6, r31	; 0x06
     dac:	ed 83       	std	Y+5, r30	; 0x05
			frame_buffer++;
		}
		break;
		
		case 7: // Halfwave Rectified
		for(uint16_t i=0; i<arr_length;i++)
     dae:	ff ef       	ldi	r31, 0xFF	; 255
     db0:	ef 1a       	sub	r14, r31
     db2:	ff 0a       	sbc	r15, r31
     db4:	e0 16       	cp	r14, r16
     db6:	f1 06       	cpc	r15, r17
     db8:	69 f6       	brne	.-102    	; 0xd54 <generate_signal+0x340>
     dba:	89 c0       	rjmp	.+274    	; 0xece <generate_signal+0x4ba>
			frame_buffer++;
		}
		break;
		
		case 8: // Ecg
		for(uint16_t i=0; i<arr_length;i++)
     dbc:	e1 2c       	mov	r14, r1
     dbe:	f1 2c       	mov	r15, r1
		{
			
				
				//	*frame_buffer=(uint8_t)(127.5*cos((float)(i)*2*M_PI/(float)arr_length)+127.5);
				*frame_buffer=ecg_lookup[(uint16_t)((float)i/(float)arr_length*234.0)];
     dc0:	48 01       	movw	r8, r16
     dc2:	a1 2c       	mov	r10, r1
     dc4:	b1 2c       	mov	r11, r1
     dc6:	b7 01       	movw	r22, r14
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatunsisf>
     dd0:	2b 01       	movw	r4, r22
     dd2:	3c 01       	movw	r6, r24
     dd4:	c5 01       	movw	r24, r10
     dd6:	b4 01       	movw	r22, r8
     dd8:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatunsisf>
     ddc:	9b 01       	movw	r18, r22
     dde:	ac 01       	movw	r20, r24
     de0:	c3 01       	movw	r24, r6
     de2:	b2 01       	movw	r22, r4
     de4:	0e 94 80 08 	call	0x1100	; 0x1100 <__divsf3>
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	4a e6       	ldi	r20, 0x6A	; 106
     dee:	53 e4       	ldi	r21, 0x43	; 67
     df0:	0e 94 af 09 	call	0x135e	; 0x135e <__mulsf3>
     df4:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__fixunssfsi>
     df8:	fb 01       	movw	r30, r22
     dfa:	e1 58       	subi	r30, 0x81	; 129
     dfc:	fe 4f       	sbci	r31, 0xFE	; 254
     dfe:	80 81       	ld	r24, Z
     e00:	ad 81       	ldd	r26, Y+5	; 0x05
     e02:	be 81       	ldd	r27, Y+6	; 0x06
     e04:	8d 93       	st	X+, r24
     e06:	be 83       	std	Y+6, r27	; 0x06
     e08:	ad 83       	std	Y+5, r26	; 0x05
			frame_buffer++;
		}
		break;
		
		case 8: // Ecg
		for(uint16_t i=0; i<arr_length;i++)
     e0a:	bf ef       	ldi	r27, 0xFF	; 255
     e0c:	eb 1a       	sub	r14, r27
     e0e:	fb 0a       	sbc	r15, r27
     e10:	e0 16       	cp	r14, r16
     e12:	f1 06       	cpc	r15, r17
     e14:	c1 f6       	brne	.-80     	; 0xdc6 <generate_signal+0x3b2>
     e16:	5b c0       	rjmp	.+182    	; 0xece <generate_signal+0x4ba>
		}
		break;
		
		
		case 9: // DTMF
		for(uint16_t i=0; i<arr_length;i++)
     e18:	c1 2c       	mov	r12, r1
     e1a:	d1 2c       	mov	r13, r1
		{
			
			//	*frame_buffer=(uint8_t)(127.5*cos((float)(i)*2*M_PI/(float)arr_length)+127.5);
			
			index=(uint16_t)((float)i/(float)arr_length*511.0*multiplier);
     e1c:	28 01       	movw	r4, r16
     e1e:	61 2c       	mov	r6, r1
     e20:	71 2c       	mov	r7, r1
     e22:	6e 2d       	mov	r22, r14
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	69 83       	std	Y+1, r22	; 0x01
     e2c:	7a 83       	std	Y+2, r23	; 0x02
     e2e:	8b 83       	std	Y+3, r24	; 0x03
     e30:	9c 83       	std	Y+4, r25	; 0x04
     e32:	b6 01       	movw	r22, r12
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatunsisf>
     e3c:	4b 01       	movw	r8, r22
     e3e:	5c 01       	movw	r10, r24
     e40:	c3 01       	movw	r24, r6
     e42:	b2 01       	movw	r22, r4
     e44:	0e 94 21 09 	call	0x1242	; 0x1242 <__floatunsisf>
     e48:	9b 01       	movw	r18, r22
     e4a:	ac 01       	movw	r20, r24
     e4c:	c5 01       	movw	r24, r10
     e4e:	b4 01       	movw	r22, r8
     e50:	0e 94 80 08 	call	0x1100	; 0x1100 <__divsf3>
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e8       	ldi	r19, 0x80	; 128
     e58:	4f ef       	ldi	r20, 0xFF	; 255
     e5a:	53 e4       	ldi	r21, 0x43	; 67
     e5c:	0e 94 af 09 	call	0x135e	; 0x135e <__mulsf3>
     e60:	4b 01       	movw	r8, r22
     e62:	5c 01       	movw	r10, r24
     e64:	69 81       	ldd	r22, Y+1	; 0x01
     e66:	7a 81       	ldd	r23, Y+2	; 0x02
     e68:	8b 81       	ldd	r24, Y+3	; 0x03
     e6a:	9c 81       	ldd	r25, Y+4	; 0x04
     e6c:	0e 94 23 09 	call	0x1246	; 0x1246 <__floatsisf>
     e70:	a5 01       	movw	r20, r10
     e72:	94 01       	movw	r18, r8
     e74:	0e 94 af 09 	call	0x135e	; 0x135e <__mulsf3>
     e78:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__fixunssfsi>
     e7c:	7b 01       	movw	r14, r22
			
			while(index>511)																	//if the index is larger than lookup table substract one period
     e7e:	e1 14       	cp	r14, r1
     e80:	72 e0       	ldi	r23, 0x02	; 2
     e82:	f7 06       	cpc	r15, r23
     e84:	40 f0       	brcs	.+16     	; 0xe96 <generate_signal+0x482>
			{
				index=index-511;
     e86:	8f ef       	ldi	r24, 0xFF	; 255
     e88:	e8 1a       	sub	r14, r24
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	f8 0a       	sbc	r15, r24
			
			//	*frame_buffer=(uint8_t)(127.5*cos((float)(i)*2*M_PI/(float)arr_length)+127.5);
			
			index=(uint16_t)((float)i/(float)arr_length*511.0*multiplier);
			
			while(index>511)																	//if the index is larger than lookup table substract one period
     e8e:	e1 14       	cp	r14, r1
     e90:	92 e0       	ldi	r25, 0x02	; 2
     e92:	f9 06       	cpc	r15, r25
     e94:	c0 f7       	brcc	.-16     	; 0xe86 <generate_signal+0x472>
			{
				index=index-511;
			}
			
			*frame_buffer=lookup_sine[(uint16_t)((float)i/(float)arr_length*511.0)]/2+lookup_sine[index]/2;
     e96:	c5 01       	movw	r24, r10
     e98:	b4 01       	movw	r22, r8
     e9a:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__fixunssfsi>
     e9e:	fb 01       	movw	r30, r22
     ea0:	e7 59       	subi	r30, 0x97	; 151
     ea2:	fd 4f       	sbci	r31, 0xFD	; 253
     ea4:	80 81       	ld	r24, Z
     ea6:	98 2f       	mov	r25, r24
     ea8:	96 95       	lsr	r25
     eaa:	f7 01       	movw	r30, r14
     eac:	e7 59       	subi	r30, 0x97	; 151
     eae:	fd 4f       	sbci	r31, 0xFD	; 253
     eb0:	80 81       	ld	r24, Z
     eb2:	86 95       	lsr	r24
     eb4:	89 0f       	add	r24, r25
     eb6:	ad 81       	ldd	r26, Y+5	; 0x05
     eb8:	be 81       	ldd	r27, Y+6	; 0x06
     eba:	8d 93       	st	X+, r24
     ebc:	be 83       	std	Y+6, r27	; 0x06
     ebe:	ad 83       	std	Y+5, r26	; 0x05
		}
		break;
		
		
		case 9: // DTMF
		for(uint16_t i=0; i<arr_length;i++)
     ec0:	bf ef       	ldi	r27, 0xFF	; 255
     ec2:	cb 1a       	sub	r12, r27
     ec4:	db 0a       	sbc	r13, r27
     ec6:	c0 16       	cp	r12, r16
     ec8:	d1 06       	cpc	r13, r17
     eca:	09 f0       	breq	.+2      	; 0xece <generate_signal+0x4ba>
     ecc:	b2 cf       	rjmp	.-156    	; 0xe32 <generate_signal+0x41e>
	}
	
	
	
	
}
     ece:	26 96       	adiw	r28, 0x06	; 6
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	ff 90       	pop	r15
     ee4:	ef 90       	pop	r14
     ee6:	df 90       	pop	r13
     ee8:	cf 90       	pop	r12
     eea:	bf 90       	pop	r11
     eec:	af 90       	pop	r10
     eee:	9f 90       	pop	r9
     ef0:	8f 90       	pop	r8
     ef2:	7f 90       	pop	r7
     ef4:	6f 90       	pop	r6
     ef6:	5f 90       	pop	r5
     ef8:	4f 90       	pop	r4
     efa:	08 95       	ret

00000efc <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
     efc:	1f 92       	push	r1
     efe:	0f 92       	push	r0
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	0f 92       	push	r0
     f04:	11 24       	eor	r1, r1
     f06:	2f 93       	push	r18
     f08:	8f 93       	push	r24
     f0a:	9f 93       	push	r25
     f0c:	ef 93       	push	r30
     f0e:	ff 93       	push	r31
     f10:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     f14:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     f18:	8c 71       	andi	r24, 0x1C	; 28
     f1a:	e0 91 78 04 	lds	r30, 0x0478	; 0x800478 <UART_RxHead>
     f1e:	ef 5f       	subi	r30, 0xFF	; 255
     f20:	ef 71       	andi	r30, 0x1F	; 31
     f22:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <UART_RxTail>
     f26:	e9 17       	cp	r30, r25
     f28:	39 f0       	breq	.+14     	; 0xf38 <__vector_18+0x3c>
     f2a:	e0 93 78 04 	sts	0x0478, r30	; 0x800478 <UART_RxHead>
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	e5 58       	subi	r30, 0x85	; 133
     f32:	fb 4f       	sbci	r31, 0xFB	; 251
     f34:	20 83       	st	Z, r18
     f36:	01 c0       	rjmp	.+2      	; 0xf3a <__vector_18+0x3e>
     f38:	82 e0       	ldi	r24, 0x02	; 2
     f3a:	90 91 76 04 	lds	r25, 0x0476	; 0x800476 <UART_LastRxError>
     f3e:	89 2b       	or	r24, r25
     f40:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <UART_LastRxError>
     f44:	ff 91       	pop	r31
     f46:	ef 91       	pop	r30
     f48:	9f 91       	pop	r25
     f4a:	8f 91       	pop	r24
     f4c:	2f 91       	pop	r18
     f4e:	0f 90       	pop	r0
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	0f 90       	pop	r0
     f54:	1f 90       	pop	r1
     f56:	18 95       	reti

00000f58 <__vector_19>:
     f58:	1f 92       	push	r1
     f5a:	0f 92       	push	r0
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	0f 92       	push	r0
     f60:	11 24       	eor	r1, r1
     f62:	8f 93       	push	r24
     f64:	9f 93       	push	r25
     f66:	ef 93       	push	r30
     f68:	ff 93       	push	r31
     f6a:	90 91 7a 04 	lds	r25, 0x047A	; 0x80047a <UART_TxHead>
     f6e:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <UART_TxTail>
     f72:	98 17       	cp	r25, r24
     f74:	69 f0       	breq	.+26     	; 0xf90 <__vector_19+0x38>
     f76:	e0 91 79 04 	lds	r30, 0x0479	; 0x800479 <UART_TxTail>
     f7a:	ef 5f       	subi	r30, 0xFF	; 255
     f7c:	ef 71       	andi	r30, 0x1F	; 31
     f7e:	e0 93 79 04 	sts	0x0479, r30	; 0x800479 <UART_TxTail>
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	e5 56       	subi	r30, 0x65	; 101
     f86:	fb 4f       	sbci	r31, 0xFB	; 251
     f88:	80 81       	ld	r24, Z
     f8a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     f8e:	05 c0       	rjmp	.+10     	; 0xf9a <__vector_19+0x42>
     f90:	e1 ec       	ldi	r30, 0xC1	; 193
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	8f 7d       	andi	r24, 0xDF	; 223
     f98:	80 83       	st	Z, r24
     f9a:	ff 91       	pop	r31
     f9c:	ef 91       	pop	r30
     f9e:	9f 91       	pop	r25
     fa0:	8f 91       	pop	r24
     fa2:	0f 90       	pop	r0
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	0f 90       	pop	r0
     fa8:	1f 90       	pop	r1
     faa:	18 95       	reti

00000fac <uart_init>:
     fac:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <UART_TxHead>
     fb0:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <UART_TxTail>
     fb4:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <UART_RxHead>
     fb8:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <UART_RxTail>
     fbc:	99 23       	and	r25, r25
     fbe:	1c f4       	brge	.+6      	; 0xfc6 <uart_init+0x1a>
     fc0:	22 e0       	ldi	r18, 0x02	; 2
     fc2:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     fc6:	90 78       	andi	r25, 0x80	; 128
     fc8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     fcc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     fd0:	88 e9       	ldi	r24, 0x98	; 152
     fd2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     fd6:	86 e0       	ldi	r24, 0x06	; 6
     fd8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     fdc:	08 95       	ret

00000fde <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     fde:	20 91 7a 04 	lds	r18, 0x047A	; 0x80047a <UART_TxHead>
     fe2:	2f 5f       	subi	r18, 0xFF	; 255
     fe4:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
     fe6:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <UART_TxTail>
     fea:	29 17       	cp	r18, r25
     fec:	e1 f3       	breq	.-8      	; 0xfe6 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
     fee:	e2 2f       	mov	r30, r18
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	e5 56       	subi	r30, 0x65	; 101
     ff4:	fb 4f       	sbci	r31, 0xFB	; 251
     ff6:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
     ff8:	20 93 7a 04 	sts	0x047A, r18	; 0x80047a <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
     ffc:	e1 ec       	ldi	r30, 0xC1	; 193
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	80 62       	ori	r24, 0x20	; 32
    1004:	80 83       	st	Z, r24
    1006:	08 95       	ret

00001008 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	ec 01       	movw	r28, r24
    while (*s)
    100e:	88 81       	ld	r24, Y
    1010:	88 23       	and	r24, r24
    1012:	31 f0       	breq	.+12     	; 0x1020 <uart_puts+0x18>
    1014:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
    1016:	0e 94 ef 07 	call	0xfde	; 0xfde <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
    101a:	89 91       	ld	r24, Y+
    101c:	81 11       	cpse	r24, r1
    101e:	fb cf       	rjmp	.-10     	; 0x1016 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <__subsf3>:
    1026:	50 58       	subi	r21, 0x80	; 128

00001028 <__addsf3>:
    1028:	bb 27       	eor	r27, r27
    102a:	aa 27       	eor	r26, r26
    102c:	0e 94 2b 08 	call	0x1056	; 0x1056 <__addsf3x>
    1030:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__fp_round>
    1034:	0e 94 67 09 	call	0x12ce	; 0x12ce <__fp_pscA>
    1038:	38 f0       	brcs	.+14     	; 0x1048 <__addsf3+0x20>
    103a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__fp_pscB>
    103e:	20 f0       	brcs	.+8      	; 0x1048 <__addsf3+0x20>
    1040:	39 f4       	brne	.+14     	; 0x1050 <__addsf3+0x28>
    1042:	9f 3f       	cpi	r25, 0xFF	; 255
    1044:	19 f4       	brne	.+6      	; 0x104c <__addsf3+0x24>
    1046:	26 f4       	brtc	.+8      	; 0x1050 <__addsf3+0x28>
    1048:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__fp_nan>
    104c:	0e f4       	brtc	.+2      	; 0x1050 <__addsf3+0x28>
    104e:	e0 95       	com	r30
    1050:	e7 fb       	bst	r30, 7
    1052:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__fp_inf>

00001056 <__addsf3x>:
    1056:	e9 2f       	mov	r30, r25
    1058:	0e 94 86 09 	call	0x130c	; 0x130c <__fp_split3>
    105c:	58 f3       	brcs	.-42     	; 0x1034 <__addsf3+0xc>
    105e:	ba 17       	cp	r27, r26
    1060:	62 07       	cpc	r22, r18
    1062:	73 07       	cpc	r23, r19
    1064:	84 07       	cpc	r24, r20
    1066:	95 07       	cpc	r25, r21
    1068:	20 f0       	brcs	.+8      	; 0x1072 <__addsf3x+0x1c>
    106a:	79 f4       	brne	.+30     	; 0x108a <__addsf3x+0x34>
    106c:	a6 f5       	brtc	.+104    	; 0x10d6 <__addsf3x+0x80>
    106e:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <__fp_zero>
    1072:	0e f4       	brtc	.+2      	; 0x1076 <__addsf3x+0x20>
    1074:	e0 95       	com	r30
    1076:	0b 2e       	mov	r0, r27
    1078:	ba 2f       	mov	r27, r26
    107a:	a0 2d       	mov	r26, r0
    107c:	0b 01       	movw	r0, r22
    107e:	b9 01       	movw	r22, r18
    1080:	90 01       	movw	r18, r0
    1082:	0c 01       	movw	r0, r24
    1084:	ca 01       	movw	r24, r20
    1086:	a0 01       	movw	r20, r0
    1088:	11 24       	eor	r1, r1
    108a:	ff 27       	eor	r31, r31
    108c:	59 1b       	sub	r21, r25
    108e:	99 f0       	breq	.+38     	; 0x10b6 <__addsf3x+0x60>
    1090:	59 3f       	cpi	r21, 0xF9	; 249
    1092:	50 f4       	brcc	.+20     	; 0x10a8 <__addsf3x+0x52>
    1094:	50 3e       	cpi	r21, 0xE0	; 224
    1096:	68 f1       	brcs	.+90     	; 0x10f2 <__addsf3x+0x9c>
    1098:	1a 16       	cp	r1, r26
    109a:	f0 40       	sbci	r31, 0x00	; 0
    109c:	a2 2f       	mov	r26, r18
    109e:	23 2f       	mov	r18, r19
    10a0:	34 2f       	mov	r19, r20
    10a2:	44 27       	eor	r20, r20
    10a4:	58 5f       	subi	r21, 0xF8	; 248
    10a6:	f3 cf       	rjmp	.-26     	; 0x108e <__addsf3x+0x38>
    10a8:	46 95       	lsr	r20
    10aa:	37 95       	ror	r19
    10ac:	27 95       	ror	r18
    10ae:	a7 95       	ror	r26
    10b0:	f0 40       	sbci	r31, 0x00	; 0
    10b2:	53 95       	inc	r21
    10b4:	c9 f7       	brne	.-14     	; 0x10a8 <__addsf3x+0x52>
    10b6:	7e f4       	brtc	.+30     	; 0x10d6 <__addsf3x+0x80>
    10b8:	1f 16       	cp	r1, r31
    10ba:	ba 0b       	sbc	r27, r26
    10bc:	62 0b       	sbc	r22, r18
    10be:	73 0b       	sbc	r23, r19
    10c0:	84 0b       	sbc	r24, r20
    10c2:	ba f0       	brmi	.+46     	; 0x10f2 <__addsf3x+0x9c>
    10c4:	91 50       	subi	r25, 0x01	; 1
    10c6:	a1 f0       	breq	.+40     	; 0x10f0 <__addsf3x+0x9a>
    10c8:	ff 0f       	add	r31, r31
    10ca:	bb 1f       	adc	r27, r27
    10cc:	66 1f       	adc	r22, r22
    10ce:	77 1f       	adc	r23, r23
    10d0:	88 1f       	adc	r24, r24
    10d2:	c2 f7       	brpl	.-16     	; 0x10c4 <__addsf3x+0x6e>
    10d4:	0e c0       	rjmp	.+28     	; 0x10f2 <__addsf3x+0x9c>
    10d6:	ba 0f       	add	r27, r26
    10d8:	62 1f       	adc	r22, r18
    10da:	73 1f       	adc	r23, r19
    10dc:	84 1f       	adc	r24, r20
    10de:	48 f4       	brcc	.+18     	; 0x10f2 <__addsf3x+0x9c>
    10e0:	87 95       	ror	r24
    10e2:	77 95       	ror	r23
    10e4:	67 95       	ror	r22
    10e6:	b7 95       	ror	r27
    10e8:	f7 95       	ror	r31
    10ea:	9e 3f       	cpi	r25, 0xFE	; 254
    10ec:	08 f0       	brcs	.+2      	; 0x10f0 <__addsf3x+0x9a>
    10ee:	b0 cf       	rjmp	.-160    	; 0x1050 <__addsf3+0x28>
    10f0:	93 95       	inc	r25
    10f2:	88 0f       	add	r24, r24
    10f4:	08 f0       	brcs	.+2      	; 0x10f8 <__addsf3x+0xa2>
    10f6:	99 27       	eor	r25, r25
    10f8:	ee 0f       	add	r30, r30
    10fa:	97 95       	ror	r25
    10fc:	87 95       	ror	r24
    10fe:	08 95       	ret

00001100 <__divsf3>:
    1100:	0e 94 94 08 	call	0x1128	; 0x1128 <__divsf3x>
    1104:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__fp_round>
    1108:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__fp_pscB>
    110c:	58 f0       	brcs	.+22     	; 0x1124 <__divsf3+0x24>
    110e:	0e 94 67 09 	call	0x12ce	; 0x12ce <__fp_pscA>
    1112:	40 f0       	brcs	.+16     	; 0x1124 <__divsf3+0x24>
    1114:	29 f4       	brne	.+10     	; 0x1120 <__divsf3+0x20>
    1116:	5f 3f       	cpi	r21, 0xFF	; 255
    1118:	29 f0       	breq	.+10     	; 0x1124 <__divsf3+0x24>
    111a:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__fp_inf>
    111e:	51 11       	cpse	r21, r1
    1120:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__fp_szero>
    1124:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__fp_nan>

00001128 <__divsf3x>:
    1128:	0e 94 86 09 	call	0x130c	; 0x130c <__fp_split3>
    112c:	68 f3       	brcs	.-38     	; 0x1108 <__divsf3+0x8>

0000112e <__divsf3_pse>:
    112e:	99 23       	and	r25, r25
    1130:	b1 f3       	breq	.-20     	; 0x111e <__divsf3+0x1e>
    1132:	55 23       	and	r21, r21
    1134:	91 f3       	breq	.-28     	; 0x111a <__divsf3+0x1a>
    1136:	95 1b       	sub	r25, r21
    1138:	55 0b       	sbc	r21, r21
    113a:	bb 27       	eor	r27, r27
    113c:	aa 27       	eor	r26, r26
    113e:	62 17       	cp	r22, r18
    1140:	73 07       	cpc	r23, r19
    1142:	84 07       	cpc	r24, r20
    1144:	38 f0       	brcs	.+14     	; 0x1154 <__divsf3_pse+0x26>
    1146:	9f 5f       	subi	r25, 0xFF	; 255
    1148:	5f 4f       	sbci	r21, 0xFF	; 255
    114a:	22 0f       	add	r18, r18
    114c:	33 1f       	adc	r19, r19
    114e:	44 1f       	adc	r20, r20
    1150:	aa 1f       	adc	r26, r26
    1152:	a9 f3       	breq	.-22     	; 0x113e <__divsf3_pse+0x10>
    1154:	35 d0       	rcall	.+106    	; 0x11c0 <__divsf3_pse+0x92>
    1156:	0e 2e       	mov	r0, r30
    1158:	3a f0       	brmi	.+14     	; 0x1168 <__divsf3_pse+0x3a>
    115a:	e0 e8       	ldi	r30, 0x80	; 128
    115c:	32 d0       	rcall	.+100    	; 0x11c2 <__divsf3_pse+0x94>
    115e:	91 50       	subi	r25, 0x01	; 1
    1160:	50 40       	sbci	r21, 0x00	; 0
    1162:	e6 95       	lsr	r30
    1164:	00 1c       	adc	r0, r0
    1166:	ca f7       	brpl	.-14     	; 0x115a <__divsf3_pse+0x2c>
    1168:	2b d0       	rcall	.+86     	; 0x11c0 <__divsf3_pse+0x92>
    116a:	fe 2f       	mov	r31, r30
    116c:	29 d0       	rcall	.+82     	; 0x11c0 <__divsf3_pse+0x92>
    116e:	66 0f       	add	r22, r22
    1170:	77 1f       	adc	r23, r23
    1172:	88 1f       	adc	r24, r24
    1174:	bb 1f       	adc	r27, r27
    1176:	26 17       	cp	r18, r22
    1178:	37 07       	cpc	r19, r23
    117a:	48 07       	cpc	r20, r24
    117c:	ab 07       	cpc	r26, r27
    117e:	b0 e8       	ldi	r27, 0x80	; 128
    1180:	09 f0       	breq	.+2      	; 0x1184 <__divsf3_pse+0x56>
    1182:	bb 0b       	sbc	r27, r27
    1184:	80 2d       	mov	r24, r0
    1186:	bf 01       	movw	r22, r30
    1188:	ff 27       	eor	r31, r31
    118a:	93 58       	subi	r25, 0x83	; 131
    118c:	5f 4f       	sbci	r21, 0xFF	; 255
    118e:	3a f0       	brmi	.+14     	; 0x119e <__divsf3_pse+0x70>
    1190:	9e 3f       	cpi	r25, 0xFE	; 254
    1192:	51 05       	cpc	r21, r1
    1194:	78 f0       	brcs	.+30     	; 0x11b4 <__divsf3_pse+0x86>
    1196:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__fp_inf>
    119a:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__fp_szero>
    119e:	5f 3f       	cpi	r21, 0xFF	; 255
    11a0:	e4 f3       	brlt	.-8      	; 0x119a <__divsf3_pse+0x6c>
    11a2:	98 3e       	cpi	r25, 0xE8	; 232
    11a4:	d4 f3       	brlt	.-12     	; 0x119a <__divsf3_pse+0x6c>
    11a6:	86 95       	lsr	r24
    11a8:	77 95       	ror	r23
    11aa:	67 95       	ror	r22
    11ac:	b7 95       	ror	r27
    11ae:	f7 95       	ror	r31
    11b0:	9f 5f       	subi	r25, 0xFF	; 255
    11b2:	c9 f7       	brne	.-14     	; 0x11a6 <__divsf3_pse+0x78>
    11b4:	88 0f       	add	r24, r24
    11b6:	91 1d       	adc	r25, r1
    11b8:	96 95       	lsr	r25
    11ba:	87 95       	ror	r24
    11bc:	97 f9       	bld	r25, 7
    11be:	08 95       	ret
    11c0:	e1 e0       	ldi	r30, 0x01	; 1
    11c2:	66 0f       	add	r22, r22
    11c4:	77 1f       	adc	r23, r23
    11c6:	88 1f       	adc	r24, r24
    11c8:	bb 1f       	adc	r27, r27
    11ca:	62 17       	cp	r22, r18
    11cc:	73 07       	cpc	r23, r19
    11ce:	84 07       	cpc	r24, r20
    11d0:	ba 07       	cpc	r27, r26
    11d2:	20 f0       	brcs	.+8      	; 0x11dc <__divsf3_pse+0xae>
    11d4:	62 1b       	sub	r22, r18
    11d6:	73 0b       	sbc	r23, r19
    11d8:	84 0b       	sbc	r24, r20
    11da:	ba 0b       	sbc	r27, r26
    11dc:	ee 1f       	adc	r30, r30
    11de:	88 f7       	brcc	.-30     	; 0x11c2 <__divsf3_pse+0x94>
    11e0:	e0 95       	com	r30
    11e2:	08 95       	ret

000011e4 <__fixunssfsi>:
    11e4:	0e 94 8e 09 	call	0x131c	; 0x131c <__fp_splitA>
    11e8:	88 f0       	brcs	.+34     	; 0x120c <__fixunssfsi+0x28>
    11ea:	9f 57       	subi	r25, 0x7F	; 127
    11ec:	98 f0       	brcs	.+38     	; 0x1214 <__fixunssfsi+0x30>
    11ee:	b9 2f       	mov	r27, r25
    11f0:	99 27       	eor	r25, r25
    11f2:	b7 51       	subi	r27, 0x17	; 23
    11f4:	b0 f0       	brcs	.+44     	; 0x1222 <__fixunssfsi+0x3e>
    11f6:	e1 f0       	breq	.+56     	; 0x1230 <__fixunssfsi+0x4c>
    11f8:	66 0f       	add	r22, r22
    11fa:	77 1f       	adc	r23, r23
    11fc:	88 1f       	adc	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	1a f0       	brmi	.+6      	; 0x1208 <__fixunssfsi+0x24>
    1202:	ba 95       	dec	r27
    1204:	c9 f7       	brne	.-14     	; 0x11f8 <__fixunssfsi+0x14>
    1206:	14 c0       	rjmp	.+40     	; 0x1230 <__fixunssfsi+0x4c>
    1208:	b1 30       	cpi	r27, 0x01	; 1
    120a:	91 f0       	breq	.+36     	; 0x1230 <__fixunssfsi+0x4c>
    120c:	0e 94 a8 09 	call	0x1350	; 0x1350 <__fp_zero>
    1210:	b1 e0       	ldi	r27, 0x01	; 1
    1212:	08 95       	ret
    1214:	0c 94 a8 09 	jmp	0x1350	; 0x1350 <__fp_zero>
    1218:	67 2f       	mov	r22, r23
    121a:	78 2f       	mov	r23, r24
    121c:	88 27       	eor	r24, r24
    121e:	b8 5f       	subi	r27, 0xF8	; 248
    1220:	39 f0       	breq	.+14     	; 0x1230 <__fixunssfsi+0x4c>
    1222:	b9 3f       	cpi	r27, 0xF9	; 249
    1224:	cc f3       	brlt	.-14     	; 0x1218 <__fixunssfsi+0x34>
    1226:	86 95       	lsr	r24
    1228:	77 95       	ror	r23
    122a:	67 95       	ror	r22
    122c:	b3 95       	inc	r27
    122e:	d9 f7       	brne	.-10     	; 0x1226 <__fixunssfsi+0x42>
    1230:	3e f4       	brtc	.+14     	; 0x1240 <__fixunssfsi+0x5c>
    1232:	90 95       	com	r25
    1234:	80 95       	com	r24
    1236:	70 95       	com	r23
    1238:	61 95       	neg	r22
    123a:	7f 4f       	sbci	r23, 0xFF	; 255
    123c:	8f 4f       	sbci	r24, 0xFF	; 255
    123e:	9f 4f       	sbci	r25, 0xFF	; 255
    1240:	08 95       	ret

00001242 <__floatunsisf>:
    1242:	e8 94       	clt
    1244:	09 c0       	rjmp	.+18     	; 0x1258 <__floatsisf+0x12>

00001246 <__floatsisf>:
    1246:	97 fb       	bst	r25, 7
    1248:	3e f4       	brtc	.+14     	; 0x1258 <__floatsisf+0x12>
    124a:	90 95       	com	r25
    124c:	80 95       	com	r24
    124e:	70 95       	com	r23
    1250:	61 95       	neg	r22
    1252:	7f 4f       	sbci	r23, 0xFF	; 255
    1254:	8f 4f       	sbci	r24, 0xFF	; 255
    1256:	9f 4f       	sbci	r25, 0xFF	; 255
    1258:	99 23       	and	r25, r25
    125a:	a9 f0       	breq	.+42     	; 0x1286 <__floatsisf+0x40>
    125c:	f9 2f       	mov	r31, r25
    125e:	96 e9       	ldi	r25, 0x96	; 150
    1260:	bb 27       	eor	r27, r27
    1262:	93 95       	inc	r25
    1264:	f6 95       	lsr	r31
    1266:	87 95       	ror	r24
    1268:	77 95       	ror	r23
    126a:	67 95       	ror	r22
    126c:	b7 95       	ror	r27
    126e:	f1 11       	cpse	r31, r1
    1270:	f8 cf       	rjmp	.-16     	; 0x1262 <__floatsisf+0x1c>
    1272:	fa f4       	brpl	.+62     	; 0x12b2 <__floatsisf+0x6c>
    1274:	bb 0f       	add	r27, r27
    1276:	11 f4       	brne	.+4      	; 0x127c <__floatsisf+0x36>
    1278:	60 ff       	sbrs	r22, 0
    127a:	1b c0       	rjmp	.+54     	; 0x12b2 <__floatsisf+0x6c>
    127c:	6f 5f       	subi	r22, 0xFF	; 255
    127e:	7f 4f       	sbci	r23, 0xFF	; 255
    1280:	8f 4f       	sbci	r24, 0xFF	; 255
    1282:	9f 4f       	sbci	r25, 0xFF	; 255
    1284:	16 c0       	rjmp	.+44     	; 0x12b2 <__floatsisf+0x6c>
    1286:	88 23       	and	r24, r24
    1288:	11 f0       	breq	.+4      	; 0x128e <__floatsisf+0x48>
    128a:	96 e9       	ldi	r25, 0x96	; 150
    128c:	11 c0       	rjmp	.+34     	; 0x12b0 <__floatsisf+0x6a>
    128e:	77 23       	and	r23, r23
    1290:	21 f0       	breq	.+8      	; 0x129a <__floatsisf+0x54>
    1292:	9e e8       	ldi	r25, 0x8E	; 142
    1294:	87 2f       	mov	r24, r23
    1296:	76 2f       	mov	r23, r22
    1298:	05 c0       	rjmp	.+10     	; 0x12a4 <__floatsisf+0x5e>
    129a:	66 23       	and	r22, r22
    129c:	71 f0       	breq	.+28     	; 0x12ba <__floatsisf+0x74>
    129e:	96 e8       	ldi	r25, 0x86	; 134
    12a0:	86 2f       	mov	r24, r22
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	2a f0       	brmi	.+10     	; 0x12b2 <__floatsisf+0x6c>
    12a8:	9a 95       	dec	r25
    12aa:	66 0f       	add	r22, r22
    12ac:	77 1f       	adc	r23, r23
    12ae:	88 1f       	adc	r24, r24
    12b0:	da f7       	brpl	.-10     	; 0x12a8 <__floatsisf+0x62>
    12b2:	88 0f       	add	r24, r24
    12b4:	96 95       	lsr	r25
    12b6:	87 95       	ror	r24
    12b8:	97 f9       	bld	r25, 7
    12ba:	08 95       	ret

000012bc <__fp_inf>:
    12bc:	97 f9       	bld	r25, 7
    12be:	9f 67       	ori	r25, 0x7F	; 127
    12c0:	80 e8       	ldi	r24, 0x80	; 128
    12c2:	70 e0       	ldi	r23, 0x00	; 0
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	08 95       	ret

000012c8 <__fp_nan>:
    12c8:	9f ef       	ldi	r25, 0xFF	; 255
    12ca:	80 ec       	ldi	r24, 0xC0	; 192
    12cc:	08 95       	ret

000012ce <__fp_pscA>:
    12ce:	00 24       	eor	r0, r0
    12d0:	0a 94       	dec	r0
    12d2:	16 16       	cp	r1, r22
    12d4:	17 06       	cpc	r1, r23
    12d6:	18 06       	cpc	r1, r24
    12d8:	09 06       	cpc	r0, r25
    12da:	08 95       	ret

000012dc <__fp_pscB>:
    12dc:	00 24       	eor	r0, r0
    12de:	0a 94       	dec	r0
    12e0:	12 16       	cp	r1, r18
    12e2:	13 06       	cpc	r1, r19
    12e4:	14 06       	cpc	r1, r20
    12e6:	05 06       	cpc	r0, r21
    12e8:	08 95       	ret

000012ea <__fp_round>:
    12ea:	09 2e       	mov	r0, r25
    12ec:	03 94       	inc	r0
    12ee:	00 0c       	add	r0, r0
    12f0:	11 f4       	brne	.+4      	; 0x12f6 <__fp_round+0xc>
    12f2:	88 23       	and	r24, r24
    12f4:	52 f0       	brmi	.+20     	; 0x130a <__fp_round+0x20>
    12f6:	bb 0f       	add	r27, r27
    12f8:	40 f4       	brcc	.+16     	; 0x130a <__fp_round+0x20>
    12fa:	bf 2b       	or	r27, r31
    12fc:	11 f4       	brne	.+4      	; 0x1302 <__fp_round+0x18>
    12fe:	60 ff       	sbrs	r22, 0
    1300:	04 c0       	rjmp	.+8      	; 0x130a <__fp_round+0x20>
    1302:	6f 5f       	subi	r22, 0xFF	; 255
    1304:	7f 4f       	sbci	r23, 0xFF	; 255
    1306:	8f 4f       	sbci	r24, 0xFF	; 255
    1308:	9f 4f       	sbci	r25, 0xFF	; 255
    130a:	08 95       	ret

0000130c <__fp_split3>:
    130c:	57 fd       	sbrc	r21, 7
    130e:	90 58       	subi	r25, 0x80	; 128
    1310:	44 0f       	add	r20, r20
    1312:	55 1f       	adc	r21, r21
    1314:	59 f0       	breq	.+22     	; 0x132c <__fp_splitA+0x10>
    1316:	5f 3f       	cpi	r21, 0xFF	; 255
    1318:	71 f0       	breq	.+28     	; 0x1336 <__fp_splitA+0x1a>
    131a:	47 95       	ror	r20

0000131c <__fp_splitA>:
    131c:	88 0f       	add	r24, r24
    131e:	97 fb       	bst	r25, 7
    1320:	99 1f       	adc	r25, r25
    1322:	61 f0       	breq	.+24     	; 0x133c <__fp_splitA+0x20>
    1324:	9f 3f       	cpi	r25, 0xFF	; 255
    1326:	79 f0       	breq	.+30     	; 0x1346 <__fp_splitA+0x2a>
    1328:	87 95       	ror	r24
    132a:	08 95       	ret
    132c:	12 16       	cp	r1, r18
    132e:	13 06       	cpc	r1, r19
    1330:	14 06       	cpc	r1, r20
    1332:	55 1f       	adc	r21, r21
    1334:	f2 cf       	rjmp	.-28     	; 0x131a <__fp_split3+0xe>
    1336:	46 95       	lsr	r20
    1338:	f1 df       	rcall	.-30     	; 0x131c <__fp_splitA>
    133a:	08 c0       	rjmp	.+16     	; 0x134c <__fp_splitA+0x30>
    133c:	16 16       	cp	r1, r22
    133e:	17 06       	cpc	r1, r23
    1340:	18 06       	cpc	r1, r24
    1342:	99 1f       	adc	r25, r25
    1344:	f1 cf       	rjmp	.-30     	; 0x1328 <__fp_splitA+0xc>
    1346:	86 95       	lsr	r24
    1348:	71 05       	cpc	r23, r1
    134a:	61 05       	cpc	r22, r1
    134c:	08 94       	sec
    134e:	08 95       	ret

00001350 <__fp_zero>:
    1350:	e8 94       	clt

00001352 <__fp_szero>:
    1352:	bb 27       	eor	r27, r27
    1354:	66 27       	eor	r22, r22
    1356:	77 27       	eor	r23, r23
    1358:	cb 01       	movw	r24, r22
    135a:	97 f9       	bld	r25, 7
    135c:	08 95       	ret

0000135e <__mulsf3>:
    135e:	0e 94 c2 09 	call	0x1384	; 0x1384 <__mulsf3x>
    1362:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__fp_round>
    1366:	0e 94 67 09 	call	0x12ce	; 0x12ce <__fp_pscA>
    136a:	38 f0       	brcs	.+14     	; 0x137a <__mulsf3+0x1c>
    136c:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__fp_pscB>
    1370:	20 f0       	brcs	.+8      	; 0x137a <__mulsf3+0x1c>
    1372:	95 23       	and	r25, r21
    1374:	11 f0       	breq	.+4      	; 0x137a <__mulsf3+0x1c>
    1376:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__fp_inf>
    137a:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__fp_nan>
    137e:	11 24       	eor	r1, r1
    1380:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__fp_szero>

00001384 <__mulsf3x>:
    1384:	0e 94 86 09 	call	0x130c	; 0x130c <__fp_split3>
    1388:	70 f3       	brcs	.-36     	; 0x1366 <__mulsf3+0x8>

0000138a <__mulsf3_pse>:
    138a:	95 9f       	mul	r25, r21
    138c:	c1 f3       	breq	.-16     	; 0x137e <__mulsf3+0x20>
    138e:	95 0f       	add	r25, r21
    1390:	50 e0       	ldi	r21, 0x00	; 0
    1392:	55 1f       	adc	r21, r21
    1394:	62 9f       	mul	r22, r18
    1396:	f0 01       	movw	r30, r0
    1398:	72 9f       	mul	r23, r18
    139a:	bb 27       	eor	r27, r27
    139c:	f0 0d       	add	r31, r0
    139e:	b1 1d       	adc	r27, r1
    13a0:	63 9f       	mul	r22, r19
    13a2:	aa 27       	eor	r26, r26
    13a4:	f0 0d       	add	r31, r0
    13a6:	b1 1d       	adc	r27, r1
    13a8:	aa 1f       	adc	r26, r26
    13aa:	64 9f       	mul	r22, r20
    13ac:	66 27       	eor	r22, r22
    13ae:	b0 0d       	add	r27, r0
    13b0:	a1 1d       	adc	r26, r1
    13b2:	66 1f       	adc	r22, r22
    13b4:	82 9f       	mul	r24, r18
    13b6:	22 27       	eor	r18, r18
    13b8:	b0 0d       	add	r27, r0
    13ba:	a1 1d       	adc	r26, r1
    13bc:	62 1f       	adc	r22, r18
    13be:	73 9f       	mul	r23, r19
    13c0:	b0 0d       	add	r27, r0
    13c2:	a1 1d       	adc	r26, r1
    13c4:	62 1f       	adc	r22, r18
    13c6:	83 9f       	mul	r24, r19
    13c8:	a0 0d       	add	r26, r0
    13ca:	61 1d       	adc	r22, r1
    13cc:	22 1f       	adc	r18, r18
    13ce:	74 9f       	mul	r23, r20
    13d0:	33 27       	eor	r19, r19
    13d2:	a0 0d       	add	r26, r0
    13d4:	61 1d       	adc	r22, r1
    13d6:	23 1f       	adc	r18, r19
    13d8:	84 9f       	mul	r24, r20
    13da:	60 0d       	add	r22, r0
    13dc:	21 1d       	adc	r18, r1
    13de:	82 2f       	mov	r24, r18
    13e0:	76 2f       	mov	r23, r22
    13e2:	6a 2f       	mov	r22, r26
    13e4:	11 24       	eor	r1, r1
    13e6:	9f 57       	subi	r25, 0x7F	; 127
    13e8:	50 40       	sbci	r21, 0x00	; 0
    13ea:	9a f0       	brmi	.+38     	; 0x1412 <__mulsf3_pse+0x88>
    13ec:	f1 f0       	breq	.+60     	; 0x142a <__mulsf3_pse+0xa0>
    13ee:	88 23       	and	r24, r24
    13f0:	4a f0       	brmi	.+18     	; 0x1404 <__mulsf3_pse+0x7a>
    13f2:	ee 0f       	add	r30, r30
    13f4:	ff 1f       	adc	r31, r31
    13f6:	bb 1f       	adc	r27, r27
    13f8:	66 1f       	adc	r22, r22
    13fa:	77 1f       	adc	r23, r23
    13fc:	88 1f       	adc	r24, r24
    13fe:	91 50       	subi	r25, 0x01	; 1
    1400:	50 40       	sbci	r21, 0x00	; 0
    1402:	a9 f7       	brne	.-22     	; 0x13ee <__mulsf3_pse+0x64>
    1404:	9e 3f       	cpi	r25, 0xFE	; 254
    1406:	51 05       	cpc	r21, r1
    1408:	80 f0       	brcs	.+32     	; 0x142a <__mulsf3_pse+0xa0>
    140a:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__fp_inf>
    140e:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__fp_szero>
    1412:	5f 3f       	cpi	r21, 0xFF	; 255
    1414:	e4 f3       	brlt	.-8      	; 0x140e <__mulsf3_pse+0x84>
    1416:	98 3e       	cpi	r25, 0xE8	; 232
    1418:	d4 f3       	brlt	.-12     	; 0x140e <__mulsf3_pse+0x84>
    141a:	86 95       	lsr	r24
    141c:	77 95       	ror	r23
    141e:	67 95       	ror	r22
    1420:	b7 95       	ror	r27
    1422:	f7 95       	ror	r31
    1424:	e7 95       	ror	r30
    1426:	9f 5f       	subi	r25, 0xFF	; 255
    1428:	c1 f7       	brne	.-16     	; 0x141a <__mulsf3_pse+0x90>
    142a:	fe 2b       	or	r31, r30
    142c:	88 0f       	add	r24, r24
    142e:	91 1d       	adc	r25, r1
    1430:	96 95       	lsr	r25
    1432:	87 95       	ror	r24
    1434:	97 f9       	bld	r25, 7
    1436:	08 95       	ret

00001438 <__tablejump2__>:
    1438:	ee 0f       	add	r30, r30
    143a:	ff 1f       	adc	r31, r31
    143c:	05 90       	lpm	r0, Z+
    143e:	f4 91       	lpm	r31, Z
    1440:	e0 2d       	mov	r30, r0
    1442:	09 94       	ijmp

00001444 <strncpy>:
    1444:	fb 01       	movw	r30, r22
    1446:	dc 01       	movw	r26, r24
    1448:	41 50       	subi	r20, 0x01	; 1
    144a:	50 40       	sbci	r21, 0x00	; 0
    144c:	48 f0       	brcs	.+18     	; 0x1460 <strncpy+0x1c>
    144e:	01 90       	ld	r0, Z+
    1450:	0d 92       	st	X+, r0
    1452:	00 20       	and	r0, r0
    1454:	c9 f7       	brne	.-14     	; 0x1448 <strncpy+0x4>
    1456:	01 c0       	rjmp	.+2      	; 0x145a <strncpy+0x16>
    1458:	1d 92       	st	X+, r1
    145a:	41 50       	subi	r20, 0x01	; 1
    145c:	50 40       	sbci	r21, 0x00	; 0
    145e:	e0 f7       	brcc	.-8      	; 0x1458 <strncpy+0x14>
    1460:	08 95       	ret

00001462 <__itoa_ncheck>:
    1462:	bb 27       	eor	r27, r27
    1464:	4a 30       	cpi	r20, 0x0A	; 10
    1466:	31 f4       	brne	.+12     	; 0x1474 <__itoa_ncheck+0x12>
    1468:	99 23       	and	r25, r25
    146a:	22 f4       	brpl	.+8      	; 0x1474 <__itoa_ncheck+0x12>
    146c:	bd e2       	ldi	r27, 0x2D	; 45
    146e:	90 95       	com	r25
    1470:	81 95       	neg	r24
    1472:	9f 4f       	sbci	r25, 0xFF	; 255
    1474:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__utoa_common>

00001478 <__utoa_ncheck>:
    1478:	bb 27       	eor	r27, r27

0000147a <__utoa_common>:
    147a:	fb 01       	movw	r30, r22
    147c:	55 27       	eor	r21, r21
    147e:	aa 27       	eor	r26, r26
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	aa 1f       	adc	r26, r26
    1486:	a4 17       	cp	r26, r20
    1488:	10 f0       	brcs	.+4      	; 0x148e <__utoa_common+0x14>
    148a:	a4 1b       	sub	r26, r20
    148c:	83 95       	inc	r24
    148e:	50 51       	subi	r21, 0x10	; 16
    1490:	b9 f7       	brne	.-18     	; 0x1480 <__utoa_common+0x6>
    1492:	a0 5d       	subi	r26, 0xD0	; 208
    1494:	aa 33       	cpi	r26, 0x3A	; 58
    1496:	08 f0       	brcs	.+2      	; 0x149a <__utoa_common+0x20>
    1498:	a9 5d       	subi	r26, 0xD9	; 217
    149a:	a1 93       	st	Z+, r26
    149c:	00 97       	sbiw	r24, 0x00	; 0
    149e:	79 f7       	brne	.-34     	; 0x147e <__utoa_common+0x4>
    14a0:	b1 11       	cpse	r27, r1
    14a2:	b1 93       	st	Z+, r27
    14a4:	11 92       	st	Z+, r1
    14a6:	cb 01       	movw	r24, r22
    14a8:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <strrev>

000014ac <strrev>:
    14ac:	dc 01       	movw	r26, r24
    14ae:	fc 01       	movw	r30, r24
    14b0:	67 2f       	mov	r22, r23
    14b2:	71 91       	ld	r23, Z+
    14b4:	77 23       	and	r23, r23
    14b6:	e1 f7       	brne	.-8      	; 0x14b0 <strrev+0x4>
    14b8:	32 97       	sbiw	r30, 0x02	; 2
    14ba:	04 c0       	rjmp	.+8      	; 0x14c4 <strrev+0x18>
    14bc:	7c 91       	ld	r23, X
    14be:	6d 93       	st	X+, r22
    14c0:	70 83       	st	Z, r23
    14c2:	62 91       	ld	r22, -Z
    14c4:	ae 17       	cp	r26, r30
    14c6:	bf 07       	cpc	r27, r31
    14c8:	c8 f3       	brcs	.-14     	; 0x14bc <strrev+0x10>
    14ca:	08 95       	ret

000014cc <_exit>:
    14cc:	f8 94       	cli

000014ce <__stop_program>:
    14ce:	ff cf       	rjmp	.-2      	; 0x14ce <__stop_program>
